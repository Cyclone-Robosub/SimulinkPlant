var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"PID_LOOP/Controller","ref":false,"files":[{"name":"Controller.c","type":"source","group":"model","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Controller.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Controller.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n#include \"rt_nonfinite.h\"\r\n#include <emmintrin.h>\r\n#include \"Controller_private.h\"\r\n#include <string.h>\r\n\r\n/* Block signals (default storage) */\r\nB_Controller_T Controller_B;\r\n\r\n/* Continuous states */\r\nX_Controller_T Controller_X;\r\n\r\n/* Disabled State Vector */\r\nXDis_Controller_T Controller_XDis;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_Controller_T Controller_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_Controller_T Controller_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_Controller_T Controller_M_;\r\nRT_MODEL_Controller_T *const Controller_M = &Controller_M_;\r\n\r\n/* Forward declaration for local functions */\r\nstatic real_T Controller_xzlangeM(const real_T x[48]);\r\nstatic void Controller_xzlascl(real_T cfrom, real_T cto, real_T A[48]);\r\nstatic real_T Controller_xnrm2(int32_T n, const real_T x[48], int32_T ix0);\r\nstatic real_T Controller_xdotc(int32_T n, const real_T x[48], int32_T ix0, const\r\n  real_T y[48], int32_T iy0);\r\nstatic void Controller_xaxpy(int32_T n, real_T a, int32_T ix0, real_T y[48],\r\n  int32_T iy0);\r\nstatic real_T Controller_xnrm2_g(int32_T n, const real_T x[6], int32_T ix0);\r\nstatic void Controller_xaxpy_i(int32_T n, real_T a, const real_T x[48], int32_T\r\n  ix0, real_T y[8], int32_T iy0);\r\nstatic void Controller_xaxpy_iv(int32_T n, real_T a, const real_T x[8], int32_T\r\n  ix0, real_T y[48], int32_T iy0);\r\nstatic real_T Controller_xdotc_l(int32_T n, const real_T x[36], int32_T ix0,\r\n  const real_T y[36], int32_T iy0);\r\nstatic void Controller_xaxpy_ivt(int32_T n, real_T a, int32_T ix0, real_T y[36],\r\n  int32_T iy0);\r\nstatic void Controller_xzlascl_h(real_T cfrom, real_T cto, real_T A[6]);\r\nstatic void Controller_xswap(real_T x[36], int32_T ix0, int32_T iy0);\r\nstatic void Controller_xswap_j(real_T x[48], int32_T ix0, int32_T iy0);\r\nstatic void Controller_xrotg(real_T *a, real_T *b, real_T *c, real_T *s);\r\nstatic void Controller_xrot(real_T x[36], int32_T ix0, int32_T iy0, real_T c,\r\n  real_T s);\r\nstatic void Controller_xrot_c(real_T x[48], int32_T ix0, int32_T iy0, real_T c,\r\n  real_T s);\r\nstatic void Controller_svd(const real_T A[48], real_T U[48], real_T s[6], real_T\r\n  V[36]);\r\n\r\n/*\r\n * This function updates continuous states using the ODE3 fixed-step\r\n * solver algorithm\r\n */\r\nstatic void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  /* Solver Matrices */\r\n  static const real_T rt_ODE3_A[3] = {\r\n    1.0/2.0, 3.0/4.0, 1.0\r\n  };\r\n\r\n  static const real_T rt_ODE3_B[3][3] = {\r\n    { 1.0/2.0, 0.0, 0.0 },\r\n\r\n    { 0.0, 3.0/4.0, 0.0 },\r\n\r\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\r\n  };\r\n\r\n  time_T t = rtsiGetT(si);\r\n  time_T tnew = rtsiGetSolverStopTime(si);\r\n  time_T h = rtsiGetStepSize(si);\r\n  real_T *x = rtsiGetContStates(si);\r\n  ODE3_IntgData *id = (ODE3_IntgData *)rtsiGetSolverData(si);\r\n  real_T *y = id->y;\r\n  real_T *f0 = id->f[0];\r\n  real_T *f1 = id->f[1];\r\n  real_T *f2 = id->f[2];\r\n  real_T hB[3];\r\n  int_T i;\r\n  int_T nXc = 12;\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) memcpy(y, x,\r\n                (uint_T)nXc*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  Controller_derivatives();\r\n\r\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\r\n  hB[0] = h * rt_ODE3_B[0][0];\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\r\n  rtsiSetdX(si, f1);\r\n  Controller_step();\r\n  Controller_derivatives();\r\n\r\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\r\n  for (i = 0; i <= 1; i++) {\r\n    hB[i] = h * rt_ODE3_B[1][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\r\n  rtsiSetdX(si, f2);\r\n  Controller_step();\r\n  Controller_derivatives();\r\n\r\n  /* tnew = t + hA(3);\r\n     ynew = y + f*hB(:,3); */\r\n  for (i = 0; i <= 2; i++) {\r\n    hB[i] = h * rt_ODE3_B[2][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\r\n  }\r\n\r\n  rtsiSetT(si, tnew);\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic real_T Controller_xzlangeM(const real_T x[48])\r\n{\r\n  real_T y;\r\n  int32_T k;\r\n  boolean_T exitg1;\r\n  y = 0.0;\r\n  k = 0;\r\n  exitg1 = false;\r\n  while ((!exitg1) && (k < 48)) {\r\n    real_T absxk;\r\n    absxk = fabs(x[k]);\r\n    if (rtIsNaN(absxk)) {\r\n      y = (rtNaN);\r\n      exitg1 = true;\r\n    } else {\r\n      if (absxk > y) {\r\n        y = absxk;\r\n      }\r\n\r\n      k++;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xzlascl(real_T cfrom, real_T cto, real_T A[48])\r\n{\r\n  real_T cfromc;\r\n  real_T ctoc;\r\n  int32_T i;\r\n  boolean_T notdone;\r\n  cfromc = cfrom;\r\n  ctoc = cto;\r\n  notdone = true;\r\n  while (notdone) {\r\n    real_T cfrom1;\r\n    real_T cto1;\r\n    real_T mul;\r\n    cfrom1 = cfromc * 2.0041683600089728E-292;\r\n    cto1 = ctoc / 4.9896007738368E+291;\r\n    if ((fabs(cfrom1) > fabs(ctoc)) && (ctoc != 0.0)) {\r\n      mul = 2.0041683600089728E-292;\r\n      cfromc = cfrom1;\r\n    } else if (fabs(cto1) > fabs(cfromc)) {\r\n      mul = 4.9896007738368E+291;\r\n      ctoc = cto1;\r\n    } else {\r\n      mul = ctoc / cfromc;\r\n      notdone = false;\r\n    }\r\n\r\n    for (i = 0; i <= 46; i += 2) {\r\n      __m128d tmp;\r\n      tmp = _mm_loadu_pd(&A[i]);\r\n      tmp = _mm_mul_pd(tmp, _mm_set1_pd(mul));\r\n      _mm_storeu_pd(&A[i], tmp);\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic real_T Controller_xnrm2(int32_T n, const real_T x[48], int32_T ix0)\r\n{\r\n  real_T scale;\r\n  real_T y;\r\n  int32_T k;\r\n  int32_T kend;\r\n  y = 0.0;\r\n  scale = 3.3121686421112381E-170;\r\n  kend = ix0 + n;\r\n  for (k = ix0; k < kend; k++) {\r\n    real_T absxk;\r\n    absxk = fabs(x[k - 1]);\r\n    if (absxk > scale) {\r\n      real_T t;\r\n      t = scale / absxk;\r\n      y = y * t * t + 1.0;\r\n      scale = absxk;\r\n    } else {\r\n      real_T t;\r\n      t = absxk / scale;\r\n      y += t * t;\r\n    }\r\n  }\r\n\r\n  return scale * sqrt(y);\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic real_T Controller_xdotc(int32_T n, const real_T x[48], int32_T ix0, const\r\n  real_T y[48], int32_T iy0)\r\n{\r\n  real_T d;\r\n  int32_T b;\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T k;\r\n  ix = ix0 - 1;\r\n  iy = iy0 - 1;\r\n  d = 0.0;\r\n  b = (uint8_T)n;\r\n  for (k = 0; k < b; k++) {\r\n    d += x[ix + k] * y[iy + k];\r\n  }\r\n\r\n  return d;\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xaxpy(int32_T n, real_T a, int32_T ix0, real_T y[48],\r\n  int32_T iy0)\r\n{\r\n  int32_T k;\r\n  if (!(a == 0.0)) {\r\n    int32_T iy;\r\n    iy = iy0 - 1;\r\n    for (k = 0; k < n; k++) {\r\n      int32_T tmp;\r\n      tmp = iy + k;\r\n      y[tmp] += y[(ix0 + k) - 1] * a;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic real_T Controller_xnrm2_g(int32_T n, const real_T x[6], int32_T ix0)\r\n{\r\n  real_T scale;\r\n  real_T y;\r\n  int32_T k;\r\n  int32_T kend;\r\n  y = 0.0;\r\n  scale = 3.3121686421112381E-170;\r\n  kend = ix0 + n;\r\n  for (k = ix0; k < kend; k++) {\r\n    real_T absxk;\r\n    absxk = fabs(x[k - 1]);\r\n    if (absxk > scale) {\r\n      real_T t;\r\n      t = scale / absxk;\r\n      y = y * t * t + 1.0;\r\n      scale = absxk;\r\n    } else {\r\n      real_T t;\r\n      t = absxk / scale;\r\n      y += t * t;\r\n    }\r\n  }\r\n\r\n  return scale * sqrt(y);\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xaxpy_i(int32_T n, real_T a, const real_T x[48], int32_T\r\n  ix0, real_T y[8], int32_T iy0)\r\n{\r\n  int32_T k;\r\n  if (!(a == 0.0)) {\r\n    int32_T iy;\r\n    int32_T scalarLB;\r\n    int32_T tmp_1;\r\n    int32_T vectorUB;\r\n    iy = iy0 - 1;\r\n    scalarLB = (n / 2) << 1;\r\n    vectorUB = scalarLB - 2;\r\n    for (k = 0; k <= vectorUB; k += 2) {\r\n      __m128d tmp;\r\n      __m128d tmp_0;\r\n      tmp = _mm_loadu_pd(&x[(ix0 + k) - 1]);\r\n      tmp = _mm_mul_pd(tmp, _mm_set1_pd(a));\r\n      tmp_1 = iy + k;\r\n      tmp_0 = _mm_loadu_pd(&y[tmp_1]);\r\n      tmp = _mm_add_pd(tmp, tmp_0);\r\n      _mm_storeu_pd(&y[tmp_1], tmp);\r\n    }\r\n\r\n    for (k = scalarLB; k < n; k++) {\r\n      tmp_1 = iy + k;\r\n      y[tmp_1] += x[(ix0 + k) - 1] * a;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xaxpy_iv(int32_T n, real_T a, const real_T x[8], int32_T\r\n  ix0, real_T y[48], int32_T iy0)\r\n{\r\n  int32_T k;\r\n  if (!(a == 0.0)) {\r\n    int32_T iy;\r\n    int32_T scalarLB;\r\n    int32_T tmp_1;\r\n    int32_T vectorUB;\r\n    iy = iy0 - 1;\r\n    scalarLB = (n / 2) << 1;\r\n    vectorUB = scalarLB - 2;\r\n    for (k = 0; k <= vectorUB; k += 2) {\r\n      __m128d tmp;\r\n      __m128d tmp_0;\r\n      tmp = _mm_loadu_pd(&x[(ix0 + k) - 1]);\r\n      tmp = _mm_mul_pd(tmp, _mm_set1_pd(a));\r\n      tmp_1 = iy + k;\r\n      tmp_0 = _mm_loadu_pd(&y[tmp_1]);\r\n      tmp = _mm_add_pd(tmp, tmp_0);\r\n      _mm_storeu_pd(&y[tmp_1], tmp);\r\n    }\r\n\r\n    for (k = scalarLB; k < n; k++) {\r\n      tmp_1 = iy + k;\r\n      y[tmp_1] += x[(ix0 + k) - 1] * a;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic real_T Controller_xdotc_l(int32_T n, const real_T x[36], int32_T ix0,\r\n  const real_T y[36], int32_T iy0)\r\n{\r\n  real_T d;\r\n  int32_T b;\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T k;\r\n  ix = ix0 - 1;\r\n  iy = iy0 - 1;\r\n  d = 0.0;\r\n  b = (uint8_T)n;\r\n  for (k = 0; k < b; k++) {\r\n    d += x[ix + k] * y[iy + k];\r\n  }\r\n\r\n  return d;\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xaxpy_ivt(int32_T n, real_T a, int32_T ix0, real_T y[36],\r\n  int32_T iy0)\r\n{\r\n  int32_T k;\r\n  if (!(a == 0.0)) {\r\n    int32_T iy;\r\n    iy = iy0 - 1;\r\n    for (k = 0; k < n; k++) {\r\n      int32_T tmp;\r\n      tmp = iy + k;\r\n      y[tmp] += y[(ix0 + k) - 1] * a;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xzlascl_h(real_T cfrom, real_T cto, real_T A[6])\r\n{\r\n  real_T cfromc;\r\n  real_T ctoc;\r\n  int32_T i;\r\n  boolean_T notdone;\r\n  cfromc = cfrom;\r\n  ctoc = cto;\r\n  notdone = true;\r\n  while (notdone) {\r\n    real_T cfrom1;\r\n    real_T cto1;\r\n    real_T mul;\r\n    cfrom1 = cfromc * 2.0041683600089728E-292;\r\n    cto1 = ctoc / 4.9896007738368E+291;\r\n    if ((fabs(cfrom1) > fabs(ctoc)) && (ctoc != 0.0)) {\r\n      mul = 2.0041683600089728E-292;\r\n      cfromc = cfrom1;\r\n    } else if (fabs(cto1) > fabs(cfromc)) {\r\n      mul = 4.9896007738368E+291;\r\n      ctoc = cto1;\r\n    } else {\r\n      mul = ctoc / cfromc;\r\n      notdone = false;\r\n    }\r\n\r\n    for (i = 0; i <= 4; i += 2) {\r\n      __m128d tmp;\r\n      tmp = _mm_loadu_pd(&A[i]);\r\n      tmp = _mm_mul_pd(tmp, _mm_set1_pd(mul));\r\n      _mm_storeu_pd(&A[i], tmp);\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xswap(real_T x[36], int32_T ix0, int32_T iy0)\r\n{\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T k;\r\n  ix = ix0 - 1;\r\n  iy = iy0 - 1;\r\n  for (k = 0; k < 6; k++) {\r\n    real_T temp;\r\n    int32_T temp_tmp;\r\n    int32_T tmp;\r\n    temp_tmp = ix + k;\r\n    temp = x[temp_tmp];\r\n    tmp = iy + k;\r\n    x[temp_tmp] = x[tmp];\r\n    x[tmp] = temp;\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xswap_j(real_T x[48], int32_T ix0, int32_T iy0)\r\n{\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T k;\r\n  ix = ix0 - 1;\r\n  iy = iy0 - 1;\r\n  for (k = 0; k < 8; k++) {\r\n    real_T temp;\r\n    int32_T temp_tmp;\r\n    int32_T tmp;\r\n    temp_tmp = ix + k;\r\n    temp = x[temp_tmp];\r\n    tmp = iy + k;\r\n    x[temp_tmp] = x[tmp];\r\n    x[tmp] = temp;\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xrotg(real_T *a, real_T *b, real_T *c, real_T *s)\r\n{\r\n  real_T absa;\r\n  real_T absb;\r\n  real_T roe;\r\n  real_T scale;\r\n  roe = *b;\r\n  absa = fabs(*a);\r\n  absb = fabs(*b);\r\n  if (absa > absb) {\r\n    roe = *a;\r\n  }\r\n\r\n  scale = absa + absb;\r\n  if (scale == 0.0) {\r\n    *s = 0.0;\r\n    *c = 1.0;\r\n    *a = 0.0;\r\n    *b = 0.0;\r\n  } else {\r\n    real_T ads;\r\n    real_T bds;\r\n    ads = absa / scale;\r\n    bds = absb / scale;\r\n    scale *= sqrt(ads * ads + bds * bds);\r\n    if (roe < 0.0) {\r\n      scale = -scale;\r\n    }\r\n\r\n    *c = *a / scale;\r\n    *s = *b / scale;\r\n    if (absa > absb) {\r\n      *b = *s;\r\n    } else if (*c != 0.0) {\r\n      *b = 1.0 / *c;\r\n    } else {\r\n      *b = 1.0;\r\n    }\r\n\r\n    *a = scale;\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xrot(real_T x[36], int32_T ix0, int32_T iy0, real_T c,\r\n  real_T s)\r\n{\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T k;\r\n  ix = ix0 - 1;\r\n  iy = iy0 - 1;\r\n  for (k = 0; k < 6; k++) {\r\n    real_T temp;\r\n    real_T temp_tmp;\r\n    real_T temp_tmp_0;\r\n    int32_T temp_tmp_tmp;\r\n    int32_T temp_tmp_tmp_0;\r\n    temp_tmp_tmp = iy + k;\r\n    temp_tmp = x[temp_tmp_tmp];\r\n    temp_tmp_tmp_0 = ix + k;\r\n    temp_tmp_0 = x[temp_tmp_tmp_0];\r\n    temp = temp_tmp_0 * c + temp_tmp * s;\r\n    x[temp_tmp_tmp] = temp_tmp * c - temp_tmp_0 * s;\r\n    x[temp_tmp_tmp_0] = temp;\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_xrot_c(real_T x[48], int32_T ix0, int32_T iy0, real_T c,\r\n  real_T s)\r\n{\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T k;\r\n  ix = ix0 - 1;\r\n  iy = iy0 - 1;\r\n  for (k = 0; k < 8; k++) {\r\n    real_T temp;\r\n    real_T temp_tmp;\r\n    real_T temp_tmp_0;\r\n    int32_T temp_tmp_tmp;\r\n    int32_T temp_tmp_tmp_0;\r\n    temp_tmp_tmp = iy + k;\r\n    temp_tmp = x[temp_tmp_tmp];\r\n    temp_tmp_tmp_0 = ix + k;\r\n    temp_tmp_0 = x[temp_tmp_tmp_0];\r\n    temp = temp_tmp_0 * c + temp_tmp * s;\r\n    x[temp_tmp_tmp] = temp_tmp * c - temp_tmp_0 * s;\r\n    x[temp_tmp_tmp_0] = temp;\r\n  }\r\n}\r\n\r\n/* Function for MATLAB Function: '<S1>/MATLAB Function' */\r\nstatic void Controller_svd(const real_T A[48], real_T U[48], real_T s[6], real_T\r\n  V[36])\r\n{\r\n  __m128d tmp;\r\n  __m128d tmp_0;\r\n  real_T b_A[48];\r\n  real_T work[8];\r\n  real_T b_s_tmp[6];\r\n  real_T e[6];\r\n  real_T tmp_1[2];\r\n  real_T anrm;\r\n  real_T cscale;\r\n  real_T emm1;\r\n  real_T nrm;\r\n  real_T rt;\r\n  real_T shift;\r\n  real_T smm1;\r\n  real_T sqds;\r\n  real_T ztest;\r\n  int32_T exitg1;\r\n  int32_T i;\r\n  int32_T qjj;\r\n  int32_T qp1;\r\n  int32_T qp1jj;\r\n  int32_T qq;\r\n  int32_T qq_tmp;\r\n  int32_T qq_tmp_tmp;\r\n  int32_T scalarLB;\r\n  int32_T vectorUB;\r\n  boolean_T apply_transform;\r\n  boolean_T doscale;\r\n  boolean_T exitg2;\r\n  memcpy(&b_A[0], &A[0], 48U * sizeof(real_T));\r\n  for (i = 0; i < 6; i++) {\r\n    b_s_tmp[i] = 0.0;\r\n    e[i] = 0.0;\r\n  }\r\n\r\n  memset(&work[0], 0, sizeof(real_T) << 3U);\r\n  memset(&U[0], 0, 48U * sizeof(real_T));\r\n  memset(&V[0], 0, 36U * sizeof(real_T));\r\n  doscale = false;\r\n  anrm = Controller_xzlangeM(A);\r\n  cscale = anrm;\r\n  if ((anrm > 0.0) && (anrm < 6.7178761075670888E-139)) {\r\n    doscale = true;\r\n    cscale = 6.7178761075670888E-139;\r\n    Controller_xzlascl(anrm, cscale, b_A);\r\n  } else if (anrm > 1.4885657073574029E+138) {\r\n    doscale = true;\r\n    cscale = 1.4885657073574029E+138;\r\n    Controller_xzlascl(anrm, cscale, b_A);\r\n  }\r\n\r\n  for (i = 0; i < 6; i++) {\r\n    qp1 = i + 2;\r\n    qq_tmp_tmp = i << 3;\r\n    qq_tmp = qq_tmp_tmp + i;\r\n    qq = qq_tmp + 1;\r\n    apply_transform = false;\r\n    nrm = Controller_xnrm2(8 - i, b_A, qq);\r\n    if (nrm > 0.0) {\r\n      apply_transform = true;\r\n      if (b_A[qq - 1] < 0.0) {\r\n        nrm = -nrm;\r\n      }\r\n\r\n      b_s_tmp[i] = nrm;\r\n      if (fabs(nrm) >= 1.0020841800044864E-292) {\r\n        nrm = 1.0 / nrm;\r\n        qjj = (qq - i) + 7;\r\n        scalarLB = ((((qjj - qq) + 1) / 2) << 1) + qq;\r\n        vectorUB = scalarLB - 2;\r\n        for (qp1jj = qq; qp1jj <= vectorUB; qp1jj += 2) {\r\n          tmp = _mm_loadu_pd(&b_A[qp1jj - 1]);\r\n          tmp = _mm_mul_pd(tmp, _mm_set1_pd(nrm));\r\n          _mm_storeu_pd(&b_A[qp1jj - 1], tmp);\r\n        }\r\n\r\n        for (qp1jj = scalarLB; qp1jj <= qjj; qp1jj++) {\r\n          b_A[qp1jj - 1] *= nrm;\r\n        }\r\n      } else {\r\n        qjj = (qq - i) + 7;\r\n        scalarLB = ((((qjj - qq) + 1) / 2) << 1) + qq;\r\n        vectorUB = scalarLB - 2;\r\n        for (qp1jj = qq; qp1jj <= vectorUB; qp1jj += 2) {\r\n          tmp = _mm_loadu_pd(&b_A[qp1jj - 1]);\r\n          tmp = _mm_div_pd(tmp, _mm_set1_pd(b_s_tmp[i]));\r\n          _mm_storeu_pd(&b_A[qp1jj - 1], tmp);\r\n        }\r\n\r\n        for (qp1jj = scalarLB; qp1jj <= qjj; qp1jj++) {\r\n          b_A[qp1jj - 1] /= b_s_tmp[i];\r\n        }\r\n      }\r\n\r\n      b_A[qq - 1]++;\r\n      b_s_tmp[i] = -b_s_tmp[i];\r\n    } else {\r\n      b_s_tmp[i] = 0.0;\r\n    }\r\n\r\n    for (qp1jj = qp1; qp1jj < 7; qp1jj++) {\r\n      qjj = ((qp1jj - 1) << 3) + i;\r\n      if (apply_transform) {\r\n        Controller_xaxpy(8 - i, -(Controller_xdotc(8 - i, b_A, qq, b_A, qjj + 1)\r\n          / b_A[qq_tmp]), qq, b_A, qjj + 1);\r\n      }\r\n\r\n      e[qp1jj - 1] = b_A[qjj];\r\n    }\r\n\r\n    for (qq = i + 1; qq < 9; qq++) {\r\n      qp1jj = (qq_tmp_tmp + qq) - 1;\r\n      U[qp1jj] = b_A[qp1jj];\r\n    }\r\n\r\n    if (i + 1 <= 4) {\r\n      nrm = Controller_xnrm2_g(5 - i, e, i + 2);\r\n      if (nrm == 0.0) {\r\n        e[i] = 0.0;\r\n      } else {\r\n        if (e[i + 1] < 0.0) {\r\n          e[i] = -nrm;\r\n        } else {\r\n          e[i] = nrm;\r\n        }\r\n\r\n        nrm = e[i];\r\n        if (fabs(e[i]) >= 1.0020841800044864E-292) {\r\n          nrm = 1.0 / e[i];\r\n          scalarLB = (((7 - qp1) / 2) << 1) + qp1;\r\n          vectorUB = scalarLB - 2;\r\n          for (qjj = qp1; qjj <= vectorUB; qjj += 2) {\r\n            tmp = _mm_loadu_pd(&e[qjj - 1]);\r\n            tmp = _mm_mul_pd(tmp, _mm_set1_pd(nrm));\r\n            _mm_storeu_pd(&e[qjj - 1], tmp);\r\n          }\r\n\r\n          for (qjj = scalarLB; qjj < 7; qjj++) {\r\n            e[qjj - 1] *= nrm;\r\n          }\r\n        } else {\r\n          scalarLB = (((7 - qp1) / 2) << 1) + qp1;\r\n          vectorUB = scalarLB - 2;\r\n          for (qjj = qp1; qjj <= vectorUB; qjj += 2) {\r\n            tmp = _mm_loadu_pd(&e[qjj - 1]);\r\n            tmp = _mm_div_pd(tmp, _mm_set1_pd(nrm));\r\n            _mm_storeu_pd(&e[qjj - 1], tmp);\r\n          }\r\n\r\n          for (qjj = scalarLB; qjj < 7; qjj++) {\r\n            e[qjj - 1] /= nrm;\r\n          }\r\n        }\r\n\r\n        e[i + 1]++;\r\n        e[i] = -e[i];\r\n        for (qq = qp1; qq < 9; qq++) {\r\n          work[qq - 1] = 0.0;\r\n        }\r\n\r\n        for (qq = qp1; qq < 7; qq++) {\r\n          Controller_xaxpy_i(7 - i, e[qq - 1], b_A, (i + ((qq - 1) << 3)) + 2,\r\n                             work, i + 2);\r\n        }\r\n\r\n        for (qq = qp1; qq < 7; qq++) {\r\n          Controller_xaxpy_iv(7 - i, -e[qq - 1] / e[i + 1], work, i + 2, b_A, (i\r\n            + ((qq - 1) << 3)) + 2);\r\n        }\r\n      }\r\n\r\n      for (qq = qp1; qq < 7; qq++) {\r\n        V[(qq + 6 * i) - 1] = e[qq - 1];\r\n      }\r\n    }\r\n  }\r\n\r\n  i = 4;\r\n  e[4] = b_A[44];\r\n  e[5] = 0.0;\r\n  for (qp1 = 5; qp1 >= 0; qp1--) {\r\n    qq_tmp = qp1 << 3;\r\n    qq = qq_tmp + qp1;\r\n    if (b_s_tmp[qp1] != 0.0) {\r\n      for (qp1jj = qp1 + 2; qp1jj < 7; qp1jj++) {\r\n        qjj = (((qp1jj - 1) << 3) + qp1) + 1;\r\n        Controller_xaxpy(8 - qp1, -(Controller_xdotc(8 - qp1, U, qq + 1, U, qjj)\r\n          / U[qq]), qq + 1, U, qjj);\r\n      }\r\n\r\n      for (qjj = qp1 + 1; qjj < 9; qjj++) {\r\n        qp1jj = (qq_tmp + qjj) - 1;\r\n        U[qp1jj] = -U[qp1jj];\r\n      }\r\n\r\n      U[qq]++;\r\n      for (qq = 0; qq < qp1; qq++) {\r\n        U[qq + qq_tmp] = 0.0;\r\n      }\r\n    } else {\r\n      memset(&U[qq_tmp], 0, sizeof(real_T) << 3U);\r\n      U[qq] = 1.0;\r\n    }\r\n  }\r\n\r\n  for (qp1 = 5; qp1 >= 0; qp1--) {\r\n    if ((qp1 + 1 <= 4) && (e[qp1] != 0.0)) {\r\n      qq = (6 * qp1 + qp1) + 2;\r\n      for (qjj = qp1 + 2; qjj < 7; qjj++) {\r\n        qp1jj = ((qjj - 1) * 6 + qp1) + 2;\r\n        Controller_xaxpy_ivt(5 - qp1, -(Controller_xdotc_l(5 - qp1, V, qq, V,\r\n          qp1jj) / V[qq - 1]), qq, V, qp1jj);\r\n      }\r\n    }\r\n\r\n    for (qq = 0; qq < 6; qq++) {\r\n      V[qq + 6 * qp1] = 0.0;\r\n    }\r\n\r\n    V[qp1 + 6 * qp1] = 1.0;\r\n  }\r\n\r\n  for (qp1 = 0; qp1 < 6; qp1++) {\r\n    sqds = b_s_tmp[qp1];\r\n    if (sqds != 0.0) {\r\n      rt = fabs(sqds);\r\n      nrm = sqds / rt;\r\n      sqds = rt;\r\n      b_s_tmp[qp1] = sqds;\r\n      if (qp1 + 1 < 6) {\r\n        e[qp1] /= nrm;\r\n      }\r\n\r\n      qq = (qp1 << 3) + 1;\r\n      scalarLB = 8 + qq;\r\n      vectorUB = scalarLB - 2;\r\n      for (qjj = qq; qjj <= vectorUB; qjj += 2) {\r\n        tmp = _mm_loadu_pd(&U[qjj - 1]);\r\n        tmp = _mm_mul_pd(tmp, _mm_set1_pd(nrm));\r\n        _mm_storeu_pd(&U[qjj - 1], tmp);\r\n      }\r\n\r\n      for (qjj = scalarLB; qjj <= qq + 7; qjj++) {\r\n        U[qjj - 1] *= nrm;\r\n      }\r\n    }\r\n\r\n    if (qp1 + 1 < 6) {\r\n      smm1 = e[qp1];\r\n      if (smm1 != 0.0) {\r\n        rt = fabs(smm1);\r\n        nrm = rt / smm1;\r\n        smm1 = rt;\r\n        e[qp1] = smm1;\r\n        b_s_tmp[qp1 + 1] *= nrm;\r\n        qq = (qp1 + 1) * 6 + 1;\r\n        scalarLB = 6 + qq;\r\n        vectorUB = scalarLB - 2;\r\n        for (qjj = qq; qjj <= vectorUB; qjj += 2) {\r\n          tmp = _mm_loadu_pd(&V[qjj - 1]);\r\n          tmp = _mm_mul_pd(tmp, _mm_set1_pd(nrm));\r\n          _mm_storeu_pd(&V[qjj - 1], tmp);\r\n        }\r\n\r\n        for (qjj = scalarLB; qjj <= qq + 5; qjj++) {\r\n          V[qjj - 1] *= nrm;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  qp1 = 0;\r\n  nrm = 0.0;\r\n  for (qq = 0; qq < 6; qq++) {\r\n    nrm = fmax(nrm, fmax(fabs(b_s_tmp[qq]), fabs(e[qq])));\r\n  }\r\n\r\n  while ((i + 2 > 0) && (qp1 < 75)) {\r\n    qp1jj = i + 1;\r\n    do {\r\n      exitg1 = 0;\r\n      qq = qp1jj;\r\n      if (qp1jj == 0) {\r\n        exitg1 = 1;\r\n      } else {\r\n        rt = fabs(e[qp1jj - 1]);\r\n        if ((rt <= (fabs(b_s_tmp[qp1jj - 1]) + fabs(b_s_tmp[qp1jj])) *\r\n             2.2204460492503131E-16) || ((rt <= 1.0020841800044864E-292) ||\r\n             ((qp1 > 20) && (rt <= 2.2204460492503131E-16 * nrm)))) {\r\n          e[qp1jj - 1] = 0.0;\r\n          exitg1 = 1;\r\n        } else {\r\n          qp1jj--;\r\n        }\r\n      }\r\n    } while (exitg1 == 0);\r\n\r\n    if (i + 1 == qp1jj) {\r\n      qp1jj = 4;\r\n    } else {\r\n      qjj = i + 2;\r\n      qq_tmp_tmp = i + 2;\r\n      exitg2 = false;\r\n      while ((!exitg2) && (qq_tmp_tmp >= qp1jj)) {\r\n        qjj = qq_tmp_tmp;\r\n        if (qq_tmp_tmp == qp1jj) {\r\n          exitg2 = true;\r\n        } else {\r\n          rt = 0.0;\r\n          if (qq_tmp_tmp < i + 2) {\r\n            rt = fabs(e[qq_tmp_tmp - 1]);\r\n          }\r\n\r\n          if (qq_tmp_tmp > qp1jj + 1) {\r\n            rt += fabs(e[qq_tmp_tmp - 2]);\r\n          }\r\n\r\n          ztest = fabs(b_s_tmp[qq_tmp_tmp - 1]);\r\n          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=\r\n               1.0020841800044864E-292)) {\r\n            b_s_tmp[qq_tmp_tmp - 1] = 0.0;\r\n            exitg2 = true;\r\n          } else {\r\n            qq_tmp_tmp--;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (qjj == qp1jj) {\r\n        qp1jj = 3;\r\n      } else if (i + 2 == qjj) {\r\n        qp1jj = 1;\r\n      } else {\r\n        qp1jj = 2;\r\n        qq = qjj;\r\n      }\r\n    }\r\n\r\n    switch (qp1jj) {\r\n     case 1:\r\n      rt = e[i];\r\n      e[i] = 0.0;\r\n      for (qjj = i + 1; qjj >= qq + 1; qjj--) {\r\n        Controller_xrotg(&b_s_tmp[qjj - 1], &rt, &ztest, &sqds);\r\n        if (qjj > qq + 1) {\r\n          smm1 = e[qjj - 2];\r\n          rt = -sqds * smm1;\r\n          smm1 *= ztest;\r\n          e[qjj - 2] = smm1;\r\n        }\r\n\r\n        Controller_xrot(V, 6 * (qjj - 1) + 1, 6 * (i + 1) + 1, ztest, sqds);\r\n      }\r\n      break;\r\n\r\n     case 2:\r\n      rt = e[qq - 1];\r\n      e[qq - 1] = 0.0;\r\n      for (qjj = qq + 1; qjj <= i + 2; qjj++) {\r\n        Controller_xrotg(&b_s_tmp[qjj - 1], &rt, &ztest, &sqds);\r\n        smm1 = e[qjj - 1];\r\n        rt = -sqds * smm1;\r\n        smm1 *= ztest;\r\n        e[qjj - 1] = smm1;\r\n        Controller_xrot_c(U, ((qjj - 1) << 3) + 1, ((qq - 1) << 3) + 1, ztest,\r\n                          sqds);\r\n      }\r\n      break;\r\n\r\n     case 3:\r\n      rt = b_s_tmp[i + 1];\r\n      ztest = fmax(fmax(fmax(fmax(fabs(rt), fabs(b_s_tmp[i])), fabs(e[i])), fabs\r\n                        (b_s_tmp[qq])), fabs(e[qq]));\r\n      tmp = _mm_set1_pd(ztest);\r\n      tmp_0 = _mm_div_pd(_mm_set_pd(b_s_tmp[i], rt), tmp);\r\n      _mm_storeu_pd(&tmp_1[0], tmp_0);\r\n      rt = tmp_1[0];\r\n      smm1 = tmp_1[1];\r\n      tmp = _mm_div_pd(_mm_set_pd(b_s_tmp[qq], e[i]), tmp);\r\n      _mm_storeu_pd(&tmp_1[0], tmp);\r\n      emm1 = tmp_1[0];\r\n      sqds = tmp_1[1];\r\n      smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;\r\n      emm1 *= rt;\r\n      emm1 *= emm1;\r\n      if ((smm1 != 0.0) || (emm1 != 0.0)) {\r\n        shift = sqrt(smm1 * smm1 + emm1);\r\n        if (smm1 < 0.0) {\r\n          shift = -shift;\r\n        }\r\n\r\n        shift = emm1 / (smm1 + shift);\r\n      } else {\r\n        shift = 0.0;\r\n      }\r\n\r\n      rt = (sqds + rt) * (sqds - rt) + shift;\r\n      ztest = e[qq] / ztest * sqds;\r\n      for (qjj = qq + 1; qjj <= i + 1; qjj++) {\r\n        Controller_xrotg(&rt, &ztest, &sqds, &smm1);\r\n        if (qjj > qq + 1) {\r\n          e[qjj - 2] = rt;\r\n        }\r\n\r\n        ztest = e[qjj - 1];\r\n        emm1 = b_s_tmp[qjj - 1];\r\n        rt = emm1 * sqds + ztest * smm1;\r\n        e[qjj - 1] = ztest * sqds - emm1 * smm1;\r\n        ztest = smm1 * b_s_tmp[qjj];\r\n        b_s_tmp[qjj] *= sqds;\r\n        Controller_xrot(V, 6 * (qjj - 1) + 1, 6 * qjj + 1, sqds, smm1);\r\n        b_s_tmp[qjj - 1] = rt;\r\n        Controller_xrotg(&b_s_tmp[qjj - 1], &ztest, &sqds, &smm1);\r\n        ztest = e[qjj - 1];\r\n        rt = ztest * sqds + smm1 * b_s_tmp[qjj];\r\n        b_s_tmp[qjj] = ztest * -smm1 + sqds * b_s_tmp[qjj];\r\n        ztest = smm1 * e[qjj];\r\n        e[qjj] *= sqds;\r\n        Controller_xrot_c(U, ((qjj - 1) << 3) + 1, (qjj << 3) + 1, sqds, smm1);\r\n      }\r\n\r\n      e[i] = rt;\r\n      qp1++;\r\n      break;\r\n\r\n     default:\r\n      if (b_s_tmp[qq] < 0.0) {\r\n        b_s_tmp[qq] = -b_s_tmp[qq];\r\n        qp1 = 6 * qq + 1;\r\n        scalarLB = 6 + qp1;\r\n        vectorUB = scalarLB - 2;\r\n        for (qjj = qp1; qjj <= vectorUB; qjj += 2) {\r\n          tmp = _mm_loadu_pd(&V[qjj - 1]);\r\n          tmp = _mm_mul_pd(tmp, _mm_set1_pd(-1.0));\r\n          _mm_storeu_pd(&V[qjj - 1], tmp);\r\n        }\r\n\r\n        for (qjj = scalarLB; qjj <= qp1 + 5; qjj++) {\r\n          V[qjj - 1] = -V[qjj - 1];\r\n        }\r\n      }\r\n\r\n      qp1 = qq + 1;\r\n      while ((qq + 1 < 6) && (b_s_tmp[qq] < b_s_tmp[qp1])) {\r\n        rt = b_s_tmp[qq];\r\n        b_s_tmp[qq] = b_s_tmp[qp1];\r\n        b_s_tmp[qp1] = rt;\r\n        Controller_xswap(V, 6 * qq + 1, 6 * (qq + 1) + 1);\r\n        Controller_xswap_j(U, (qq << 3) + 1, ((qq + 1) << 3) + 1);\r\n        qq = qp1;\r\n        qp1++;\r\n      }\r\n\r\n      qp1 = 0;\r\n      i--;\r\n      break;\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < 6; i++) {\r\n    s[i] = b_s_tmp[i];\r\n  }\r\n\r\n  if (doscale) {\r\n    Controller_xzlascl_h(cscale, anrm, s);\r\n  }\r\n}\r\n\r\n/* Model step function */\r\nvoid Controller_step(void)\r\n{\r\n  __m128d tmp;\r\n  __m128d tmp_0;\r\n  real_T U[48];\r\n  real_T inv_wrench[48];\r\n  real_T V[36];\r\n  real_T s[6];\r\n  real_T tmp_1[2];\r\n  real_T absx;\r\n  int32_T ar;\r\n  int32_T b;\r\n  int32_T b_ic;\r\n  int32_T ib;\r\n  int32_T j;\r\n  int32_T r;\r\n  int32_T scalarLB;\r\n  int32_T vcol;\r\n  int32_T vectorUB;\r\n  boolean_T exitg1;\r\n  boolean_T p;\r\n  if (rtmIsMajorTimeStep(Controller_M)) {\r\n    /* set solver stop time */\r\n    if (!(Controller_M->Timing.clockTick0+1)) {\r\n      rtsiSetSolverStopTime(&Controller_M->solverInfo,\r\n                            ((Controller_M->Timing.clockTickH0 + 1) *\r\n        Controller_M->Timing.stepSize0 * 4294967296.0));\r\n    } else {\r\n      rtsiSetSolverStopTime(&Controller_M->solverInfo,\r\n                            ((Controller_M->Timing.clockTick0 + 1) *\r\n        Controller_M->Timing.stepSize0 + Controller_M->Timing.clockTickH0 *\r\n        Controller_M->Timing.stepSize0 * 4294967296.0));\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep(Controller_M)) {\r\n    Controller_M->Timing.t[0] = rtsiGetT(&Controller_M->solverInfo);\r\n  }\r\n\r\n  /* Gain: '<S48>/Proportional Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.ProportionalGain = Controller_P.PID1_P * Controller_U.Error[0];\r\n\r\n  /* Integrator: '<S43>/Integrator' */\r\n  Controller_B.Integrator = Controller_X.Integrator_CSTATE;\r\n\r\n  /* Gain: '<S36>/Derivative Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.DerivativeGain = Controller_P.PID1_D * Controller_U.Error[0];\r\n\r\n  /* Integrator: '<S38>/Filter' */\r\n  Controller_B.Filter = Controller_X.Filter_CSTATE;\r\n\r\n  /* Sum: '<S38>/SumD' */\r\n  Controller_B.SumD = Controller_B.DerivativeGain - Controller_B.Filter;\r\n\r\n  /* Gain: '<S46>/Filter Coefficient' */\r\n  Controller_B.FilterCoefficient = Controller_P.PID1_N * Controller_B.SumD;\r\n\r\n  /* Sum: '<S52>/Sum' */\r\n  Controller_B.Sum = (Controller_B.ProportionalGain + Controller_B.Integrator) +\r\n    Controller_B.FilterCoefficient;\r\n\r\n  /* Gain: '<S100>/Proportional Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.ProportionalGain_c = Controller_P.PID2_P * Controller_U.Error[1];\r\n\r\n  /* Integrator: '<S95>/Integrator' */\r\n  Controller_B.Integrator_f = Controller_X.Integrator_CSTATE_m;\r\n\r\n  /* Gain: '<S88>/Derivative Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.DerivativeGain_j = Controller_P.PID2_D * Controller_U.Error[1];\r\n\r\n  /* Integrator: '<S90>/Filter' */\r\n  Controller_B.Filter_e = Controller_X.Filter_CSTATE_i;\r\n\r\n  /* Sum: '<S90>/SumD' */\r\n  Controller_B.SumD_f = Controller_B.DerivativeGain_j - Controller_B.Filter_e;\r\n\r\n  /* Gain: '<S98>/Filter Coefficient' */\r\n  Controller_B.FilterCoefficient_d = Controller_P.PID2_N * Controller_B.SumD_f;\r\n\r\n  /* Sum: '<S104>/Sum' */\r\n  Controller_B.Sum_d = (Controller_B.ProportionalGain_c +\r\n                        Controller_B.Integrator_f) +\r\n    Controller_B.FilterCoefficient_d;\r\n\r\n  /* Gain: '<S152>/Proportional Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.ProportionalGain_h = Controller_P.PID3_P * Controller_U.Error[2];\r\n\r\n  /* Integrator: '<S147>/Integrator' */\r\n  Controller_B.Integrator_c = Controller_X.Integrator_CSTATE_j;\r\n\r\n  /* Gain: '<S140>/Derivative Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.DerivativeGain_d = Controller_P.PID3_D * Controller_U.Error[2];\r\n\r\n  /* Integrator: '<S142>/Filter' */\r\n  Controller_B.Filter_m = Controller_X.Filter_CSTATE_e;\r\n\r\n  /* Sum: '<S142>/SumD' */\r\n  Controller_B.SumD_i = Controller_B.DerivativeGain_d - Controller_B.Filter_m;\r\n\r\n  /* Gain: '<S150>/Filter Coefficient' */\r\n  Controller_B.FilterCoefficient_g = Controller_P.PID3_N * Controller_B.SumD_i;\r\n\r\n  /* Sum: '<S156>/Sum' */\r\n  Controller_B.Sum_a = (Controller_B.ProportionalGain_h +\r\n                        Controller_B.Integrator_c) +\r\n    Controller_B.FilterCoefficient_g;\r\n\r\n  /* Gain: '<S204>/Proportional Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.ProportionalGain_b = Controller_P.PID4_P * Controller_U.Error[3];\r\n\r\n  /* Integrator: '<S199>/Integrator' */\r\n  Controller_B.Integrator_h = Controller_X.Integrator_CSTATE_k;\r\n\r\n  /* Gain: '<S192>/Derivative Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.DerivativeGain_p = Controller_P.PID4_D * Controller_U.Error[3];\r\n\r\n  /* Integrator: '<S194>/Filter' */\r\n  Controller_B.Filter_l = Controller_X.Filter_CSTATE_j;\r\n\r\n  /* Sum: '<S194>/SumD' */\r\n  Controller_B.SumD_m = Controller_B.DerivativeGain_p - Controller_B.Filter_l;\r\n\r\n  /* Gain: '<S202>/Filter Coefficient' */\r\n  Controller_B.FilterCoefficient_p = Controller_P.PID4_N * Controller_B.SumD_m;\r\n\r\n  /* Sum: '<S208>/Sum' */\r\n  Controller_B.Sum_b = (Controller_B.ProportionalGain_b +\r\n                        Controller_B.Integrator_h) +\r\n    Controller_B.FilterCoefficient_p;\r\n\r\n  /* Gain: '<S256>/Proportional Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.ProportionalGain_f = Controller_P.PID5_P * Controller_U.Error[4];\r\n\r\n  /* Integrator: '<S251>/Integrator' */\r\n  Controller_B.Integrator_e = Controller_X.Integrator_CSTATE_p;\r\n\r\n  /* Gain: '<S244>/Derivative Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.DerivativeGain_i = Controller_P.PID5_D * Controller_U.Error[4];\r\n\r\n  /* Integrator: '<S246>/Filter' */\r\n  Controller_B.Filter_d = Controller_X.Filter_CSTATE_o;\r\n\r\n  /* Sum: '<S246>/SumD' */\r\n  Controller_B.SumD_g = Controller_B.DerivativeGain_i - Controller_B.Filter_d;\r\n\r\n  /* Gain: '<S254>/Filter Coefficient' */\r\n  Controller_B.FilterCoefficient_m = Controller_P.PID5_N * Controller_B.SumD_g;\r\n\r\n  /* Sum: '<S260>/Sum' */\r\n  Controller_B.Sum_p = (Controller_B.ProportionalGain_f +\r\n                        Controller_B.Integrator_e) +\r\n    Controller_B.FilterCoefficient_m;\r\n\r\n  /* Gain: '<S308>/Proportional Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.ProportionalGain_d = Controller_P.PID6_P * Controller_U.Error[5];\r\n\r\n  /* Integrator: '<S303>/Integrator' */\r\n  Controller_B.Integrator_hu = Controller_X.Integrator_CSTATE_h;\r\n\r\n  /* Gain: '<S296>/Derivative Gain' incorporates:\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  Controller_B.DerivativeGain_m = Controller_P.PID6_D * Controller_U.Error[5];\r\n\r\n  /* Integrator: '<S298>/Filter' */\r\n  Controller_B.Filter_d2 = Controller_X.Filter_CSTATE_a;\r\n\r\n  /* Sum: '<S298>/SumD' */\r\n  Controller_B.SumD_n = Controller_B.DerivativeGain_m - Controller_B.Filter_d2;\r\n\r\n  /* Gain: '<S306>/Filter Coefficient' */\r\n  Controller_B.FilterCoefficient_j = Controller_P.PID6_N * Controller_B.SumD_n;\r\n\r\n  /* Sum: '<S312>/Sum' */\r\n  Controller_B.Sum_c = (Controller_B.ProportionalGain_d +\r\n                        Controller_B.Integrator_hu) +\r\n    Controller_B.FilterCoefficient_j;\r\n\r\n  /* SignalConversion generated from: '<S2>/ SFunction ' incorporates:\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   */\r\n  Controller_B.TmpSignalConversionAtSFunctionI[0] = Controller_B.Sum;\r\n  Controller_B.TmpSignalConversionAtSFunctionI[1] = Controller_B.Sum_d;\r\n  Controller_B.TmpSignalConversionAtSFunctionI[2] = Controller_B.Sum_a;\r\n  Controller_B.TmpSignalConversionAtSFunctionI[3] = Controller_B.Sum_b;\r\n  Controller_B.TmpSignalConversionAtSFunctionI[4] = Controller_B.Sum_p;\r\n  Controller_B.TmpSignalConversionAtSFunctionI[5] = Controller_B.Sum_c;\r\n\r\n  /* MATLAB Function: '<S1>/MATLAB Function' */\r\n  /* :  inv_wrench = pinv(wrench); */\r\n  p = true;\r\n  for (r = 0; r < 48; r++) {\r\n    inv_wrench[r] = 0.0;\r\n    if (p && ((!rtIsInf(Controller_P.wrench[r])) && (!rtIsNaN\r\n          (Controller_P.wrench[r])))) {\r\n    } else {\r\n      p = false;\r\n    }\r\n  }\r\n\r\n  if (!p) {\r\n    for (r = 0; r < 48; r++) {\r\n      inv_wrench[r] = (rtNaN);\r\n    }\r\n  } else {\r\n    Controller_svd(Controller_P.wrench, U, s, V);\r\n    absx = fabs(s[0]);\r\n    if (rtIsInf(absx) || rtIsNaN(absx)) {\r\n      absx = (rtNaN);\r\n    } else if (absx < 4.4501477170144028E-308) {\r\n      absx = 4.94065645841247E-324;\r\n    } else {\r\n      frexp(absx, &vcol);\r\n      absx = ldexp(1.0, vcol - 53);\r\n    }\r\n\r\n    absx *= 8.0;\r\n    r = 0;\r\n    exitg1 = false;\r\n    while ((!exitg1) && (r < 6)) {\r\n      if (rtIsInf(s[r]) || rtIsNaN(s[r])) {\r\n        absx = 1.7976931348623157E+308;\r\n        exitg1 = true;\r\n      } else {\r\n        r++;\r\n      }\r\n    }\r\n\r\n    r = -1;\r\n    vcol = 0;\r\n    while ((vcol < 6) && (s[vcol] > absx)) {\r\n      r++;\r\n      vcol++;\r\n    }\r\n\r\n    if (r + 1 > 0) {\r\n      vcol = 1;\r\n      for (j = 0; j <= r; j++) {\r\n        absx = 1.0 / s[j];\r\n        scalarLB = 6 + vcol;\r\n        vectorUB = scalarLB - 2;\r\n        for (ar = vcol; ar <= vectorUB; ar += 2) {\r\n          tmp_0 = _mm_loadu_pd(&V[ar - 1]);\r\n          tmp_0 = _mm_mul_pd(tmp_0, _mm_set1_pd(absx));\r\n          _mm_storeu_pd(&V[ar - 1], tmp_0);\r\n        }\r\n\r\n        for (ar = scalarLB; ar <= vcol + 5; ar++) {\r\n          V[ar - 1] *= absx;\r\n        }\r\n\r\n        vcol += 6;\r\n      }\r\n\r\n      for (vcol = 0; vcol <= 42; vcol += 6) {\r\n        for (j = vcol + 1; j <= vcol + 6; j++) {\r\n          inv_wrench[j - 1] = 0.0;\r\n        }\r\n      }\r\n\r\n      vcol = 0;\r\n      for (j = 0; j <= 42; j += 6) {\r\n        ar = -1;\r\n        vcol++;\r\n        b = (r << 3) + vcol;\r\n        for (ib = vcol; ib <= b; ib += 8) {\r\n          scalarLB = j + 7;\r\n          vectorUB = scalarLB - 2;\r\n          for (b_ic = j + 1; b_ic <= vectorUB; b_ic += 2) {\r\n            tmp_0 = _mm_loadu_pd(&V[(ar + b_ic) - j]);\r\n            tmp_0 = _mm_mul_pd(tmp_0, _mm_set1_pd(U[ib - 1]));\r\n            tmp = _mm_loadu_pd(&inv_wrench[b_ic - 1]);\r\n            tmp_0 = _mm_add_pd(tmp_0, tmp);\r\n            _mm_storeu_pd(&inv_wrench[b_ic - 1], tmp_0);\r\n          }\r\n\r\n          for (b_ic = scalarLB; b_ic <= j + 6; b_ic++) {\r\n            inv_wrench[b_ic - 1] += V[(ar + b_ic) - j] * U[ib - 1];\r\n          }\r\n\r\n          ar += 6;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* :  u = inv_wrench' * e; */\r\n  for (vcol = 0; vcol < 8; vcol++) {\r\n    absx = 0.0;\r\n    for (r = 0; r < 6; r++) {\r\n      absx += inv_wrench[6 * vcol + r] *\r\n        Controller_B.TmpSignalConversionAtSFunctionI[r];\r\n    }\r\n\r\n    Controller_B.u[vcol] = absx;\r\n\r\n    /* Gain: '<S1>/Gain' */\r\n    absx *= Controller_P.Gain_Gain;\r\n    Controller_B.Gain[vcol] = absx;\r\n\r\n    /* Sum: '<S1>/Sum1' incorporates:\r\n     *  Constant: '<S1>/PWM Stop'\r\n     */\r\n    absx += Controller_P.pwm_stop;\r\n    Controller_B.Sum1[vcol] = absx;\r\n\r\n    /* Saturate: '<S1>/Saturation' */\r\n    if (absx > Controller_P.Saturation_UpperSat) {\r\n      /* Saturate: '<S1>/Saturation' */\r\n      absx = Controller_P.Saturation_UpperSat;\r\n    } else if (absx < Controller_P.Saturation_LowerSat) {\r\n      /* Saturate: '<S1>/Saturation' */\r\n      absx = Controller_P.Saturation_LowerSat;\r\n    }\r\n\r\n    /* End of Saturate: '<S1>/Saturation' */\r\n\r\n    /* Saturate: '<S1>/Saturation' */\r\n    Controller_B.Saturation[vcol] = absx;\r\n\r\n    /* Math: '<S1>/Transpose' */\r\n    Controller_B.Transpose[vcol] = absx;\r\n\r\n    /* Outport: '<Root>/PWM' incorporates:\r\n     *  Math: '<S1>/Transpose'\r\n     */\r\n    Controller_Y.PWM[vcol] = absx;\r\n  }\r\n\r\n  /* Gain: '<S92>/Integral Gain' incorporates:\r\n   *  Gain: '<S40>/Integral Gain'\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  tmp_0 = _mm_mul_pd(_mm_set_pd(Controller_P.PID2_I, Controller_P.PID1_I),\r\n                     _mm_loadu_pd(&Controller_U.Error[0]));\r\n  _mm_storeu_pd(&tmp_1[0], tmp_0);\r\n\r\n  /* Gain: '<S40>/Integral Gain' */\r\n  Controller_B.IntegralGain = tmp_1[0];\r\n\r\n  /* Gain: '<S92>/Integral Gain' */\r\n  Controller_B.IntegralGain_k = tmp_1[1];\r\n\r\n  /* Gain: '<S196>/Integral Gain' incorporates:\r\n   *  Gain: '<S144>/Integral Gain'\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  tmp_0 = _mm_mul_pd(_mm_set_pd(Controller_P.PID4_I, Controller_P.PID3_I),\r\n                     _mm_loadu_pd(&Controller_U.Error[2]));\r\n  _mm_storeu_pd(&tmp_1[0], tmp_0);\r\n\r\n  /* Gain: '<S144>/Integral Gain' */\r\n  Controller_B.IntegralGain_g = tmp_1[0];\r\n\r\n  /* Gain: '<S196>/Integral Gain' */\r\n  Controller_B.IntegralGain_ku = tmp_1[1];\r\n\r\n  /* Gain: '<S300>/Integral Gain' incorporates:\r\n   *  Gain: '<S248>/Integral Gain'\r\n   *  Inport: '<Root>/Error'\r\n   */\r\n  tmp_0 = _mm_mul_pd(_mm_set_pd(Controller_P.PID6_I, Controller_P.PID5_I),\r\n                     _mm_loadu_pd(&Controller_U.Error[4]));\r\n  _mm_storeu_pd(&tmp_1[0], tmp_0);\r\n\r\n  /* Gain: '<S248>/Integral Gain' */\r\n  Controller_B.IntegralGain_a = tmp_1[0];\r\n\r\n  /* Gain: '<S300>/Integral Gain' */\r\n  Controller_B.IntegralGain_l = tmp_1[1];\r\n  if (rtmIsMajorTimeStep(Controller_M)) {\r\n    /* Matfile logging */\r\n    rt_UpdateTXYLogVars(Controller_M->rtwLogInfo, (Controller_M->Timing.t));\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  if (rtmIsMajorTimeStep(Controller_M)) {\r\n    /* signal main to stop simulation */\r\n    {                                  /* Sample time: [0.0s, 0.0s] */\r\n      if ((rtmGetTFinal(Controller_M)!=-1) &&\r\n          !((rtmGetTFinal(Controller_M)-(((Controller_M->Timing.clockTick1+\r\n               Controller_M->Timing.clockTickH1* 4294967296.0)) * 1.2)) >\r\n            (((Controller_M->Timing.clockTick1+Controller_M->Timing.clockTickH1*\r\n               4294967296.0)) * 1.2) * (DBL_EPSILON))) {\r\n        rtmSetErrorStatus(Controller_M, \"Simulation finished\");\r\n      }\r\n    }\r\n\r\n    rt_ertODEUpdateContinuousStates(&Controller_M->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     * Timer of this task consists of two 32 bit unsigned integers.\r\n     * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n     * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n     */\r\n    if (!(++Controller_M->Timing.clockTick0)) {\r\n      ++Controller_M->Timing.clockTickH0;\r\n    }\r\n\r\n    Controller_M->Timing.t[0] = rtsiGetSolverStopTime(&Controller_M->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [1.2s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 1.2, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       * Timer of this task consists of two 32 bit unsigned integers.\r\n       * The two integers represent the low bits Timing.clockTick1 and the high bits\r\n       * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\r\n       */\r\n      Controller_M->Timing.clockTick1++;\r\n      if (!Controller_M->Timing.clockTick1) {\r\n        Controller_M->Timing.clockTickH1++;\r\n      }\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid Controller_derivatives(void)\r\n{\r\n  XDot_Controller_T *_rtXdot;\r\n  _rtXdot = ((XDot_Controller_T *) Controller_M->derivs);\r\n\r\n  /* Derivatives for Integrator: '<S43>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE = Controller_B.IntegralGain;\r\n\r\n  /* Derivatives for Integrator: '<S38>/Filter' */\r\n  _rtXdot->Filter_CSTATE = Controller_B.FilterCoefficient;\r\n\r\n  /* Derivatives for Integrator: '<S95>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_m = Controller_B.IntegralGain_k;\r\n\r\n  /* Derivatives for Integrator: '<S90>/Filter' */\r\n  _rtXdot->Filter_CSTATE_i = Controller_B.FilterCoefficient_d;\r\n\r\n  /* Derivatives for Integrator: '<S147>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_j = Controller_B.IntegralGain_g;\r\n\r\n  /* Derivatives for Integrator: '<S142>/Filter' */\r\n  _rtXdot->Filter_CSTATE_e = Controller_B.FilterCoefficient_g;\r\n\r\n  /* Derivatives for Integrator: '<S199>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_k = Controller_B.IntegralGain_ku;\r\n\r\n  /* Derivatives for Integrator: '<S194>/Filter' */\r\n  _rtXdot->Filter_CSTATE_j = Controller_B.FilterCoefficient_p;\r\n\r\n  /* Derivatives for Integrator: '<S251>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_p = Controller_B.IntegralGain_a;\r\n\r\n  /* Derivatives for Integrator: '<S246>/Filter' */\r\n  _rtXdot->Filter_CSTATE_o = Controller_B.FilterCoefficient_m;\r\n\r\n  /* Derivatives for Integrator: '<S303>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_h = Controller_B.IntegralGain_l;\r\n\r\n  /* Derivatives for Integrator: '<S298>/Filter' */\r\n  _rtXdot->Filter_CSTATE_a = Controller_B.FilterCoefficient_j;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Controller_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)Controller_M, 0,\r\n                sizeof(RT_MODEL_Controller_T));\r\n\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&Controller_M->solverInfo,\r\n                          &Controller_M->Timing.simTimeStep);\r\n    rtsiSetTPtr(&Controller_M->solverInfo, &rtmGetTPtr(Controller_M));\r\n    rtsiSetStepSizePtr(&Controller_M->solverInfo,\r\n                       &Controller_M->Timing.stepSize0);\r\n    rtsiSetdXPtr(&Controller_M->solverInfo, &Controller_M->derivs);\r\n    rtsiSetContStatesPtr(&Controller_M->solverInfo, (real_T **)\r\n                         &Controller_M->contStates);\r\n    rtsiSetNumContStatesPtr(&Controller_M->solverInfo,\r\n      &Controller_M->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&Controller_M->solverInfo,\r\n      &Controller_M->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&Controller_M->solverInfo,\r\n      &Controller_M->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&Controller_M->solverInfo,\r\n      &Controller_M->periodicContStateRanges);\r\n    rtsiSetContStateDisabledPtr(&Controller_M->solverInfo, (boolean_T**)\r\n      &Controller_M->contStateDisabled);\r\n    rtsiSetErrorStatusPtr(&Controller_M->solverInfo, (&rtmGetErrorStatus\r\n      (Controller_M)));\r\n    rtsiSetRTModelPtr(&Controller_M->solverInfo, Controller_M);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&Controller_M->solverInfo, MAJOR_TIME_STEP);\r\n  rtsiSetIsMinorTimeStepWithModeChange(&Controller_M->solverInfo, false);\r\n  rtsiSetIsContModeFrozen(&Controller_M->solverInfo, false);\r\n  Controller_M->intgData.y = Controller_M->odeY;\r\n  Controller_M->intgData.f[0] = Controller_M->odeF[0];\r\n  Controller_M->intgData.f[1] = Controller_M->odeF[1];\r\n  Controller_M->intgData.f[2] = Controller_M->odeF[2];\r\n  Controller_M->contStates = ((X_Controller_T *) &Controller_X);\r\n  Controller_M->contStateDisabled = ((XDis_Controller_T *) &Controller_XDis);\r\n  Controller_M->Timing.tStart = (0.0);\r\n  rtsiSetSolverData(&Controller_M->solverInfo, (void *)&Controller_M->intgData);\r\n  rtsiSetSolverName(&Controller_M->solverInfo,\"ode3\");\r\n  rtmSetTPtr(Controller_M, &Controller_M->Timing.tArray[0]);\r\n  rtmSetTFinal(Controller_M, 60.0);\r\n  Controller_M->Timing.stepSize0 = 1.2;\r\n\r\n  /* Setup for data logging */\r\n  {\r\n    static RTWLogInfo rt_DataLoggingInfo;\r\n    rt_DataLoggingInfo.loggingInterval = (NULL);\r\n    Controller_M->rtwLogInfo = &rt_DataLoggingInfo;\r\n  }\r\n\r\n  /* Setup for data logging */\r\n  {\r\n    rtliSetLogXSignalInfo(Controller_M->rtwLogInfo, (NULL));\r\n    rtliSetLogXSignalPtrs(Controller_M->rtwLogInfo, (NULL));\r\n    rtliSetLogT(Controller_M->rtwLogInfo, \"tout\");\r\n    rtliSetLogX(Controller_M->rtwLogInfo, \"\");\r\n    rtliSetLogXFinal(Controller_M->rtwLogInfo, \"\");\r\n    rtliSetLogVarNameModifier(Controller_M->rtwLogInfo, \"rt_\");\r\n    rtliSetLogFormat(Controller_M->rtwLogInfo, 4);\r\n    rtliSetLogMaxRows(Controller_M->rtwLogInfo, 0);\r\n    rtliSetLogDecimation(Controller_M->rtwLogInfo, 1);\r\n    rtliSetLogY(Controller_M->rtwLogInfo, \"\");\r\n    rtliSetLogYSignalInfo(Controller_M->rtwLogInfo, (NULL));\r\n    rtliSetLogYSignalPtrs(Controller_M->rtwLogInfo, (NULL));\r\n  }\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &Controller_B), 0,\r\n                sizeof(B_Controller_T));\r\n\r\n  /* states (continuous) */\r\n  {\r\n    (void) memset((void *)&Controller_X, 0,\r\n                  sizeof(X_Controller_T));\r\n  }\r\n\r\n  /* disabled states */\r\n  {\r\n    (void) memset((void *)&Controller_XDis, 0,\r\n                  sizeof(XDis_Controller_T));\r\n  }\r\n\r\n  /* external inputs */\r\n  (void)memset(&Controller_U, 0, sizeof(ExtU_Controller_T));\r\n\r\n  /* external outputs */\r\n  (void)memset(&Controller_Y, 0, sizeof(ExtY_Controller_T));\r\n\r\n  /* Matfile logging */\r\n  rt_StartDataLoggingWithStartTime(Controller_M->rtwLogInfo, 0.0, rtmGetTFinal\r\n    (Controller_M), Controller_M->Timing.stepSize0, (&rtmGetErrorStatus\r\n    (Controller_M)));\r\n\r\n  /* InitializeConditions for Integrator: '<S43>/Integrator' */\r\n  Controller_X.Integrator_CSTATE = Controller_P.PID1_InitialConditionForIntegra;\r\n\r\n  /* InitializeConditions for Integrator: '<S38>/Filter' */\r\n  Controller_X.Filter_CSTATE = Controller_P.PID1_InitialConditionForFilter;\r\n\r\n  /* InitializeConditions for Integrator: '<S95>/Integrator' */\r\n  Controller_X.Integrator_CSTATE_m =\r\n    Controller_P.PID2_InitialConditionForIntegra;\r\n\r\n  /* InitializeConditions for Integrator: '<S90>/Filter' */\r\n  Controller_X.Filter_CSTATE_i = Controller_P.PID2_InitialConditionForFilter;\r\n\r\n  /* InitializeConditions for Integrator: '<S147>/Integrator' */\r\n  Controller_X.Integrator_CSTATE_j =\r\n    Controller_P.PID3_InitialConditionForIntegra;\r\n\r\n  /* InitializeConditions for Integrator: '<S142>/Filter' */\r\n  Controller_X.Filter_CSTATE_e = Controller_P.PID3_InitialConditionForFilter;\r\n\r\n  /* InitializeConditions for Integrator: '<S199>/Integrator' */\r\n  Controller_X.Integrator_CSTATE_k =\r\n    Controller_P.PID4_InitialConditionForIntegra;\r\n\r\n  /* InitializeConditions for Integrator: '<S194>/Filter' */\r\n  Controller_X.Filter_CSTATE_j = Controller_P.PID4_InitialConditionForFilter;\r\n\r\n  /* InitializeConditions for Integrator: '<S251>/Integrator' */\r\n  Controller_X.Integrator_CSTATE_p =\r\n    Controller_P.PID5_InitialConditionForIntegra;\r\n\r\n  /* InitializeConditions for Integrator: '<S246>/Filter' */\r\n  Controller_X.Filter_CSTATE_o = Controller_P.PID5_InitialConditionForFilter;\r\n\r\n  /* InitializeConditions for Integrator: '<S303>/Integrator' */\r\n  Controller_X.Integrator_CSTATE_h =\r\n    Controller_P.PID6_InitialConditionForIntegra;\r\n\r\n  /* InitializeConditions for Integrator: '<S298>/Filter' */\r\n  Controller_X.Filter_CSTATE_a = Controller_P.PID6_InitialConditionForFilter;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid Controller_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n"},{"name":"Controller.h","type":"header","group":"model","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Controller.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Controller_h_\r\n#define Controller_h_\r\n#ifndef Controller_COMMON_INCLUDES_\r\n#define Controller_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#include \"rt_logging.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#endif                                 /* Controller_COMMON_INCLUDES_ */\r\n\r\n#include \"Controller_types.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <float.h>\r\n#include <string.h>\r\n#include <stddef.h>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetContStateDisabled\r\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\r\n#endif\r\n\r\n#ifndef rtmSetContStateDisabled\r\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContStates\r\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\r\n#endif\r\n\r\n#ifndef rtmSetContStates\r\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\r\n#endif\r\n\r\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\r\n#endif\r\n\r\n#ifndef rtmGetDerivCacheNeedsReset\r\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetDerivCacheNeedsReset\r\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetFinalTime\r\n#define rtmGetFinalTime(rtm)           ((rtm)->Timing.tFinal)\r\n#endif\r\n\r\n#ifndef rtmGetIntgData\r\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\r\n#endif\r\n\r\n#ifndef rtmSetIntgData\r\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeF\r\n#define rtmGetOdeF(rtm)                ((rtm)->odeF)\r\n#endif\r\n\r\n#ifndef rtmSetOdeF\r\n#define rtmSetOdeF(rtm, val)           ((rtm)->odeF = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeY\r\n#define rtmGetOdeY(rtm)                ((rtm)->odeY)\r\n#endif\r\n\r\n#ifndef rtmSetOdeY\r\n#define rtmSetOdeY(rtm, val)           ((rtm)->odeY = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateIndices\r\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateIndices\r\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateRanges\r\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateRanges\r\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\r\n#endif\r\n\r\n#ifndef rtmGetRTWLogInfo\r\n#define rtmGetRTWLogInfo(rtm)          ((rtm)->rtwLogInfo)\r\n#endif\r\n\r\n#ifndef rtmGetZCCacheNeedsReset\r\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetZCCacheNeedsReset\r\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetdX\r\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\r\n#endif\r\n\r\n#ifndef rtmSetdX\r\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTFinal\r\n#define rtmGetTFinal(rtm)              ((rtm)->Timing.tFinal)\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n#ifndef rtmGetTStart\r\n#define rtmGetTStart(rtm)              ((rtm)->Timing.tStart)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T ProportionalGain;             /* '<S48>/Proportional Gain' */\r\n  real_T Integrator;                   /* '<S43>/Integrator' */\r\n  real_T DerivativeGain;               /* '<S36>/Derivative Gain' */\r\n  real_T Filter;                       /* '<S38>/Filter' */\r\n  real_T SumD;                         /* '<S38>/SumD' */\r\n  real_T FilterCoefficient;            /* '<S46>/Filter Coefficient' */\r\n  real_T Sum;                          /* '<S52>/Sum' */\r\n  real_T ProportionalGain_c;           /* '<S100>/Proportional Gain' */\r\n  real_T Integrator_f;                 /* '<S95>/Integrator' */\r\n  real_T DerivativeGain_j;             /* '<S88>/Derivative Gain' */\r\n  real_T Filter_e;                     /* '<S90>/Filter' */\r\n  real_T SumD_f;                       /* '<S90>/SumD' */\r\n  real_T FilterCoefficient_d;          /* '<S98>/Filter Coefficient' */\r\n  real_T Sum_d;                        /* '<S104>/Sum' */\r\n  real_T ProportionalGain_h;           /* '<S152>/Proportional Gain' */\r\n  real_T Integrator_c;                 /* '<S147>/Integrator' */\r\n  real_T DerivativeGain_d;             /* '<S140>/Derivative Gain' */\r\n  real_T Filter_m;                     /* '<S142>/Filter' */\r\n  real_T SumD_i;                       /* '<S142>/SumD' */\r\n  real_T FilterCoefficient_g;          /* '<S150>/Filter Coefficient' */\r\n  real_T Sum_a;                        /* '<S156>/Sum' */\r\n  real_T ProportionalGain_b;           /* '<S204>/Proportional Gain' */\r\n  real_T Integrator_h;                 /* '<S199>/Integrator' */\r\n  real_T DerivativeGain_p;             /* '<S192>/Derivative Gain' */\r\n  real_T Filter_l;                     /* '<S194>/Filter' */\r\n  real_T SumD_m;                       /* '<S194>/SumD' */\r\n  real_T FilterCoefficient_p;          /* '<S202>/Filter Coefficient' */\r\n  real_T Sum_b;                        /* '<S208>/Sum' */\r\n  real_T ProportionalGain_f;           /* '<S256>/Proportional Gain' */\r\n  real_T Integrator_e;                 /* '<S251>/Integrator' */\r\n  real_T DerivativeGain_i;             /* '<S244>/Derivative Gain' */\r\n  real_T Filter_d;                     /* '<S246>/Filter' */\r\n  real_T SumD_g;                       /* '<S246>/SumD' */\r\n  real_T FilterCoefficient_m;          /* '<S254>/Filter Coefficient' */\r\n  real_T Sum_p;                        /* '<S260>/Sum' */\r\n  real_T ProportionalGain_d;           /* '<S308>/Proportional Gain' */\r\n  real_T Integrator_hu;                /* '<S303>/Integrator' */\r\n  real_T DerivativeGain_m;             /* '<S296>/Derivative Gain' */\r\n  real_T Filter_d2;                    /* '<S298>/Filter' */\r\n  real_T SumD_n;                       /* '<S298>/SumD' */\r\n  real_T FilterCoefficient_j;          /* '<S306>/Filter Coefficient' */\r\n  real_T Sum_c;                        /* '<S312>/Sum' */\r\n  real_T Gain[8];                      /* '<S1>/Gain' */\r\n  real_T Sum1[8];                      /* '<S1>/Sum1' */\r\n  real_T Saturation[8];                /* '<S1>/Saturation' */\r\n  real_T Transpose[8];                 /* '<S1>/Transpose' */\r\n  real_T IntegralGain;                 /* '<S40>/Integral Gain' */\r\n  real_T IntegralGain_k;               /* '<S92>/Integral Gain' */\r\n  real_T IntegralGain_g;               /* '<S144>/Integral Gain' */\r\n  real_T IntegralGain_ku;              /* '<S196>/Integral Gain' */\r\n  real_T IntegralGain_a;               /* '<S248>/Integral Gain' */\r\n  real_T IntegralGain_l;               /* '<S300>/Integral Gain' */\r\n  real_T TmpSignalConversionAtSFunctionI[6];/* '<S1>/MATLAB Function' */\r\n  real_T u[8];                         /* '<S1>/MATLAB Function' */\r\n} B_Controller_T;\r\n\r\n/* Continuous states (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE;            /* '<S43>/Integrator' */\r\n  real_T Filter_CSTATE;                /* '<S38>/Filter' */\r\n  real_T Integrator_CSTATE_m;          /* '<S95>/Integrator' */\r\n  real_T Filter_CSTATE_i;              /* '<S90>/Filter' */\r\n  real_T Integrator_CSTATE_j;          /* '<S147>/Integrator' */\r\n  real_T Filter_CSTATE_e;              /* '<S142>/Filter' */\r\n  real_T Integrator_CSTATE_k;          /* '<S199>/Integrator' */\r\n  real_T Filter_CSTATE_j;              /* '<S194>/Filter' */\r\n  real_T Integrator_CSTATE_p;          /* '<S251>/Integrator' */\r\n  real_T Filter_CSTATE_o;              /* '<S246>/Filter' */\r\n  real_T Integrator_CSTATE_h;          /* '<S303>/Integrator' */\r\n  real_T Filter_CSTATE_a;              /* '<S298>/Filter' */\r\n} X_Controller_T;\r\n\r\n/* State derivatives (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE;            /* '<S43>/Integrator' */\r\n  real_T Filter_CSTATE;                /* '<S38>/Filter' */\r\n  real_T Integrator_CSTATE_m;          /* '<S95>/Integrator' */\r\n  real_T Filter_CSTATE_i;              /* '<S90>/Filter' */\r\n  real_T Integrator_CSTATE_j;          /* '<S147>/Integrator' */\r\n  real_T Filter_CSTATE_e;              /* '<S142>/Filter' */\r\n  real_T Integrator_CSTATE_k;          /* '<S199>/Integrator' */\r\n  real_T Filter_CSTATE_j;              /* '<S194>/Filter' */\r\n  real_T Integrator_CSTATE_p;          /* '<S251>/Integrator' */\r\n  real_T Filter_CSTATE_o;              /* '<S246>/Filter' */\r\n  real_T Integrator_CSTATE_h;          /* '<S303>/Integrator' */\r\n  real_T Filter_CSTATE_a;              /* '<S298>/Filter' */\r\n} XDot_Controller_T;\r\n\r\n/* State disabled  */\r\ntypedef struct {\r\n  boolean_T Integrator_CSTATE;         /* '<S43>/Integrator' */\r\n  boolean_T Filter_CSTATE;             /* '<S38>/Filter' */\r\n  boolean_T Integrator_CSTATE_m;       /* '<S95>/Integrator' */\r\n  boolean_T Filter_CSTATE_i;           /* '<S90>/Filter' */\r\n  boolean_T Integrator_CSTATE_j;       /* '<S147>/Integrator' */\r\n  boolean_T Filter_CSTATE_e;           /* '<S142>/Filter' */\r\n  boolean_T Integrator_CSTATE_k;       /* '<S199>/Integrator' */\r\n  boolean_T Filter_CSTATE_j;           /* '<S194>/Filter' */\r\n  boolean_T Integrator_CSTATE_p;       /* '<S251>/Integrator' */\r\n  boolean_T Filter_CSTATE_o;           /* '<S246>/Filter' */\r\n  boolean_T Integrator_CSTATE_h;       /* '<S303>/Integrator' */\r\n  boolean_T Filter_CSTATE_a;           /* '<S298>/Filter' */\r\n} XDis_Controller_T;\r\n\r\n#ifndef ODE3_INTG\r\n#define ODE3_INTG\r\n\r\n/* ODE3 Integration Data */\r\ntypedef struct {\r\n  real_T *y;                           /* output */\r\n  real_T *f[3];                        /* derivatives */\r\n} ODE3_IntgData;\r\n\r\n#endif\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T Error[6];                     /* '<Root>/Error' */\r\n} ExtU_Controller_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T PWM[8];                       /* '<Root>/PWM' */\r\n} ExtY_Controller_T;\r\n\r\n/* Parameters (default storage) */\r\nstruct P_Controller_T_ {\r\n  real_T pwm_stop;                     /* Variable: pwm_stop\r\n                                        * Referenced by: '<S1>/PWM Stop'\r\n                                        */\r\n  real_T wrench[48];                   /* Variable: wrench\r\n                                        * Referenced by: '<S1>/MATLAB Function'\r\n                                        */\r\n  real_T PID1_D;                       /* Mask Parameter: PID1_D\r\n                                        * Referenced by: '<S36>/Derivative Gain'\r\n                                        */\r\n  real_T PID2_D;                       /* Mask Parameter: PID2_D\r\n                                        * Referenced by: '<S88>/Derivative Gain'\r\n                                        */\r\n  real_T PID3_D;                       /* Mask Parameter: PID3_D\r\n                                        * Referenced by: '<S140>/Derivative Gain'\r\n                                        */\r\n  real_T PID4_D;                       /* Mask Parameter: PID4_D\r\n                                        * Referenced by: '<S192>/Derivative Gain'\r\n                                        */\r\n  real_T PID5_D;                       /* Mask Parameter: PID5_D\r\n                                        * Referenced by: '<S244>/Derivative Gain'\r\n                                        */\r\n  real_T PID6_D;                       /* Mask Parameter: PID6_D\r\n                                        * Referenced by: '<S296>/Derivative Gain'\r\n                                        */\r\n  real_T PID1_I;                       /* Mask Parameter: PID1_I\r\n                                        * Referenced by: '<S40>/Integral Gain'\r\n                                        */\r\n  real_T PID2_I;                       /* Mask Parameter: PID2_I\r\n                                        * Referenced by: '<S92>/Integral Gain'\r\n                                        */\r\n  real_T PID3_I;                       /* Mask Parameter: PID3_I\r\n                                        * Referenced by: '<S144>/Integral Gain'\r\n                                        */\r\n  real_T PID4_I;                       /* Mask Parameter: PID4_I\r\n                                        * Referenced by: '<S196>/Integral Gain'\r\n                                        */\r\n  real_T PID5_I;                       /* Mask Parameter: PID5_I\r\n                                        * Referenced by: '<S248>/Integral Gain'\r\n                                        */\r\n  real_T PID6_I;                       /* Mask Parameter: PID6_I\r\n                                        * Referenced by: '<S300>/Integral Gain'\r\n                                        */\r\n  real_T PID1_InitialConditionForFilter;\r\n                               /* Mask Parameter: PID1_InitialConditionForFilter\r\n                                * Referenced by: '<S38>/Filter'\r\n                                */\r\n  real_T PID2_InitialConditionForFilter;\r\n                               /* Mask Parameter: PID2_InitialConditionForFilter\r\n                                * Referenced by: '<S90>/Filter'\r\n                                */\r\n  real_T PID3_InitialConditionForFilter;\r\n                               /* Mask Parameter: PID3_InitialConditionForFilter\r\n                                * Referenced by: '<S142>/Filter'\r\n                                */\r\n  real_T PID4_InitialConditionForFilter;\r\n                               /* Mask Parameter: PID4_InitialConditionForFilter\r\n                                * Referenced by: '<S194>/Filter'\r\n                                */\r\n  real_T PID5_InitialConditionForFilter;\r\n                               /* Mask Parameter: PID5_InitialConditionForFilter\r\n                                * Referenced by: '<S246>/Filter'\r\n                                */\r\n  real_T PID6_InitialConditionForFilter;\r\n                               /* Mask Parameter: PID6_InitialConditionForFilter\r\n                                * Referenced by: '<S298>/Filter'\r\n                                */\r\n  real_T PID1_InitialConditionForIntegra;\r\n                              /* Mask Parameter: PID1_InitialConditionForIntegra\r\n                               * Referenced by: '<S43>/Integrator'\r\n                               */\r\n  real_T PID2_InitialConditionForIntegra;\r\n                              /* Mask Parameter: PID2_InitialConditionForIntegra\r\n                               * Referenced by: '<S95>/Integrator'\r\n                               */\r\n  real_T PID3_InitialConditionForIntegra;\r\n                              /* Mask Parameter: PID3_InitialConditionForIntegra\r\n                               * Referenced by: '<S147>/Integrator'\r\n                               */\r\n  real_T PID4_InitialConditionForIntegra;\r\n                              /* Mask Parameter: PID4_InitialConditionForIntegra\r\n                               * Referenced by: '<S199>/Integrator'\r\n                               */\r\n  real_T PID5_InitialConditionForIntegra;\r\n                              /* Mask Parameter: PID5_InitialConditionForIntegra\r\n                               * Referenced by: '<S251>/Integrator'\r\n                               */\r\n  real_T PID6_InitialConditionForIntegra;\r\n                              /* Mask Parameter: PID6_InitialConditionForIntegra\r\n                               * Referenced by: '<S303>/Integrator'\r\n                               */\r\n  real_T PID1_N;                       /* Mask Parameter: PID1_N\r\n                                        * Referenced by: '<S46>/Filter Coefficient'\r\n                                        */\r\n  real_T PID2_N;                       /* Mask Parameter: PID2_N\r\n                                        * Referenced by: '<S98>/Filter Coefficient'\r\n                                        */\r\n  real_T PID3_N;                       /* Mask Parameter: PID3_N\r\n                                        * Referenced by: '<S150>/Filter Coefficient'\r\n                                        */\r\n  real_T PID4_N;                       /* Mask Parameter: PID4_N\r\n                                        * Referenced by: '<S202>/Filter Coefficient'\r\n                                        */\r\n  real_T PID5_N;                       /* Mask Parameter: PID5_N\r\n                                        * Referenced by: '<S254>/Filter Coefficient'\r\n                                        */\r\n  real_T PID6_N;                       /* Mask Parameter: PID6_N\r\n                                        * Referenced by: '<S306>/Filter Coefficient'\r\n                                        */\r\n  real_T PID1_P;                       /* Mask Parameter: PID1_P\r\n                                        * Referenced by: '<S48>/Proportional Gain'\r\n                                        */\r\n  real_T PID2_P;                       /* Mask Parameter: PID2_P\r\n                                        * Referenced by: '<S100>/Proportional Gain'\r\n                                        */\r\n  real_T PID3_P;                       /* Mask Parameter: PID3_P\r\n                                        * Referenced by: '<S152>/Proportional Gain'\r\n                                        */\r\n  real_T PID4_P;                       /* Mask Parameter: PID4_P\r\n                                        * Referenced by: '<S204>/Proportional Gain'\r\n                                        */\r\n  real_T PID5_P;                       /* Mask Parameter: PID5_P\r\n                                        * Referenced by: '<S256>/Proportional Gain'\r\n                                        */\r\n  real_T PID6_P;                       /* Mask Parameter: PID6_P\r\n                                        * Referenced by: '<S308>/Proportional Gain'\r\n                                        */\r\n  real_T Gain_Gain;                    /* Expression: 10\r\n                                        * Referenced by: '<S1>/Gain'\r\n                                        */\r\n  real_T Saturation_UpperSat;          /* Expression: 1900\r\n                                        * Referenced by: '<S1>/Saturation'\r\n                                        */\r\n  real_T Saturation_LowerSat;          /* Expression: 1100\r\n                                        * Referenced by: '<S1>/Saturation'\r\n                                        */\r\n};\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_Controller_T {\r\n  const char_T *errorStatus;\r\n  RTWLogInfo *rtwLogInfo;\r\n  RTWSolverInfo solverInfo;\r\n  X_Controller_T *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  XDis_Controller_T *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  real_T odeY[12];\r\n  real_T odeF[3][12];\r\n  ODE3_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    uint32_T clockTickH1;\r\n    time_T tStart;\r\n    time_T tFinal;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Block parameters (default storage) */\r\nextern P_Controller_T Controller_P;\r\n\r\n/* Block signals (default storage) */\r\nextern B_Controller_T Controller_B;\r\n\r\n/* Continuous states (default storage) */\r\nextern X_Controller_T Controller_X;\r\n\r\n/* Disabled states (default storage) */\r\nextern XDis_Controller_T Controller_XDis;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_Controller_T Controller_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_Controller_T Controller_Y;\r\n\r\n/* Model entry point functions */\r\nextern void Controller_initialize(void);\r\nextern void Controller_step(void);\r\nextern void Controller_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_Controller_T *const Controller_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('PID_LOOP/Controller')    - opens subsystem PID_LOOP/Controller\r\n * hilite_system('PID_LOOP/Controller/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'PID_LOOP'\r\n * '<S1>'   : 'PID_LOOP/Controller'\r\n * '<S2>'   : 'PID_LOOP/Controller/MATLAB Function'\r\n * '<S3>'   : 'PID_LOOP/Controller/PID 1'\r\n * '<S4>'   : 'PID_LOOP/Controller/PID 2'\r\n * '<S5>'   : 'PID_LOOP/Controller/PID 3'\r\n * '<S6>'   : 'PID_LOOP/Controller/PID 4'\r\n * '<S7>'   : 'PID_LOOP/Controller/PID 5'\r\n * '<S8>'   : 'PID_LOOP/Controller/PID 6'\r\n * '<S9>'   : 'PID_LOOP/Controller/PID 1/Anti-windup'\r\n * '<S10>'  : 'PID_LOOP/Controller/PID 1/D Gain'\r\n * '<S11>'  : 'PID_LOOP/Controller/PID 1/External Derivative'\r\n * '<S12>'  : 'PID_LOOP/Controller/PID 1/Filter'\r\n * '<S13>'  : 'PID_LOOP/Controller/PID 1/Filter ICs'\r\n * '<S14>'  : 'PID_LOOP/Controller/PID 1/I Gain'\r\n * '<S15>'  : 'PID_LOOP/Controller/PID 1/Ideal P Gain'\r\n * '<S16>'  : 'PID_LOOP/Controller/PID 1/Ideal P Gain Fdbk'\r\n * '<S17>'  : 'PID_LOOP/Controller/PID 1/Integrator'\r\n * '<S18>'  : 'PID_LOOP/Controller/PID 1/Integrator ICs'\r\n * '<S19>'  : 'PID_LOOP/Controller/PID 1/N Copy'\r\n * '<S20>'  : 'PID_LOOP/Controller/PID 1/N Gain'\r\n * '<S21>'  : 'PID_LOOP/Controller/PID 1/P Copy'\r\n * '<S22>'  : 'PID_LOOP/Controller/PID 1/Parallel P Gain'\r\n * '<S23>'  : 'PID_LOOP/Controller/PID 1/Reset Signal'\r\n * '<S24>'  : 'PID_LOOP/Controller/PID 1/Saturation'\r\n * '<S25>'  : 'PID_LOOP/Controller/PID 1/Saturation Fdbk'\r\n * '<S26>'  : 'PID_LOOP/Controller/PID 1/Sum'\r\n * '<S27>'  : 'PID_LOOP/Controller/PID 1/Sum Fdbk'\r\n * '<S28>'  : 'PID_LOOP/Controller/PID 1/Tracking Mode'\r\n * '<S29>'  : 'PID_LOOP/Controller/PID 1/Tracking Mode Sum'\r\n * '<S30>'  : 'PID_LOOP/Controller/PID 1/Tsamp - Integral'\r\n * '<S31>'  : 'PID_LOOP/Controller/PID 1/Tsamp - Ngain'\r\n * '<S32>'  : 'PID_LOOP/Controller/PID 1/postSat Signal'\r\n * '<S33>'  : 'PID_LOOP/Controller/PID 1/preInt Signal'\r\n * '<S34>'  : 'PID_LOOP/Controller/PID 1/preSat Signal'\r\n * '<S35>'  : 'PID_LOOP/Controller/PID 1/Anti-windup/Passthrough'\r\n * '<S36>'  : 'PID_LOOP/Controller/PID 1/D Gain/Internal Parameters'\r\n * '<S37>'  : 'PID_LOOP/Controller/PID 1/External Derivative/Error'\r\n * '<S38>'  : 'PID_LOOP/Controller/PID 1/Filter/Cont. Filter'\r\n * '<S39>'  : 'PID_LOOP/Controller/PID 1/Filter ICs/Internal IC - Filter'\r\n * '<S40>'  : 'PID_LOOP/Controller/PID 1/I Gain/Internal Parameters'\r\n * '<S41>'  : 'PID_LOOP/Controller/PID 1/Ideal P Gain/Passthrough'\r\n * '<S42>'  : 'PID_LOOP/Controller/PID 1/Ideal P Gain Fdbk/Disabled'\r\n * '<S43>'  : 'PID_LOOP/Controller/PID 1/Integrator/Continuous'\r\n * '<S44>'  : 'PID_LOOP/Controller/PID 1/Integrator ICs/Internal IC'\r\n * '<S45>'  : 'PID_LOOP/Controller/PID 1/N Copy/Disabled'\r\n * '<S46>'  : 'PID_LOOP/Controller/PID 1/N Gain/Internal Parameters'\r\n * '<S47>'  : 'PID_LOOP/Controller/PID 1/P Copy/Disabled'\r\n * '<S48>'  : 'PID_LOOP/Controller/PID 1/Parallel P Gain/Internal Parameters'\r\n * '<S49>'  : 'PID_LOOP/Controller/PID 1/Reset Signal/Disabled'\r\n * '<S50>'  : 'PID_LOOP/Controller/PID 1/Saturation/Passthrough'\r\n * '<S51>'  : 'PID_LOOP/Controller/PID 1/Saturation Fdbk/Disabled'\r\n * '<S52>'  : 'PID_LOOP/Controller/PID 1/Sum/Sum_PID'\r\n * '<S53>'  : 'PID_LOOP/Controller/PID 1/Sum Fdbk/Disabled'\r\n * '<S54>'  : 'PID_LOOP/Controller/PID 1/Tracking Mode/Disabled'\r\n * '<S55>'  : 'PID_LOOP/Controller/PID 1/Tracking Mode Sum/Passthrough'\r\n * '<S56>'  : 'PID_LOOP/Controller/PID 1/Tsamp - Integral/TsSignalSpecification'\r\n * '<S57>'  : 'PID_LOOP/Controller/PID 1/Tsamp - Ngain/Passthrough'\r\n * '<S58>'  : 'PID_LOOP/Controller/PID 1/postSat Signal/Forward_Path'\r\n * '<S59>'  : 'PID_LOOP/Controller/PID 1/preInt Signal/Internal PreInt'\r\n * '<S60>'  : 'PID_LOOP/Controller/PID 1/preSat Signal/Forward_Path'\r\n * '<S61>'  : 'PID_LOOP/Controller/PID 2/Anti-windup'\r\n * '<S62>'  : 'PID_LOOP/Controller/PID 2/D Gain'\r\n * '<S63>'  : 'PID_LOOP/Controller/PID 2/External Derivative'\r\n * '<S64>'  : 'PID_LOOP/Controller/PID 2/Filter'\r\n * '<S65>'  : 'PID_LOOP/Controller/PID 2/Filter ICs'\r\n * '<S66>'  : 'PID_LOOP/Controller/PID 2/I Gain'\r\n * '<S67>'  : 'PID_LOOP/Controller/PID 2/Ideal P Gain'\r\n * '<S68>'  : 'PID_LOOP/Controller/PID 2/Ideal P Gain Fdbk'\r\n * '<S69>'  : 'PID_LOOP/Controller/PID 2/Integrator'\r\n * '<S70>'  : 'PID_LOOP/Controller/PID 2/Integrator ICs'\r\n * '<S71>'  : 'PID_LOOP/Controller/PID 2/N Copy'\r\n * '<S72>'  : 'PID_LOOP/Controller/PID 2/N Gain'\r\n * '<S73>'  : 'PID_LOOP/Controller/PID 2/P Copy'\r\n * '<S74>'  : 'PID_LOOP/Controller/PID 2/Parallel P Gain'\r\n * '<S75>'  : 'PID_LOOP/Controller/PID 2/Reset Signal'\r\n * '<S76>'  : 'PID_LOOP/Controller/PID 2/Saturation'\r\n * '<S77>'  : 'PID_LOOP/Controller/PID 2/Saturation Fdbk'\r\n * '<S78>'  : 'PID_LOOP/Controller/PID 2/Sum'\r\n * '<S79>'  : 'PID_LOOP/Controller/PID 2/Sum Fdbk'\r\n * '<S80>'  : 'PID_LOOP/Controller/PID 2/Tracking Mode'\r\n * '<S81>'  : 'PID_LOOP/Controller/PID 2/Tracking Mode Sum'\r\n * '<S82>'  : 'PID_LOOP/Controller/PID 2/Tsamp - Integral'\r\n * '<S83>'  : 'PID_LOOP/Controller/PID 2/Tsamp - Ngain'\r\n * '<S84>'  : 'PID_LOOP/Controller/PID 2/postSat Signal'\r\n * '<S85>'  : 'PID_LOOP/Controller/PID 2/preInt Signal'\r\n * '<S86>'  : 'PID_LOOP/Controller/PID 2/preSat Signal'\r\n * '<S87>'  : 'PID_LOOP/Controller/PID 2/Anti-windup/Passthrough'\r\n * '<S88>'  : 'PID_LOOP/Controller/PID 2/D Gain/Internal Parameters'\r\n * '<S89>'  : 'PID_LOOP/Controller/PID 2/External Derivative/Error'\r\n * '<S90>'  : 'PID_LOOP/Controller/PID 2/Filter/Cont. Filter'\r\n * '<S91>'  : 'PID_LOOP/Controller/PID 2/Filter ICs/Internal IC - Filter'\r\n * '<S92>'  : 'PID_LOOP/Controller/PID 2/I Gain/Internal Parameters'\r\n * '<S93>'  : 'PID_LOOP/Controller/PID 2/Ideal P Gain/Passthrough'\r\n * '<S94>'  : 'PID_LOOP/Controller/PID 2/Ideal P Gain Fdbk/Disabled'\r\n * '<S95>'  : 'PID_LOOP/Controller/PID 2/Integrator/Continuous'\r\n * '<S96>'  : 'PID_LOOP/Controller/PID 2/Integrator ICs/Internal IC'\r\n * '<S97>'  : 'PID_LOOP/Controller/PID 2/N Copy/Disabled'\r\n * '<S98>'  : 'PID_LOOP/Controller/PID 2/N Gain/Internal Parameters'\r\n * '<S99>'  : 'PID_LOOP/Controller/PID 2/P Copy/Disabled'\r\n * '<S100>' : 'PID_LOOP/Controller/PID 2/Parallel P Gain/Internal Parameters'\r\n * '<S101>' : 'PID_LOOP/Controller/PID 2/Reset Signal/Disabled'\r\n * '<S102>' : 'PID_LOOP/Controller/PID 2/Saturation/Passthrough'\r\n * '<S103>' : 'PID_LOOP/Controller/PID 2/Saturation Fdbk/Disabled'\r\n * '<S104>' : 'PID_LOOP/Controller/PID 2/Sum/Sum_PID'\r\n * '<S105>' : 'PID_LOOP/Controller/PID 2/Sum Fdbk/Disabled'\r\n * '<S106>' : 'PID_LOOP/Controller/PID 2/Tracking Mode/Disabled'\r\n * '<S107>' : 'PID_LOOP/Controller/PID 2/Tracking Mode Sum/Passthrough'\r\n * '<S108>' : 'PID_LOOP/Controller/PID 2/Tsamp - Integral/TsSignalSpecification'\r\n * '<S109>' : 'PID_LOOP/Controller/PID 2/Tsamp - Ngain/Passthrough'\r\n * '<S110>' : 'PID_LOOP/Controller/PID 2/postSat Signal/Forward_Path'\r\n * '<S111>' : 'PID_LOOP/Controller/PID 2/preInt Signal/Internal PreInt'\r\n * '<S112>' : 'PID_LOOP/Controller/PID 2/preSat Signal/Forward_Path'\r\n * '<S113>' : 'PID_LOOP/Controller/PID 3/Anti-windup'\r\n * '<S114>' : 'PID_LOOP/Controller/PID 3/D Gain'\r\n * '<S115>' : 'PID_LOOP/Controller/PID 3/External Derivative'\r\n * '<S116>' : 'PID_LOOP/Controller/PID 3/Filter'\r\n * '<S117>' : 'PID_LOOP/Controller/PID 3/Filter ICs'\r\n * '<S118>' : 'PID_LOOP/Controller/PID 3/I Gain'\r\n * '<S119>' : 'PID_LOOP/Controller/PID 3/Ideal P Gain'\r\n * '<S120>' : 'PID_LOOP/Controller/PID 3/Ideal P Gain Fdbk'\r\n * '<S121>' : 'PID_LOOP/Controller/PID 3/Integrator'\r\n * '<S122>' : 'PID_LOOP/Controller/PID 3/Integrator ICs'\r\n * '<S123>' : 'PID_LOOP/Controller/PID 3/N Copy'\r\n * '<S124>' : 'PID_LOOP/Controller/PID 3/N Gain'\r\n * '<S125>' : 'PID_LOOP/Controller/PID 3/P Copy'\r\n * '<S126>' : 'PID_LOOP/Controller/PID 3/Parallel P Gain'\r\n * '<S127>' : 'PID_LOOP/Controller/PID 3/Reset Signal'\r\n * '<S128>' : 'PID_LOOP/Controller/PID 3/Saturation'\r\n * '<S129>' : 'PID_LOOP/Controller/PID 3/Saturation Fdbk'\r\n * '<S130>' : 'PID_LOOP/Controller/PID 3/Sum'\r\n * '<S131>' : 'PID_LOOP/Controller/PID 3/Sum Fdbk'\r\n * '<S132>' : 'PID_LOOP/Controller/PID 3/Tracking Mode'\r\n * '<S133>' : 'PID_LOOP/Controller/PID 3/Tracking Mode Sum'\r\n * '<S134>' : 'PID_LOOP/Controller/PID 3/Tsamp - Integral'\r\n * '<S135>' : 'PID_LOOP/Controller/PID 3/Tsamp - Ngain'\r\n * '<S136>' : 'PID_LOOP/Controller/PID 3/postSat Signal'\r\n * '<S137>' : 'PID_LOOP/Controller/PID 3/preInt Signal'\r\n * '<S138>' : 'PID_LOOP/Controller/PID 3/preSat Signal'\r\n * '<S139>' : 'PID_LOOP/Controller/PID 3/Anti-windup/Passthrough'\r\n * '<S140>' : 'PID_LOOP/Controller/PID 3/D Gain/Internal Parameters'\r\n * '<S141>' : 'PID_LOOP/Controller/PID 3/External Derivative/Error'\r\n * '<S142>' : 'PID_LOOP/Controller/PID 3/Filter/Cont. Filter'\r\n * '<S143>' : 'PID_LOOP/Controller/PID 3/Filter ICs/Internal IC - Filter'\r\n * '<S144>' : 'PID_LOOP/Controller/PID 3/I Gain/Internal Parameters'\r\n * '<S145>' : 'PID_LOOP/Controller/PID 3/Ideal P Gain/Passthrough'\r\n * '<S146>' : 'PID_LOOP/Controller/PID 3/Ideal P Gain Fdbk/Disabled'\r\n * '<S147>' : 'PID_LOOP/Controller/PID 3/Integrator/Continuous'\r\n * '<S148>' : 'PID_LOOP/Controller/PID 3/Integrator ICs/Internal IC'\r\n * '<S149>' : 'PID_LOOP/Controller/PID 3/N Copy/Disabled'\r\n * '<S150>' : 'PID_LOOP/Controller/PID 3/N Gain/Internal Parameters'\r\n * '<S151>' : 'PID_LOOP/Controller/PID 3/P Copy/Disabled'\r\n * '<S152>' : 'PID_LOOP/Controller/PID 3/Parallel P Gain/Internal Parameters'\r\n * '<S153>' : 'PID_LOOP/Controller/PID 3/Reset Signal/Disabled'\r\n * '<S154>' : 'PID_LOOP/Controller/PID 3/Saturation/Passthrough'\r\n * '<S155>' : 'PID_LOOP/Controller/PID 3/Saturation Fdbk/Disabled'\r\n * '<S156>' : 'PID_LOOP/Controller/PID 3/Sum/Sum_PID'\r\n * '<S157>' : 'PID_LOOP/Controller/PID 3/Sum Fdbk/Disabled'\r\n * '<S158>' : 'PID_LOOP/Controller/PID 3/Tracking Mode/Disabled'\r\n * '<S159>' : 'PID_LOOP/Controller/PID 3/Tracking Mode Sum/Passthrough'\r\n * '<S160>' : 'PID_LOOP/Controller/PID 3/Tsamp - Integral/TsSignalSpecification'\r\n * '<S161>' : 'PID_LOOP/Controller/PID 3/Tsamp - Ngain/Passthrough'\r\n * '<S162>' : 'PID_LOOP/Controller/PID 3/postSat Signal/Forward_Path'\r\n * '<S163>' : 'PID_LOOP/Controller/PID 3/preInt Signal/Internal PreInt'\r\n * '<S164>' : 'PID_LOOP/Controller/PID 3/preSat Signal/Forward_Path'\r\n * '<S165>' : 'PID_LOOP/Controller/PID 4/Anti-windup'\r\n * '<S166>' : 'PID_LOOP/Controller/PID 4/D Gain'\r\n * '<S167>' : 'PID_LOOP/Controller/PID 4/External Derivative'\r\n * '<S168>' : 'PID_LOOP/Controller/PID 4/Filter'\r\n * '<S169>' : 'PID_LOOP/Controller/PID 4/Filter ICs'\r\n * '<S170>' : 'PID_LOOP/Controller/PID 4/I Gain'\r\n * '<S171>' : 'PID_LOOP/Controller/PID 4/Ideal P Gain'\r\n * '<S172>' : 'PID_LOOP/Controller/PID 4/Ideal P Gain Fdbk'\r\n * '<S173>' : 'PID_LOOP/Controller/PID 4/Integrator'\r\n * '<S174>' : 'PID_LOOP/Controller/PID 4/Integrator ICs'\r\n * '<S175>' : 'PID_LOOP/Controller/PID 4/N Copy'\r\n * '<S176>' : 'PID_LOOP/Controller/PID 4/N Gain'\r\n * '<S177>' : 'PID_LOOP/Controller/PID 4/P Copy'\r\n * '<S178>' : 'PID_LOOP/Controller/PID 4/Parallel P Gain'\r\n * '<S179>' : 'PID_LOOP/Controller/PID 4/Reset Signal'\r\n * '<S180>' : 'PID_LOOP/Controller/PID 4/Saturation'\r\n * '<S181>' : 'PID_LOOP/Controller/PID 4/Saturation Fdbk'\r\n * '<S182>' : 'PID_LOOP/Controller/PID 4/Sum'\r\n * '<S183>' : 'PID_LOOP/Controller/PID 4/Sum Fdbk'\r\n * '<S184>' : 'PID_LOOP/Controller/PID 4/Tracking Mode'\r\n * '<S185>' : 'PID_LOOP/Controller/PID 4/Tracking Mode Sum'\r\n * '<S186>' : 'PID_LOOP/Controller/PID 4/Tsamp - Integral'\r\n * '<S187>' : 'PID_LOOP/Controller/PID 4/Tsamp - Ngain'\r\n * '<S188>' : 'PID_LOOP/Controller/PID 4/postSat Signal'\r\n * '<S189>' : 'PID_LOOP/Controller/PID 4/preInt Signal'\r\n * '<S190>' : 'PID_LOOP/Controller/PID 4/preSat Signal'\r\n * '<S191>' : 'PID_LOOP/Controller/PID 4/Anti-windup/Passthrough'\r\n * '<S192>' : 'PID_LOOP/Controller/PID 4/D Gain/Internal Parameters'\r\n * '<S193>' : 'PID_LOOP/Controller/PID 4/External Derivative/Error'\r\n * '<S194>' : 'PID_LOOP/Controller/PID 4/Filter/Cont. Filter'\r\n * '<S195>' : 'PID_LOOP/Controller/PID 4/Filter ICs/Internal IC - Filter'\r\n * '<S196>' : 'PID_LOOP/Controller/PID 4/I Gain/Internal Parameters'\r\n * '<S197>' : 'PID_LOOP/Controller/PID 4/Ideal P Gain/Passthrough'\r\n * '<S198>' : 'PID_LOOP/Controller/PID 4/Ideal P Gain Fdbk/Disabled'\r\n * '<S199>' : 'PID_LOOP/Controller/PID 4/Integrator/Continuous'\r\n * '<S200>' : 'PID_LOOP/Controller/PID 4/Integrator ICs/Internal IC'\r\n * '<S201>' : 'PID_LOOP/Controller/PID 4/N Copy/Disabled'\r\n * '<S202>' : 'PID_LOOP/Controller/PID 4/N Gain/Internal Parameters'\r\n * '<S203>' : 'PID_LOOP/Controller/PID 4/P Copy/Disabled'\r\n * '<S204>' : 'PID_LOOP/Controller/PID 4/Parallel P Gain/Internal Parameters'\r\n * '<S205>' : 'PID_LOOP/Controller/PID 4/Reset Signal/Disabled'\r\n * '<S206>' : 'PID_LOOP/Controller/PID 4/Saturation/Passthrough'\r\n * '<S207>' : 'PID_LOOP/Controller/PID 4/Saturation Fdbk/Disabled'\r\n * '<S208>' : 'PID_LOOP/Controller/PID 4/Sum/Sum_PID'\r\n * '<S209>' : 'PID_LOOP/Controller/PID 4/Sum Fdbk/Disabled'\r\n * '<S210>' : 'PID_LOOP/Controller/PID 4/Tracking Mode/Disabled'\r\n * '<S211>' : 'PID_LOOP/Controller/PID 4/Tracking Mode Sum/Passthrough'\r\n * '<S212>' : 'PID_LOOP/Controller/PID 4/Tsamp - Integral/TsSignalSpecification'\r\n * '<S213>' : 'PID_LOOP/Controller/PID 4/Tsamp - Ngain/Passthrough'\r\n * '<S214>' : 'PID_LOOP/Controller/PID 4/postSat Signal/Forward_Path'\r\n * '<S215>' : 'PID_LOOP/Controller/PID 4/preInt Signal/Internal PreInt'\r\n * '<S216>' : 'PID_LOOP/Controller/PID 4/preSat Signal/Forward_Path'\r\n * '<S217>' : 'PID_LOOP/Controller/PID 5/Anti-windup'\r\n * '<S218>' : 'PID_LOOP/Controller/PID 5/D Gain'\r\n * '<S219>' : 'PID_LOOP/Controller/PID 5/External Derivative'\r\n * '<S220>' : 'PID_LOOP/Controller/PID 5/Filter'\r\n * '<S221>' : 'PID_LOOP/Controller/PID 5/Filter ICs'\r\n * '<S222>' : 'PID_LOOP/Controller/PID 5/I Gain'\r\n * '<S223>' : 'PID_LOOP/Controller/PID 5/Ideal P Gain'\r\n * '<S224>' : 'PID_LOOP/Controller/PID 5/Ideal P Gain Fdbk'\r\n * '<S225>' : 'PID_LOOP/Controller/PID 5/Integrator'\r\n * '<S226>' : 'PID_LOOP/Controller/PID 5/Integrator ICs'\r\n * '<S227>' : 'PID_LOOP/Controller/PID 5/N Copy'\r\n * '<S228>' : 'PID_LOOP/Controller/PID 5/N Gain'\r\n * '<S229>' : 'PID_LOOP/Controller/PID 5/P Copy'\r\n * '<S230>' : 'PID_LOOP/Controller/PID 5/Parallel P Gain'\r\n * '<S231>' : 'PID_LOOP/Controller/PID 5/Reset Signal'\r\n * '<S232>' : 'PID_LOOP/Controller/PID 5/Saturation'\r\n * '<S233>' : 'PID_LOOP/Controller/PID 5/Saturation Fdbk'\r\n * '<S234>' : 'PID_LOOP/Controller/PID 5/Sum'\r\n * '<S235>' : 'PID_LOOP/Controller/PID 5/Sum Fdbk'\r\n * '<S236>' : 'PID_LOOP/Controller/PID 5/Tracking Mode'\r\n * '<S237>' : 'PID_LOOP/Controller/PID 5/Tracking Mode Sum'\r\n * '<S238>' : 'PID_LOOP/Controller/PID 5/Tsamp - Integral'\r\n * '<S239>' : 'PID_LOOP/Controller/PID 5/Tsamp - Ngain'\r\n * '<S240>' : 'PID_LOOP/Controller/PID 5/postSat Signal'\r\n * '<S241>' : 'PID_LOOP/Controller/PID 5/preInt Signal'\r\n * '<S242>' : 'PID_LOOP/Controller/PID 5/preSat Signal'\r\n * '<S243>' : 'PID_LOOP/Controller/PID 5/Anti-windup/Passthrough'\r\n * '<S244>' : 'PID_LOOP/Controller/PID 5/D Gain/Internal Parameters'\r\n * '<S245>' : 'PID_LOOP/Controller/PID 5/External Derivative/Error'\r\n * '<S246>' : 'PID_LOOP/Controller/PID 5/Filter/Cont. Filter'\r\n * '<S247>' : 'PID_LOOP/Controller/PID 5/Filter ICs/Internal IC - Filter'\r\n * '<S248>' : 'PID_LOOP/Controller/PID 5/I Gain/Internal Parameters'\r\n * '<S249>' : 'PID_LOOP/Controller/PID 5/Ideal P Gain/Passthrough'\r\n * '<S250>' : 'PID_LOOP/Controller/PID 5/Ideal P Gain Fdbk/Disabled'\r\n * '<S251>' : 'PID_LOOP/Controller/PID 5/Integrator/Continuous'\r\n * '<S252>' : 'PID_LOOP/Controller/PID 5/Integrator ICs/Internal IC'\r\n * '<S253>' : 'PID_LOOP/Controller/PID 5/N Copy/Disabled'\r\n * '<S254>' : 'PID_LOOP/Controller/PID 5/N Gain/Internal Parameters'\r\n * '<S255>' : 'PID_LOOP/Controller/PID 5/P Copy/Disabled'\r\n * '<S256>' : 'PID_LOOP/Controller/PID 5/Parallel P Gain/Internal Parameters'\r\n * '<S257>' : 'PID_LOOP/Controller/PID 5/Reset Signal/Disabled'\r\n * '<S258>' : 'PID_LOOP/Controller/PID 5/Saturation/Passthrough'\r\n * '<S259>' : 'PID_LOOP/Controller/PID 5/Saturation Fdbk/Disabled'\r\n * '<S260>' : 'PID_LOOP/Controller/PID 5/Sum/Sum_PID'\r\n * '<S261>' : 'PID_LOOP/Controller/PID 5/Sum Fdbk/Disabled'\r\n * '<S262>' : 'PID_LOOP/Controller/PID 5/Tracking Mode/Disabled'\r\n * '<S263>' : 'PID_LOOP/Controller/PID 5/Tracking Mode Sum/Passthrough'\r\n * '<S264>' : 'PID_LOOP/Controller/PID 5/Tsamp - Integral/TsSignalSpecification'\r\n * '<S265>' : 'PID_LOOP/Controller/PID 5/Tsamp - Ngain/Passthrough'\r\n * '<S266>' : 'PID_LOOP/Controller/PID 5/postSat Signal/Forward_Path'\r\n * '<S267>' : 'PID_LOOP/Controller/PID 5/preInt Signal/Internal PreInt'\r\n * '<S268>' : 'PID_LOOP/Controller/PID 5/preSat Signal/Forward_Path'\r\n * '<S269>' : 'PID_LOOP/Controller/PID 6/Anti-windup'\r\n * '<S270>' : 'PID_LOOP/Controller/PID 6/D Gain'\r\n * '<S271>' : 'PID_LOOP/Controller/PID 6/External Derivative'\r\n * '<S272>' : 'PID_LOOP/Controller/PID 6/Filter'\r\n * '<S273>' : 'PID_LOOP/Controller/PID 6/Filter ICs'\r\n * '<S274>' : 'PID_LOOP/Controller/PID 6/I Gain'\r\n * '<S275>' : 'PID_LOOP/Controller/PID 6/Ideal P Gain'\r\n * '<S276>' : 'PID_LOOP/Controller/PID 6/Ideal P Gain Fdbk'\r\n * '<S277>' : 'PID_LOOP/Controller/PID 6/Integrator'\r\n * '<S278>' : 'PID_LOOP/Controller/PID 6/Integrator ICs'\r\n * '<S279>' : 'PID_LOOP/Controller/PID 6/N Copy'\r\n * '<S280>' : 'PID_LOOP/Controller/PID 6/N Gain'\r\n * '<S281>' : 'PID_LOOP/Controller/PID 6/P Copy'\r\n * '<S282>' : 'PID_LOOP/Controller/PID 6/Parallel P Gain'\r\n * '<S283>' : 'PID_LOOP/Controller/PID 6/Reset Signal'\r\n * '<S284>' : 'PID_LOOP/Controller/PID 6/Saturation'\r\n * '<S285>' : 'PID_LOOP/Controller/PID 6/Saturation Fdbk'\r\n * '<S286>' : 'PID_LOOP/Controller/PID 6/Sum'\r\n * '<S287>' : 'PID_LOOP/Controller/PID 6/Sum Fdbk'\r\n * '<S288>' : 'PID_LOOP/Controller/PID 6/Tracking Mode'\r\n * '<S289>' : 'PID_LOOP/Controller/PID 6/Tracking Mode Sum'\r\n * '<S290>' : 'PID_LOOP/Controller/PID 6/Tsamp - Integral'\r\n * '<S291>' : 'PID_LOOP/Controller/PID 6/Tsamp - Ngain'\r\n * '<S292>' : 'PID_LOOP/Controller/PID 6/postSat Signal'\r\n * '<S293>' : 'PID_LOOP/Controller/PID 6/preInt Signal'\r\n * '<S294>' : 'PID_LOOP/Controller/PID 6/preSat Signal'\r\n * '<S295>' : 'PID_LOOP/Controller/PID 6/Anti-windup/Passthrough'\r\n * '<S296>' : 'PID_LOOP/Controller/PID 6/D Gain/Internal Parameters'\r\n * '<S297>' : 'PID_LOOP/Controller/PID 6/External Derivative/Error'\r\n * '<S298>' : 'PID_LOOP/Controller/PID 6/Filter/Cont. Filter'\r\n * '<S299>' : 'PID_LOOP/Controller/PID 6/Filter ICs/Internal IC - Filter'\r\n * '<S300>' : 'PID_LOOP/Controller/PID 6/I Gain/Internal Parameters'\r\n * '<S301>' : 'PID_LOOP/Controller/PID 6/Ideal P Gain/Passthrough'\r\n * '<S302>' : 'PID_LOOP/Controller/PID 6/Ideal P Gain Fdbk/Disabled'\r\n * '<S303>' : 'PID_LOOP/Controller/PID 6/Integrator/Continuous'\r\n * '<S304>' : 'PID_LOOP/Controller/PID 6/Integrator ICs/Internal IC'\r\n * '<S305>' : 'PID_LOOP/Controller/PID 6/N Copy/Disabled'\r\n * '<S306>' : 'PID_LOOP/Controller/PID 6/N Gain/Internal Parameters'\r\n * '<S307>' : 'PID_LOOP/Controller/PID 6/P Copy/Disabled'\r\n * '<S308>' : 'PID_LOOP/Controller/PID 6/Parallel P Gain/Internal Parameters'\r\n * '<S309>' : 'PID_LOOP/Controller/PID 6/Reset Signal/Disabled'\r\n * '<S310>' : 'PID_LOOP/Controller/PID 6/Saturation/Passthrough'\r\n * '<S311>' : 'PID_LOOP/Controller/PID 6/Saturation Fdbk/Disabled'\r\n * '<S312>' : 'PID_LOOP/Controller/PID 6/Sum/Sum_PID'\r\n * '<S313>' : 'PID_LOOP/Controller/PID 6/Sum Fdbk/Disabled'\r\n * '<S314>' : 'PID_LOOP/Controller/PID 6/Tracking Mode/Disabled'\r\n * '<S315>' : 'PID_LOOP/Controller/PID 6/Tracking Mode Sum/Passthrough'\r\n * '<S316>' : 'PID_LOOP/Controller/PID 6/Tsamp - Integral/TsSignalSpecification'\r\n * '<S317>' : 'PID_LOOP/Controller/PID 6/Tsamp - Ngain/Passthrough'\r\n * '<S318>' : 'PID_LOOP/Controller/PID 6/postSat Signal/Forward_Path'\r\n * '<S319>' : 'PID_LOOP/Controller/PID 6/preInt Signal/Internal PreInt'\r\n * '<S320>' : 'PID_LOOP/Controller/PID 6/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* Controller_h_ */\r\n"},{"name":"Controller_private.h","type":"header","group":"model","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Controller_private.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Controller_private_h_\r\n#define Controller_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"builtin_typeid_types.h\"\r\n#include \"multiword_types.h\"\r\n#include \"Controller_types.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTFinal\r\n#define rtmSetTFinal(rtm, val)         ((rtm)->Timing.tFinal = (val))\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* private model entry point functions */\r\nextern void Controller_derivatives(void);\r\n\r\n#endif                                 /* Controller_private_h_ */\r\n"},{"name":"Controller_types.h","type":"header","group":"model","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Controller_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Controller_types_h_\r\n#define Controller_types_h_\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_Controller_T_ P_Controller_T;\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_Controller_T RT_MODEL_Controller_T;\r\n\r\n#endif                                 /* Controller_types_h_ */\r\n"},{"name":"Controller_data.c","type":"source","group":"data","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Controller_data.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Controller.h\"\r\n\r\n/* Block parameters (default storage) */\r\nP_Controller_T Controller_P = {\r\n  /* Variable: pwm_stop\r\n   * Referenced by: '<S1>/PWM Stop'\r\n   */\r\n  1500.0,\r\n\r\n  /* Variable: wrench\r\n   * Referenced by: '<S1>/MATLAB Function'\r\n   */\r\n  { 0.0, 0.0, 0.0, 0.0, -0.7071, -0.7071, -0.7071, -0.7071, 0.0, 0.0, 0.0, 0.0,\r\n    -0.7071, 0.7071, 0.7071, -0.7071, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0,\r\n    -0.2035, 0.2035, -0.2035, 0.2035, -0.0346, 0.0346, 0.0346, -0.0346, -0.2535,\r\n    -0.2535, 0.2545, 0.2545, 0.0346, 0.0346, 0.0346, 0.0346, 0.0, 0.0, 0.0, 0.0,\r\n    0.2153, -0.2153, 0.222, -0.222 },\r\n\r\n  /* Mask Parameter: PID1_D\r\n   * Referenced by: '<S36>/Derivative Gain'\r\n   */\r\n  80.0,\r\n\r\n  /* Mask Parameter: PID2_D\r\n   * Referenced by: '<S88>/Derivative Gain'\r\n   */\r\n  20.0,\r\n\r\n  /* Mask Parameter: PID3_D\r\n   * Referenced by: '<S140>/Derivative Gain'\r\n   */\r\n  40.0,\r\n\r\n  /* Mask Parameter: PID4_D\r\n   * Referenced by: '<S192>/Derivative Gain'\r\n   */\r\n  20.0,\r\n\r\n  /* Mask Parameter: PID5_D\r\n   * Referenced by: '<S244>/Derivative Gain'\r\n   */\r\n  50.0,\r\n\r\n  /* Mask Parameter: PID6_D\r\n   * Referenced by: '<S296>/Derivative Gain'\r\n   */\r\n  5.0,\r\n\r\n  /* Mask Parameter: PID1_I\r\n   * Referenced by: '<S40>/Integral Gain'\r\n   */\r\n  1.0,\r\n\r\n  /* Mask Parameter: PID2_I\r\n   * Referenced by: '<S92>/Integral Gain'\r\n   */\r\n  1.0,\r\n\r\n  /* Mask Parameter: PID3_I\r\n   * Referenced by: '<S144>/Integral Gain'\r\n   */\r\n  1.0,\r\n\r\n  /* Mask Parameter: PID4_I\r\n   * Referenced by: '<S196>/Integral Gain'\r\n   */\r\n  1.0,\r\n\r\n  /* Mask Parameter: PID5_I\r\n   * Referenced by: '<S248>/Integral Gain'\r\n   */\r\n  1.0,\r\n\r\n  /* Mask Parameter: PID6_I\r\n   * Referenced by: '<S300>/Integral Gain'\r\n   */\r\n  1.0,\r\n\r\n  /* Mask Parameter: PID1_InitialConditionForFilter\r\n   * Referenced by: '<S38>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID2_InitialConditionForFilter\r\n   * Referenced by: '<S90>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID3_InitialConditionForFilter\r\n   * Referenced by: '<S142>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID4_InitialConditionForFilter\r\n   * Referenced by: '<S194>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID5_InitialConditionForFilter\r\n   * Referenced by: '<S246>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID6_InitialConditionForFilter\r\n   * Referenced by: '<S298>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID1_InitialConditionForIntegra\r\n   * Referenced by: '<S43>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID2_InitialConditionForIntegra\r\n   * Referenced by: '<S95>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID3_InitialConditionForIntegra\r\n   * Referenced by: '<S147>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID4_InitialConditionForIntegra\r\n   * Referenced by: '<S199>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID5_InitialConditionForIntegra\r\n   * Referenced by: '<S251>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID6_InitialConditionForIntegra\r\n   * Referenced by: '<S303>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PID1_N\r\n   * Referenced by: '<S46>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PID2_N\r\n   * Referenced by: '<S98>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PID3_N\r\n   * Referenced by: '<S150>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PID4_N\r\n   * Referenced by: '<S202>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PID5_N\r\n   * Referenced by: '<S254>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PID6_N\r\n   * Referenced by: '<S306>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PID1_P\r\n   * Referenced by: '<S48>/Proportional Gain'\r\n   */\r\n  50.0,\r\n\r\n  /* Mask Parameter: PID2_P\r\n   * Referenced by: '<S100>/Proportional Gain'\r\n   */\r\n  20.0,\r\n\r\n  /* Mask Parameter: PID3_P\r\n   * Referenced by: '<S152>/Proportional Gain'\r\n   */\r\n  40.0,\r\n\r\n  /* Mask Parameter: PID4_P\r\n   * Referenced by: '<S204>/Proportional Gain'\r\n   */\r\n  20.0,\r\n\r\n  /* Mask Parameter: PID5_P\r\n   * Referenced by: '<S256>/Proportional Gain'\r\n   */\r\n  20.0,\r\n\r\n  /* Mask Parameter: PID6_P\r\n   * Referenced by: '<S308>/Proportional Gain'\r\n   */\r\n  5.0,\r\n\r\n  /* Expression: 10\r\n   * Referenced by: '<S1>/Gain'\r\n   */\r\n  10.0,\r\n\r\n  /* Expression: 1900\r\n   * Referenced by: '<S1>/Saturation'\r\n   */\r\n  1900.0,\r\n\r\n  /* Expression: 1100\r\n   * Referenced by: '<S1>/Saturation'\r\n   */\r\n  1100.0\r\n};\r\n"},{"name":"builtin_typeid_types.h","type":"header","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * builtin_typeid_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef BUILTIN_TYPEID_TYPES_H\r\n#define BUILTIN_TYPEID_TYPES_H\r\n#ifndef BUILTIN_TYPEID_TYPES\r\n#define BUILTIN_TYPEID_TYPES\r\n\r\n/* Enumeration of built-in data types */\r\ntypedef enum {\r\n  SS_DOUBLE = 0,\r\n  SS_SINGLE = 1,\r\n  SS_INT8 = 2,\r\n  SS_UINT8 = 3,\r\n  SS_INT16 = 4,\r\n  SS_UINT16 = 5,\r\n  SS_INT32 = 6,\r\n  SS_UINT32 = 7,\r\n  SS_BOOLEAN = 8\r\n} BuiltInDTypeId;\r\n\r\n#define SS_NUM_BUILT_IN_DTYPE          ((int)SS_BOOLEAN+1)\r\n\r\n/* Enumeration for MAT-file logging code */\r\ntypedef int DTypeId;\r\n\r\n/* Enumeration of pre-defined data types */\r\ntypedef enum {\r\n  SS_FCN_CALL = 9,\r\n  SS_INTEGER = 10,\r\n  SS_POINTER = 11,\r\n  SS_INTERNAL_DTYPE2 = 12,\r\n  SS_TIMER_UINT32_PAIR = 13,\r\n  SS_CONNECTION_TYPE = 14\r\n} PreDefinedDTypeId;\r\n\r\n#endif                                 /* BUILTIN_TYPEID_TYPES */\r\n#endif                                 /* BUILTIN_TYPEID_TYPES_H */\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * Definitions supporting external data access\r\n */\r\ntypedef int32_T chunk_T;\r\ntypedef uint32_T uchunk_T;\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long int long_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint32_T chunks[2];\r\n} int64m_T;\r\n\r\ntypedef struct {\r\n  int64m_T re;\r\n  int64m_T im;\r\n} cint64m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[2];\r\n} uint64m_T;\r\n\r\ntypedef struct {\r\n  uint64m_T re;\r\n  uint64m_T im;\r\n} cuint64m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[3];\r\n} int96m_T;\r\n\r\ntypedef struct {\r\n  int96m_T re;\r\n  int96m_T im;\r\n} cint96m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[3];\r\n} uint96m_T;\r\n\r\ntypedef struct {\r\n  uint96m_T re;\r\n  uint96m_T im;\r\n} cuint96m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[4];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[4];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[5];\r\n} int160m_T;\r\n\r\ntypedef struct {\r\n  int160m_T re;\r\n  int160m_T im;\r\n} cint160m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[5];\r\n} uint160m_T;\r\n\r\ntypedef struct {\r\n  uint160m_T re;\r\n  uint160m_T im;\r\n} cuint160m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[6];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[6];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[7];\r\n} int224m_T;\r\n\r\ntypedef struct {\r\n  int224m_T re;\r\n  int224m_T im;\r\n} cint224m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[7];\r\n} uint224m_T;\r\n\r\ntypedef struct {\r\n  uint224m_T re;\r\n  uint224m_T im;\r\n} cuint224m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[8];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[8];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[9];\r\n} int288m_T;\r\n\r\ntypedef struct {\r\n  int288m_T re;\r\n  int288m_T im;\r\n} cint288m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[9];\r\n} uint288m_T;\r\n\r\ntypedef struct {\r\n  uint288m_T re;\r\n  uint288m_T im;\r\n} cuint288m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[10];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[10];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[11];\r\n} int352m_T;\r\n\r\ntypedef struct {\r\n  int352m_T re;\r\n  int352m_T im;\r\n} cint352m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[11];\r\n} uint352m_T;\r\n\r\ntypedef struct {\r\n  uint352m_T re;\r\n  uint352m_T im;\r\n} cuint352m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[12];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[12];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[13];\r\n} int416m_T;\r\n\r\ntypedef struct {\r\n  int416m_T re;\r\n  int416m_T im;\r\n} cint416m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[13];\r\n} uint416m_T;\r\n\r\ntypedef struct {\r\n  uint416m_T re;\r\n  uint416m_T im;\r\n} cuint416m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[14];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[14];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[15];\r\n} int480m_T;\r\n\r\ntypedef struct {\r\n  int480m_T re;\r\n  int480m_T im;\r\n} cint480m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[15];\r\n} uint480m_T;\r\n\r\ntypedef struct {\r\n  uint480m_T re;\r\n  uint480m_T im;\r\n} cuint480m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[16];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[16];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[17];\r\n} int544m_T;\r\n\r\ntypedef struct {\r\n  int544m_T re;\r\n  int544m_T im;\r\n} cint544m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[17];\r\n} uint544m_T;\r\n\r\ntypedef struct {\r\n  uint544m_T re;\r\n  uint544m_T im;\r\n} cuint544m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[18];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[18];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[19];\r\n} int608m_T;\r\n\r\ntypedef struct {\r\n  int608m_T re;\r\n  int608m_T im;\r\n} cint608m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[19];\r\n} uint608m_T;\r\n\r\ntypedef struct {\r\n  uint608m_T re;\r\n  uint608m_T im;\r\n} cuint608m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[20];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[20];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[21];\r\n} int672m_T;\r\n\r\ntypedef struct {\r\n  int672m_T re;\r\n  int672m_T im;\r\n} cint672m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[21];\r\n} uint672m_T;\r\n\r\ntypedef struct {\r\n  uint672m_T re;\r\n  uint672m_T im;\r\n} cuint672m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[22];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[22];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[23];\r\n} int736m_T;\r\n\r\ntypedef struct {\r\n  int736m_T re;\r\n  int736m_T im;\r\n} cint736m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[23];\r\n} uint736m_T;\r\n\r\ntypedef struct {\r\n  uint736m_T re;\r\n  uint736m_T im;\r\n} cuint736m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[24];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[24];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[25];\r\n} int800m_T;\r\n\r\ntypedef struct {\r\n  int800m_T re;\r\n  int800m_T im;\r\n} cint800m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[25];\r\n} uint800m_T;\r\n\r\ntypedef struct {\r\n  uint800m_T re;\r\n  uint800m_T im;\r\n} cuint800m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[26];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[26];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[27];\r\n} int864m_T;\r\n\r\ntypedef struct {\r\n  int864m_T re;\r\n  int864m_T im;\r\n} cint864m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[27];\r\n} uint864m_T;\r\n\r\ntypedef struct {\r\n  uint864m_T re;\r\n  uint864m_T im;\r\n} cuint864m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[28];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[28];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[29];\r\n} int928m_T;\r\n\r\ntypedef struct {\r\n  int928m_T re;\r\n  int928m_T im;\r\n} cint928m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[29];\r\n} uint928m_T;\r\n\r\ntypedef struct {\r\n  uint928m_T re;\r\n  uint928m_T im;\r\n} cuint928m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[30];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[30];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[31];\r\n} int992m_T;\r\n\r\ntypedef struct {\r\n  int992m_T re;\r\n  int992m_T im;\r\n} cint992m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[31];\r\n} uint992m_T;\r\n\r\ntypedef struct {\r\n  uint992m_T re;\r\n  uint992m_T im;\r\n} cuint992m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[32];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[32];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[33];\r\n} int1056m_T;\r\n\r\ntypedef struct {\r\n  int1056m_T re;\r\n  int1056m_T im;\r\n} cint1056m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[33];\r\n} uint1056m_T;\r\n\r\ntypedef struct {\r\n  uint1056m_T re;\r\n  uint1056m_T im;\r\n} cuint1056m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[34];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[34];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[35];\r\n} int1120m_T;\r\n\r\ntypedef struct {\r\n  int1120m_T re;\r\n  int1120m_T im;\r\n} cint1120m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[35];\r\n} uint1120m_T;\r\n\r\ntypedef struct {\r\n  uint1120m_T re;\r\n  uint1120m_T im;\r\n} cuint1120m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[36];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[36];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[37];\r\n} int1184m_T;\r\n\r\ntypedef struct {\r\n  int1184m_T re;\r\n  int1184m_T im;\r\n} cint1184m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[37];\r\n} uint1184m_T;\r\n\r\ntypedef struct {\r\n  uint1184m_T re;\r\n  uint1184m_T im;\r\n} cuint1184m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[38];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[38];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[39];\r\n} int1248m_T;\r\n\r\ntypedef struct {\r\n  int1248m_T re;\r\n  int1248m_T im;\r\n} cint1248m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[39];\r\n} uint1248m_T;\r\n\r\ntypedef struct {\r\n  uint1248m_T re;\r\n  uint1248m_T im;\r\n} cuint1248m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[40];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[40];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[41];\r\n} int1312m_T;\r\n\r\ntypedef struct {\r\n  int1312m_T re;\r\n  int1312m_T im;\r\n} cint1312m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[41];\r\n} uint1312m_T;\r\n\r\ntypedef struct {\r\n  uint1312m_T re;\r\n  uint1312m_T im;\r\n} cuint1312m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[42];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[42];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[43];\r\n} int1376m_T;\r\n\r\ntypedef struct {\r\n  int1376m_T re;\r\n  int1376m_T im;\r\n} cint1376m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[43];\r\n} uint1376m_T;\r\n\r\ntypedef struct {\r\n  uint1376m_T re;\r\n  uint1376m_T im;\r\n} cuint1376m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[44];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[44];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[45];\r\n} int1440m_T;\r\n\r\ntypedef struct {\r\n  int1440m_T re;\r\n  int1440m_T im;\r\n} cint1440m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[45];\r\n} uint1440m_T;\r\n\r\ntypedef struct {\r\n  uint1440m_T re;\r\n  uint1440m_T im;\r\n} cuint1440m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[46];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[46];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[47];\r\n} int1504m_T;\r\n\r\ntypedef struct {\r\n  int1504m_T re;\r\n  int1504m_T im;\r\n} cint1504m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[47];\r\n} uint1504m_T;\r\n\r\ntypedef struct {\r\n  uint1504m_T re;\r\n  uint1504m_T im;\r\n} cuint1504m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[48];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[48];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[49];\r\n} int1568m_T;\r\n\r\ntypedef struct {\r\n  int1568m_T re;\r\n  int1568m_T im;\r\n} cint1568m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[49];\r\n} uint1568m_T;\r\n\r\ntypedef struct {\r\n  uint1568m_T re;\r\n  uint1568m_T im;\r\n} cuint1568m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[50];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[50];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[51];\r\n} int1632m_T;\r\n\r\ntypedef struct {\r\n  int1632m_T re;\r\n  int1632m_T im;\r\n} cint1632m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[51];\r\n} uint1632m_T;\r\n\r\ntypedef struct {\r\n  uint1632m_T re;\r\n  uint1632m_T im;\r\n} cuint1632m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[52];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[52];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[53];\r\n} int1696m_T;\r\n\r\ntypedef struct {\r\n  int1696m_T re;\r\n  int1696m_T im;\r\n} cint1696m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[53];\r\n} uint1696m_T;\r\n\r\ntypedef struct {\r\n  uint1696m_T re;\r\n  uint1696m_T im;\r\n} cuint1696m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[54];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[54];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[55];\r\n} int1760m_T;\r\n\r\ntypedef struct {\r\n  int1760m_T re;\r\n  int1760m_T im;\r\n} cint1760m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[55];\r\n} uint1760m_T;\r\n\r\ntypedef struct {\r\n  uint1760m_T re;\r\n  uint1760m_T im;\r\n} cuint1760m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[56];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[56];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[57];\r\n} int1824m_T;\r\n\r\ntypedef struct {\r\n  int1824m_T re;\r\n  int1824m_T im;\r\n} cint1824m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[57];\r\n} uint1824m_T;\r\n\r\ntypedef struct {\r\n  uint1824m_T re;\r\n  uint1824m_T im;\r\n} cuint1824m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[58];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[58];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[59];\r\n} int1888m_T;\r\n\r\ntypedef struct {\r\n  int1888m_T re;\r\n  int1888m_T im;\r\n} cint1888m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[59];\r\n} uint1888m_T;\r\n\r\ntypedef struct {\r\n  uint1888m_T re;\r\n  uint1888m_T im;\r\n} cuint1888m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[60];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[60];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[61];\r\n} int1952m_T;\r\n\r\ntypedef struct {\r\n  int1952m_T re;\r\n  int1952m_T im;\r\n} cint1952m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[61];\r\n} uint1952m_T;\r\n\r\ntypedef struct {\r\n  uint1952m_T re;\r\n  uint1952m_T im;\r\n} cuint1952m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[62];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[62];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[63];\r\n} int2016m_T;\r\n\r\ntypedef struct {\r\n  int2016m_T re;\r\n  int2016m_T im;\r\n} cint2016m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[63];\r\n} uint2016m_T;\r\n\r\ntypedef struct {\r\n  uint2016m_T re;\r\n  uint2016m_T im;\r\n} cuint2016m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[64];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[64];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetNaN.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n\r\n/* Return rtNaN needed by the generated code. */\r\nreal_T rtGetNaN(void)\r\n{\r\n  return rtNaN;\r\n}\r\n\r\n/* Return rtNaNF needed by the generated code. */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  return rtNaNF;\r\n}\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetNaN.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetNaN_h_\r\n#define rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* rtGetNaN_h_ */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rt_nonfinite.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n\r\nreal_T rtNaN = -(real_T)NAN;\r\nreal_T rtInf = (real_T)INFINITY;\r\nreal_T rtMinusInf = -(real_T)INFINITY;\r\nreal32_T rtNaNF = -(real32_T)NAN;\r\nreal32_T rtInfF = (real32_T)INFINITY;\r\nreal32_T rtMinusInfF = -(real32_T)INFINITY;\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)isinf(value);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)isinf(value);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  return (boolean_T)(isnan(value) != 0);\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  return (boolean_T)(isnan(value) != 0);\r\n}\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rt_nonfinite.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\n\r\n#endif                                 /* rt_nonfinite_h_ */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\Pamarit - Test\\OneDrive\\Documents\\MATLAB\\Controller_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"Controller\".\r\n *\r\n * Model version              : 1.63\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Sun Apr  6 12:02:03 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtmodel_h_\r\n#define rtmodel_h_\r\n#include \"Controller.h\"\r\n#define GRTINTERFACE                   0\r\n#endif                                 /* rtmodel_h_ */\r\n"},{"name":"rt_logging.c","type":"source","group":"other","path":"C:\\Program Files\\MATLAB\\R2024b\\rtw\\c\\src","tag":"","groupDisplay":"Other files","code":"/* \n *\n * Copyright 1994-2022 The MathWorks, Inc.\n *\n * File: rt_logging.c\n *\n * Abstract:\n *\tReal-Time Workshop data logging routines using circular buffers of\n *      fixed size.  The buffers are allocated at start, filled in at each\n *      major time step and finally written to a MAT-file at the end of the\n *      simulation.\n *\n *      This file handles redefining the following standard MathWorks types\n *      (see tmwtypes.h):\n *         [u]int8_T     to be int32_T (logged as Matlab [u]int32)\n *         [u]int16_T    to be int32_T (logged as Matlab [u]int32)\n *         real_T        to be real32_T (logged as Matlab single)\n *\n */\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <limits.h>\n#include <math.h>\n\n\n#if !defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)\n\n#include <stddef.h>                     /* size_t */\n#include \"rt_logging.h\"\n#ifndef IS_RAPID_ACCEL\n#include \"rt_mxclassid.h\"\n#endif\n#include \"rtw_matlogging.h\"\n\n#include \"rtwtypes.h\"\n\n#ifndef TMW_NAME_LENGTH_MAX\n#define TMW_NAME_LENGTH_MAX 64\n#endif\n#define mxMAXNAM  TMW_NAME_LENGTH_MAX\t/* maximum name length */\n#define matUNKNOWN                  0\n#define\tmatINT8                     1\n#define\tmatUINT8                    2\n#define\tmatINT16                    3\n#define\tmatUINT16                   4\n#define\tmatINT32                    5\n#define\tmatUINT32                   6\n#define\tmatFLOAT                    7\n#define\tmatDOUBLE                   9\n#define matINT64                   12\n#define matUINT64                  13\n#define\tmatMATRIX                  14\n\n#define matLOGICAL_BIT          0x200\n#define matCOMPLEX_BIT          0x800\n\n#define matKEY                 0x4D49\n#define matVERSION             0x0100\n#define matVERSION_INFO_OFFSET   124L\n\n#define matINT64_ALIGN(e)      ( ( ((unsigned)(e))+7 ) & (~7) )\n#define matTAG_SIZE            (sizeof(int32_T) << 1)\n\n#ifndef DEFAULT_BUFFER_SIZE\n#define DEFAULT_BUFFER_SIZE      1024  /* used if maxRows=0 and Tfinal=0.0    */\n#endif\n\n#define FREE(m) if (m != NULL) free(m)\n\n/* Logical definitions */\n#if (!defined(__cplusplus))\n#  ifndef false\n#   define false                       (0U)\n#  endif\n#  ifndef true\n#   define true                        (1U)\n#  endif\n#endif\n\n/*==========*\n * typedefs *\n *==========*/\n\ntypedef struct LogInfo_Tag {\n    LogVar       *t;                   /* Time log variable                   */\n    void         *x;                   /* State log variable                  */\n    int_T        ny;                   /* Length of \"y\" log variables         */\n    void         **y;                  /* Output log vars                     */\n    void         *xFinal;              /* Final state log variable            */\n\n    LogVar       *logVarsList;         /* Linked list of all LogVars          */\n    StructLogVar *structLogVarsList;   /* Linked list of all StructLogVars    */\n\n    boolean_T   haveLogVars;           /* Are logging one or more vars?       */\n} LogInfo;\n\ntypedef struct MatItem_tag {\n  int32_T    type;\n  uint32_T    nbytes;\n  const void *data;\n} MatItem;\n\ntypedef enum {\n    DATA_ITEM,\n    MATRIX_ITEM,\n    STRUCT_LOG_VAR_ITEM,\n    SIGNALS_STRUCT_ITEM\n} ItemDataKind;\n\n/*===========*\n * Constants *\n *===========*/\n\nstatic const char_T rtMemAllocError[] = \"Memory allocation error\";\n\n#define ZEROS32 \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n\n#if mxMAXNAM==32\n\n#define ZERO_PAD\n\n#elif mxMAXNAM==64\n\n#define ZERO_PAD ZEROS32\n\n#elif mxMAXNAM==128\n\n#define ZERO_PAD   ZEROS32  ZEROS32  ZEROS32\n\n#else\n\n#error \"Cannot Handle mxMAXNAM other than 32,64, and 128\"\n\n#endif\n/* field names: for variable-size signal logging */\nstatic const char_T rtStructLogVarFieldNames[] =\n                  \"time\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"signals\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nstatic const char_T rtLocalLoggingSignalsStructFieldNames[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"valueDimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"title\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"plotStyle\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nstatic const char_T rtGlobalLoggingSignalsStructFieldNames[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"valueDimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"stateName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"inReferencedModel\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n                  \n\n#define TIME_FIELD_NAME      (rtStructLogVarFieldNames[0*mxMAXNAM])\n#define SIGNALS_FIELD_NAME   (rtStructLogVarFieldNames[1*mxMAXNAM])\n#define BLOCKNAME_FIELD_NAME (rtStructLogVarFieldNames[2*mxMAXNAM])\n\n#define VALUES_FIELD_NAME    (rtLocalLoggingSignalsStructFieldNames[0*mxMAXNAM])\n#define VALUEDIMENSIONS_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[1*mxMAXNAM])\n#define DIMENSION_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[2*mxMAXNAM])\n#define LABEL_FIELD_NAME     (rtLocalLoggingSignalsStructFieldNames[3*mxMAXNAM])\n#define TITLE_FIELD_NAME     (rtLocalLoggingSignalsStructFieldNames[4*mxMAXNAM])\n#define PLOTSTYLE_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[5*mxMAXNAM])\n\n#define STATENAME_FIELD_NAME (rtGlobalLoggingSignalsStructFieldNames[5*mxMAXNAM])\n#define CROSS_MDL_REF_FIELD_NAME (rtGlobalLoggingSignalsStructFieldNames[6*mxMAXNAM])\n\n/* field names: for fixed-size signal logging */\nstatic const char_T rtLocalLoggingSignalsStructFieldNames_noValDims[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"title\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"plotStyle\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\nstatic const char_T rtGlobalLoggingSignalsStructFieldNames_noValDims[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"stateName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"inReferencedModel\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nextern real_T rtInf; /* declared by rt_nonfinite.c */\nextern real_T rtNaN;\nextern real32_T rtNaNF;\n\n/*================*\n * Local routines *\n *================*/\n\n/* Function: rt_GetSizeofDataType ==============================================\n * Abstract:\n *      Get the element size in bytes given the data type id.\n */\nstatic size_t rt_GetSizeofDataType(BuiltInDTypeId dTypeID)\n{\n    size_t elSz = 0; /* unknown */\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n        elSz = sizeof(real_T);\n        break;\n      case SS_SINGLE:\n        elSz = sizeof(real32_T);\n        break;\n      case SS_INT8:\n        elSz = sizeof(int8_T);\n        break;\n      case SS_UINT8:\n        elSz = sizeof(uint8_T);\n        break;\n      case SS_INT16:\n        elSz = sizeof(int16_T);\n        break;\n      case SS_UINT16:\n        elSz = sizeof(uint16_T);\n        break;\n      case SS_INT32:\n        elSz = sizeof(int32_T);\n        break;\n      case SS_UINT32:\n        elSz = sizeof(uint32_T);\n        break;\n      case SS_BOOLEAN:\n        elSz = sizeof(boolean_T);\n        break;\n    }\n    return(elSz);\n\n} /* end rt_GetSizeofDataType */\n\n\n/* Function: rt_GetSizeofComplexType ===========================================\n * Abstract:\n *      Get the element size in bytes given the data type id.\n */\nstatic size_t rt_GetSizeofComplexType(BuiltInDTypeId dTypeID)\n{\n    size_t elSz = 2*rt_GetSizeofDataType(dTypeID);\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n      #ifdef CREAL_T\n        elSz = sizeof(creal_T);\n      #endif\n        break;\n      case SS_SINGLE:\n      #ifdef CREAL_T\n        elSz = sizeof(creal32_T);\n      #endif\n        break;\n      case SS_INT8:\n      #ifdef CINT8_T\n        elSz = sizeof(cint8_T);\n      #endif\n        break;\n      case SS_UINT8:\n      #ifdef CUINT8_T\n        elSz = sizeof(cuint8_T);\n      #endif\n        break;\n      case SS_INT16:\n      #ifdef CINT16_T\n        elSz = sizeof(cint16_T);\n      #endif\n        break;\n      case SS_UINT16:\n      #ifdef CUINT16_T\n        elSz = sizeof(cuint16_T);\n      #endif\n        break;\n      case SS_INT32:\n      #ifdef CINT32_T\n        elSz = sizeof(cint32_T);\n      #endif\n        break;\n      case SS_UINT32:\n      #ifdef CUINT32_T\n        elSz = sizeof(cuint32_T);\n      #endif\n        break;\n      case SS_BOOLEAN:\n        elSz = sizeof(boolean_T);\n        break;\n    }\n\n    return(elSz);\n\n} /* end rt_GetSizeofComplexType */\n\n\n/* Function: rt_GetDataTypeConvertInfo =========================================\n * Abstract:\n *      Directly copy if pointer to structure is non-NULL, otherwise set to\n *      default.\n */\nstatic RTWLogDataTypeConvert rt_GetDataTypeConvertInfo(\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo,\n    BuiltInDTypeId dTypeID\n    )\n{\n    RTWLogDataTypeConvert dataTypeConvertInfoCopy;\n\n    if (pDataTypeConvertInfo == NULL) {\n        dataTypeConvertInfoCopy.conversionNeeded = 0;\n        dataTypeConvertInfoCopy.dataTypeIdLoggingTo = dTypeID;\n        dataTypeConvertInfoCopy.dataTypeIdOriginal  = (DTypeId)dTypeID;\n        dataTypeConvertInfoCopy.bitsPerChunk = 0;\n        dataTypeConvertInfoCopy.numOfChunk = 0;\n        dataTypeConvertInfoCopy.isSigned = 0;\n        dataTypeConvertInfoCopy.fracSlope = 1.0;\n        dataTypeConvertInfoCopy.fixedExp = 0;\n        dataTypeConvertInfoCopy.bias = 0.0;\n    } else {\n        dataTypeConvertInfoCopy = *pDataTypeConvertInfo;\n    }\n\n    return dataTypeConvertInfoCopy;\n\n} /* end rt_GetDataTypeConvertInfo */\n\n\n/* Function: rt_GetDblValueFromOverSizedData ===================================\n * Abstract:\n */\nstatic double rt_GetDblValueFromOverSizedData(\n    const void *pVoid, \n    int bitsPerChunk, \n    int numOfChunk,\n    unsigned int isSigned, \n    double fracSlope, \n    int fixedExp, \n    double bias)\n{\n    double retValue = 0;\n\n    double *dblValue = (double *) calloc(numOfChunk, sizeof(double));\n\n    int i;    \n    double isSignedNeg;\n\n    if(isSigned) {\n        const chunk_T *pData = (const chunk_T *) (pVoid);\n        for (i = 0; i <numOfChunk; i++) {\n            dblValue[i] = (double)(pData[i]);\n        }\n    } else  {\n        const uchunk_T *pData = (const uchunk_T *) (pVoid);\n        for (i = 0; i <numOfChunk; i++) {\n            dblValue[i] = (double)(pData[i]);\n        }\n    }\n\n    /* \n       Assuming multi chunks b_n ... b_2 b_1 b_0, and the length of each chunk is N.\n       Suppose b_i is the i-th chunk's value.\n       Then for unsigned data or data with one chunk: we have\n       retValue = b_n * 2^(n*N) + ... + b_1 * 2^N + b_0 * 2^0;\n       But for signed data, we have\n       retValue = b_n * 2^(n*N) + ... + b_1 * 2^N + b_0 * 2^0+ (b_0<0) * 2^N + \n       ... (b_(n-1) <0) * 2^(n*N) \n       = (b_n + (b_(n-1)<0)) * 2^(n*N) +... + (b_1 + (b_0<0)) * 2^N + b_0 * 2^0;\n       Together:\n       retValue = \n       (b_n + isSigned * (b_(n-1)<0)) * 2^(n*N) +... + (b_1 + isSigned * (b_0<0)) * 2^N + b_0 * 2^0;\n    */\n\n    retValue = dblValue[numOfChunk - 1];\n    \n    for(i = numOfChunk - 1; i > 0; i--) {\n        isSignedNeg = dblValue[i - 1] < 0 ? (double)isSigned : 0;\n        retValue = retValue + isSignedNeg;\n\n        retValue = ldexp(retValue, bitsPerChunk)+ dblValue[i-1];\n    }\n    retValue = ldexp( fracSlope * retValue, fixedExp ) + bias;\n\n    FREE(dblValue);\n    return (retValue);\n\n} /* end rt_GetDblValueFromOverSizedData */\n\n\n/* Function: rt_GetNonBoolMxIdFromDTypeId ======================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nstatic mxClassID rt_GetNonBoolMxIdFromDTypeId(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n        mxID = (sizeof(real_T)==4? mxSINGLE_CLASS: mxDOUBLE_CLASS);\n        break;\n      case SS_SINGLE:\n        mxID = mxSINGLE_CLASS;\n        break;\n      case SS_INT8:\n        switch (sizeof(int8_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps int8_T into 32-bits\" */\n            mxID = mxINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps int8_T into 16-bits\" */\n            mxID = mxINT16_CLASS;\n            break;\n          case 1:\n            mxID = mxINT8_CLASS;\n            break;\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown data type ID\" */\n            mxID = mxUNKNOWN_CLASS;\n            break;\n        }\n        break;\n      case SS_UINT8:\n        switch (sizeof(uint8_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps uint8_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps uint8_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          case 1:\n            mxID = mxUINT8_CLASS;\n            break;\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown data type ID\" */\n            mxID = mxUNKNOWN_CLASS;\n            break;\n        }\n        break;\n      case SS_INT16:\n        mxID = (sizeof(int16_T)==4? mxINT32_CLASS: mxINT16_CLASS);\n        break;\n      case SS_UINT16:\n        mxID = (sizeof(uint16_T)==4? mxUINT32_CLASS: mxUINT16_CLASS);\n        break;\n      case SS_INT32:\n        mxID = mxINT32_CLASS;\n        break;\n      case SS_UINT32:\n        mxID = mxUINT32_CLASS;\n        break;\n        /*case SS_BOOLEAN:\n          mxID = (sizeof(boolean_T)==4? mxUINT32_CLASS: mxLOGICAL_CLASS);\n          break;*/\n      default:\n        mxID = mxUNKNOWN_CLASS;\n        break;\n    }\n\n    return(mxID);\n\n} /* end rt_GetNonBoolMxIdFromDTypeId */\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_GetMxIdFromDTypeIdForRSim ======================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nmxClassID rt_GetMxIdFromDTypeIdForRSim(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    if (dTypeID == SS_BOOLEAN) {\n        switch (sizeof(boolean_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          default:\n            mxID = mxLOGICAL_CLASS;\n            break;\n        }\n    } else {\n        mxID = rt_GetNonBoolMxIdFromDTypeId(dTypeID);\n    }\n\n    return(mxID);\n\n} /* end rt_GetMxIdFromDTypeIdForRSim */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_GetMxIdFromDTypeId =============================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nmxClassID rt_GetMxIdFromDTypeId(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    if (dTypeID == SS_BOOLEAN) {\n        switch (sizeof(boolean_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          default:\n            mxID = mxUINT8_CLASS;\n            break;\n        }\n    } else {\n        mxID = rt_GetNonBoolMxIdFromDTypeId(dTypeID);\n    }\n    return(mxID);\n\n} /* end rt_GetMxIdFromDTypeId */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n/* Function: rt_GetMatIdFromMxId ===============================================\n * Abstract:\n *      Get the MatId given the mxClassID.\n */\nstatic int_T rt_GetMatIdFromMxId(mxClassID mxID)\n{\n    int_T matID;\n\n    switch (mxID) {\n      case mxCELL_CLASS:\n      case mxSTRUCT_CLASS:\n      case mxOBJECT_CLASS:\n        matID = -1;\n        break;\n      case mxCHAR_CLASS:\n        matID = matUINT16;\n        break;\n      case mxDOUBLE_CLASS:\n        matID = matDOUBLE;\n        break;\n      case mxSINGLE_CLASS:\n        matID = matFLOAT;\n        break;\n      case mxINT8_CLASS:\n        matID = matINT8;\n        break;\n      case mxUINT8_CLASS:\n        matID = matUINT8;\n        break;\n      case mxINT16_CLASS:\n        matID = matINT16;\n        break;\n      case mxUINT16_CLASS:\n        matID = matUINT16;\n        break;\n      case mxINT32_CLASS:\n        matID = matINT32;\n        break;\n      case mxUINT32_CLASS:\n        matID = matUINT32;\n        break;\n      case mxINT64_CLASS:\n        matID = matINT64;\n        break;\n      case mxUINT64_CLASS:\n        matID = matUINT64;\n        break;\n      default:\n        matID = matUNKNOWN;\n        break;\n    }\n    return(matID);\n\n} /* end rt_GetMatIdFromMxId */\n\n\n/* Forward declaration */\nstatic int_T rt_WriteItemToMatFile(FILE         *fp,\n                                   MatItem      *pItem,\n                                   ItemDataKind dataKind);\n\n\n/* Function: rt_ProcessMatItem =================================================\n * Abstract:\n *      This routine along with rt_WriteItemToMatFile() write out a specified\n *      mat-item the .mat file. Note that if the input argument\n *          cmd == 0, then this function just calculates the size of the item.\n *          cmd <> 0, this function writes the mat-item to the file.\n *      Return values is\n *           -1 : coding/logic error\n *            0 : upon success\n *          > 0 : upon write failure (1)\n */\nstatic int_T rt_ProcessMatItem(FILE         *fp,\n                               MatItem      *pItem,\n                               ItemDataKind itemKind,\n                               int_T        cmd)\n{\n    mxClassID    mxID          = mxUNKNOWN_CLASS;\n    uint32_T     arrayFlags[2] = {0, 0};\n    int32_T      *dims         = NULL;\n    int32_T      _dims[3]      = {0, 0, 0};\n    int32_T      nDims         = 2;\n    int32_T      nBytesInItem  = 0;\n    const char_T *itemName;\n    MatItem      item;\n    int_T        retStat       = 0;\n\n    switch (itemKind) {\n      case DATA_ITEM: {\n          (void)fprintf(stderr,\"Unexpected itemKind = DATA_ITEM in \"\n                               \"rt_ProcessMatItem @A\\n\");\n          retStat = -1;\n          goto EXIT_POINT;\n      }\n      case MATRIX_ITEM: {\n          const MatrixData *var = (const MatrixData *) pItem->data;\n\n          mxID           = var->mxID;\n          arrayFlags[0]  = mxID;\n          arrayFlags[0] |= var->logical;\n          arrayFlags[0] |= var->complex;\n          if (var->nDims < 2) {\n              dims         = _dims;\n              dims[0]      = var->nRows;\n              dims[1]      = var->nCols;\n              nDims        = 2;\n          } else {\n              int32_T k;\n              dims = (int32_T*)malloc(sizeof(int32_T)*(var->nDims+1));\n              for (k = 0; k < var->nDims; k++) {\n                  dims[k] = var->dims[k];\n              }\n              dims[var->nDims] = var->nRows;\n              nDims = var->nDims + 1;\n          }\n          itemName = var->name;\n          break;\n      }\n      case STRUCT_LOG_VAR_ITEM: {\n          const StructLogVar *var = (const StructLogVar *) pItem->data;\n\n          mxID          = mxSTRUCT_CLASS;\n          arrayFlags[0] = mxID;\n          dims          = _dims;\n          dims[0]       = 1;\n          dims[1]       = 1;\n          itemName      = var->name;\n          break;\n      }\n      case SIGNALS_STRUCT_ITEM: {\n          const SignalsStruct *var = (const SignalsStruct *) pItem->data;\n\n          mxID          = mxSTRUCT_CLASS;\n          arrayFlags[0] = mxID;\n          dims          = _dims;\n          dims[0]       = 1;\n          dims[1]       = var->numSignals;\n          itemName      = &SIGNALS_FIELD_NAME;\n          break;\n      }\n      default:\n        (void)fprintf(stderr,\"Unexpected itemKind=%d in rt_ProcessMatItem @B\\n\",\n                      itemKind);\n        retStat = -1;\n        goto EXIT_POINT;\n    }\n\n    /* array flags */\n    item.nbytes = 2*sizeof(uint32_T);\n    if (cmd) {\n        item.type = matUINT32;\n        item.data = arrayFlags;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;\n        }\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        nBytesInItem += matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n    /* dimensions */\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    item.nbytes = nDims*sizeof(int32_T);\n    if (cmd) {\n        item.type = matINT32;\n        item.data = dims;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;            \n        }\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        nBytesInItem += matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n    /* name */\n    item.nbytes = (int32_T)strlen(itemName);\n    if (cmd) {\n        item.type = matINT8;\n        item.data = (const char_T*) itemName;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;\n        }\n    } else {\n        nBytesInItem += (item.nbytes <= 4) ? /*LINTED E_CAST_INT_TO_SMALL_INT*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n\n    if (itemKind == MATRIX_ITEM) {\n        const MatrixData *var   = (const MatrixData*) pItem->data;\n        int_T            matID  = rt_GetMatIdFromMxId(mxID);\n        size_t           elSize = var->elSize;\n\n        /* data */\n        item.nbytes = (int32_T)(var->nRows * var->nCols * elSize);\n        if (cmd) {\n            item.type = matID;\n            item.data = var->re;\n            if (rt_WriteItemToMatFile(fp, &item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n        } else {\n            nBytesInItem += (item.nbytes <= 4) ? /*LINTED*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n        }\n        /* imaginary part */\n        if (var->complex) {\n            item.nbytes = (int32_T)(var->nRows * var->nCols * elSize);\n            if (cmd) {\n                item.type = matID;\n                item.data = var->im;\n                if (rt_WriteItemToMatFile(fp, &item, DATA_ITEM)) {\n                    retStat = 1;\n                    goto EXIT_POINT;\n                }\n            } else {\n                nBytesInItem += (item.nbytes <= 4) ? /*LINTED*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n            }\n        }\n    } else {  /* some type of structure item */\n        const char_T *fieldNames;\n        int_T        sizeofFieldNames;\n\n        /* field names */\n        switch (itemKind) {\n          case STRUCT_LOG_VAR_ITEM: {\n              const StructLogVar *var = (const StructLogVar *) pItem->data;\n              fieldNames        = rtStructLogVarFieldNames;\n              sizeofFieldNames  = var->numActiveFields * mxMAXNAM;\n              break;\n          }\n          case SIGNALS_STRUCT_ITEM: {\n              const SignalsStruct *var = (const SignalsStruct *) pItem->data;\n              fieldNames        = var->fieldNames;\n              sizeofFieldNames  = var->numActiveFields * mxMAXNAM;\n              break;\n          }\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown itemKind\" */\n            (void)fprintf(stderr, \"Unexpected itemKind=%d in \"\n                          \"rt_ProcessMatItem @C\\n\", itemKind);\n            retStat = -1;\n            goto EXIT_POINT;\n        }\n\n        /* write field names */\n        if (cmd) {\n            int32_T tmpInt = mxMAXNAM;\n\n            item.nbytes = sizeof(int32_T);\n            item.type   = matINT32;\n            item.data   = &tmpInt;\n            if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n\n            item.nbytes = sizeofFieldNames;\n            item.type   = matINT8;\n            item.data   = (const char_T*) fieldNames;\n            if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n        } else {\n            /*LINTED E_CAST_INT_TO_SMALL_INT*/\n            nBytesInItem += matINT64_ALIGN( matTAG_SIZE + matTAG_SIZE +\n                                            sizeofFieldNames );\n        }\n\n        /* process each field of the structure */\n        switch (itemKind) {\n          case STRUCT_LOG_VAR_ITEM: {\n              const StructLogVar *var = pItem->data;\n\n              /* time */\n              {\n                  const void *data = var->time;\n\n                  if (var->logTime) { /* time is a LogVar, get the MatrixData */\n                      data = &(((const LogVar*) (var->time))->data);\n                  }\n\n                  item.type = matMATRIX;\n                  item.data = data;\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp,&item,MATRIX_ITEM)){\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM,0)){\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n              }\n\n              /* signals */\n              item.type = matMATRIX;\n              item.data = &(var->signals);\n              if (cmd) {\n                  if (rt_WriteItemToMatFile(fp,&item,SIGNALS_STRUCT_ITEM)) {\n                      retStat = 1;\n                      goto EXIT_POINT;\n                  }\n              } else {\n                  if (rt_ProcessMatItem(fp, &item, SIGNALS_STRUCT_ITEM,0)) {\n                      retStat = 1;\n                      goto EXIT_POINT;\n                  }\n                  nBytesInItem += item.nbytes + matTAG_SIZE;\n              }\n\n              /* block name */\n              if (var->blockName != NULL) {\n                  item.type = matMATRIX;\n                  item.data = var->blockName;\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n              }\n              break;\n          }\n          case SIGNALS_STRUCT_ITEM: {\n              const SignalsStruct *var        = pItem->data;\n              const LogVar        *values     = var->values;\n              const MatrixData    *dimensions = var->dimensions;\n              const MatrixData    *labels     = var->labels;\n              const MatrixData    *plotStyles = var->plotStyles;\n              const MatrixData    *titles     = var->titles;\n              const MatrixData    *blockNames = var->blockNames;\n              const MatrixData    *stateNames = var->stateNames;\n              const MatrixData    *crossMdlRef = var->crossMdlRef;\n              const boolean_T logValueDimensions = var->logValueDimensions;\n              int_T               i;\n\n              for (i = 0; i < var->numSignals; i++) {\n                  /* values */\n                  item.type = matMATRIX;\n                  item.data = &(values->data);\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n\n                  if(logValueDimensions)\n                  {\n                      /* valueDimensions */\n                      /* Since the functions rt_WriteItemToMatFile and \n                         rt_ProcessMatItem deal with MatrixData, \n                         convert valDims to tempData, and fill up the\n                         necessary fields.\n                      */\n                      MatrixData  tempData;\n                      (void)memcpy(tempData.name, &VALUEDIMENSIONS_FIELD_NAME, mxMAXNAM);\n                      tempData.nRows = values->valDims->nRows;\n                      tempData.nCols = values->valDims->nCols;\n                      tempData.nDims = 1;\n                      tempData._dims[0] = values->valDims->nCols;\n                      tempData.re = values->valDims->dimsData;\n                      tempData.im = NULL;\n                      tempData.dTypeID = SS_DOUBLE;\n                      tempData.elSize =  sizeof(real_T);\n                      tempData.mxID = mxDOUBLE_CLASS;\n                      tempData.logical = 0;\n                      tempData.complex = 0;\n                      tempData.frameData = 0;\n                      tempData.frameSize = 1;\n\n                      item.type = matMATRIX;                    \n                      item.data = &tempData; /*values->valDims;*/\n\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  values = values->next;\n\n                  /* dimensions */\n                  if (dimensions != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(dimensions[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp,&item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n\n                  /* label */\n                  item.type = matMATRIX;\n                  item.data = &(labels[i]);\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n                  /* title */\n                  if (titles != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(titles[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* plot style */\n                  if (plotStyles != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(plotStyles[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp,&item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* block name */\n                  if (blockNames != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(blockNames[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* state name */\n                  if (stateNames != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(stateNames[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* crossMdlRef */\n                  if (crossMdlRef != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(crossMdlRef[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n              } /* for i=1:numSignals */\n              break;\n          }\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown itemKind\" */\n            (void)fprintf(stderr, \"Unexpected itemKind=%d in \"\n                          \"rt_ProcessMatItem @D\\n\", itemKind);\n            retStat = -1;\n            goto EXIT_POINT;\n        }\n    } /* end struct item */\n\n    if (!cmd) {\n        pItem->nbytes = nBytesInItem;\n    }\n\n  EXIT_POINT:\n    if (dims != _dims) {\n        FREE(dims);\n    }\n    return(retStat);\n\n} /* end rt_ProcessMatItem */\n\n\n/* Function: rt_WriteItemToMatFile =============================================\n * Abstract:\n *      Entry function for writing out a mat item to the mat file.\n *\n *      Return values is\n *          == 0 : upon success\n *          <> 0 : upon failure\n */\nstatic int_T rt_WriteItemToMatFile(FILE         *fp,\n                                   MatItem      *pItem,\n                                   ItemDataKind itemKind)\n{\n    /* Determine the item size */\n    if (pItem->type == matMATRIX) {\n        if (rt_ProcessMatItem(fp, pItem, itemKind, 0)) return(1);\n    }\n\n    /* Write the item tag and data */\n    if (pItem->nbytes > 4) {\n        int32_T nAlignBytes;\n\n        if (fwrite(pItem, 1, matTAG_SIZE, fp) != matTAG_SIZE) return(1);\n\n        if (pItem->type == matMATRIX) {\n            if (rt_ProcessMatItem(fp, pItem, itemKind, 1)) return(1);\n        } else {\n            if ( fwrite(pItem->data, 1, pItem->nbytes, fp) !=\n                                                    ((size_t) pItem->nbytes) ) {\n                return(1);\n            }\n        }\n\n        /* Add offset for 8-byte alignment */\n        nAlignBytes = matINT64_ALIGN(pItem->nbytes) - pItem->nbytes;\n        if (nAlignBytes > 0) {\n            int pad[2] = {0, 0};\n            if ( fwrite(pad,1,nAlignBytes,fp) != ((size_t) nAlignBytes) ) {\n                return(1);\n            }\n        }\n    } else {\n        MatItem item = {0, 0, NULL};\n        item.type = ((uint32_T)(pItem->type))|(((uint32_T)(pItem->nbytes))<<16);\n        (void)memcpy(&item.nbytes, pItem->data, pItem->nbytes);\n        if (fwrite(&item, 1, matTAG_SIZE, fp) != matTAG_SIZE) return(1);\n    }\n\n    return(0);\n\n} /* end rt_WriteItemToMatFile */\n\n\n/* Function: rt_WriteMat5FileHeader ============================================\n * Abstract:\n *      Function to write the mat file header.\n *      Return values is\n *          == 0 : upon success\n *          <> 0 : upon failure\n */\nstatic int_T rt_WriteMat5FileHeader(FILE *fp)\n{\n    int_T        nbytes;\n    int_T        nspaces;\n    int_T        i, n;\n    unsigned short ver[2];\n    char_T       spaces[16];\n    const char_T *matversion = \"MATLAB 5.0 MAT-file\";\n\n    (void)memset(spaces, ' ', sizeof(spaces));\n\n    n = (int_T)strlen(matversion);\n    nbytes = (int_T)fwrite(matversion, 1, n, fp);\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    nspaces = matVERSION_INFO_OFFSET - nbytes;\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    n = nspaces % sizeof(spaces);\n    nbytes += (int_T)fwrite(spaces, 1, n, fp);\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    n = nspaces / sizeof(spaces);\n    for (i = 0; i < n; ++i) {\n        nbytes += (int_T)fwrite(spaces, 1, sizeof(spaces), fp);\n    }\n    if (nbytes == matVERSION_INFO_OFFSET) {\n        ver[0] = matVERSION;\n        ver[1] = matKEY;\n        nbytes += (int_T)fwrite(ver, 1, sizeof(ver), fp);\n    }\n    return(nbytes != matVERSION_INFO_OFFSET + sizeof(ver));\n\n} /* end rt_WriteMat5FileHeader */\n\n\n/* Function: rt_FixupLogVar ====================================================\n * Abstract:\n *\tMake the logged variable suitable for MATLAB.\n */\nstatic const char_T *rt_FixupLogVar(LogVar *var,int verbose)\n{\n    int_T  nCols   = var->data.nCols;\n    int_T  maxRows = var->data.nRows;\n    int_T  nDims   = var->data.nDims;\n    size_t elSize  = var->data.elSize;\n    int_T  nRows   = (var->wrapped ?  maxRows : var->rowIdx);\n\n    var->nDataPoints = var->rowIdx + var->wrapped * maxRows;\n\n    if (var->wrapped > 1 || (var->wrapped == 1 && var->rowIdx != 0)) {\n        /*\n         * Warn the user the circular buffer has wrapped, implying that\n         * some data has been lost.\n         */\n        if( verbose) {\n            (void)fprintf(stdout,\n                          \"*** Log variable %s has wrapped %d times\\n\"\n                          \"    using a circular buffer of size %d\\n\",\n                          var->data.name, var->wrapped, var->data.nRows);\n        }\n        if (var->usingDefaultBufSize) {\n            /*\n             * If wrapping occurred using the default buffer size,\n             * let the user know what size buffer to use in the\n             * future to avoid wrapping.  If the default buffer\n             * size was not used, the user has no control to specify\n             * the correct value.  Wrapping may occur when not using\n             * the default buffer if we allocated too small a buffer\n             * size for this logvar.  One common case is a toWorkspace\n             * block inside of an iterative subsystem - we can not take\n             * the number of iterations into account (they may be\n             * variable) when allocating the buffer.  In this case,\n             * just warn the buffer wrapped and don't tell user they\n             * can override the buffer size.\n             */\n            if( verbose ) {\n                (void)fprintf(stdout,\n                              \"*** To avoid wrapping, explicitly specify a\\n\"\n                              \"    buffer size of %d in your Simulink model\\n\"\n                              \"    by adding OPTS=\\\"-DDEFAULT_BUFFER_SIZE=%d\\\"\\n\"\n                              \"    as an argument to the ConfigSet MakeCommand\\n\"\n                              \"    parameter\\n\",\n                              var->nDataPoints, var->nDataPoints);\n            }\n        }\n    }\n\n    if (nDims < 2 && nCols > 1) {  /* Transpose? */\n        /* Don't need to transpose valueDimensions */\n        int_T  nEl    = nRows*nCols;\n        char   *src   = var->data.re;\n        char   *pmT;\n        int_T  k;\n\n        /**********************************\n         * If memory cannot be allocated, *\n         * write to a temporary buffer    *\n         **********************************/\n        if ((pmT = malloc(nEl*elSize)) == NULL) {\n            FILE  *fptr;\n            char  fName[mxMAXNAM+13];\n\n            (void)sprintf(fName, \"%s%s\", var->data.name, \"_rtw_tmw.tmw\");\n            if ((fptr=fopen(fName,\"w+b\")) == NULL) {\n                (void)fprintf(stderr,\"*** Error opening %s\",fName);\n                return(\"unable to open data file\\n\");\n            }\n\n            /****************************\n             * Write the data to a file *\n             ****************************/\n            for (k=0; k<nEl; k++) {\n                int_T kT   = nCols*(k%nRows) + (k/nRows);\n                char  *dst = src + kT*elSize;\n                (void)fwrite(dst, elSize, 1, fptr);\n            }\n            if (var->data.complex) {\n                char *pmiT = var->data.re;\n                src  = var->data.im;\n                for (k=0; k<nEl; k++) {\n                    int_T kT   = nRows*(k%nCols) + (k/nCols);\n                    char  *dst = pmiT + kT*elSize;\n                    (void)memcpy(dst, src, elSize);\n                    src += elSize;\n                }\n                var->data.re = var->data.im;\n                var->data.im = pmiT;\n            }\n\n            /*******************************\n             * Read the data from the file *\n             *******************************/\n            (void)rewind(fptr);\n            (void)fread(var->data.re, elSize, nEl, fptr);\n            (void)fclose(fptr);\n            (void)remove(fName);\n        } else {\n            for (k=0; k<nEl; k++) {\n                int_T kT   = nRows*(k%nCols) + (k/nCols);\n                char  *dst = pmT + kT*elSize;\n                (void)memcpy(dst, src, elSize);\n                src += elSize;\n            }\n            if (var->data.complex) {\n                char *pmiT = var->data.re;\n                src  = var->data.im;\n                for (k=0; k<nEl; k++) {\n                    int_T kT   = nRows*(k%nCols) + (k/nCols);\n                    char  *dst = pmiT + kT*elSize;\n                    (void)memcpy(dst, src, elSize);\n                    src += elSize;\n                }\n                var->data.re = var->data.im;\n                var->data.im = pmiT;\n            }\n            FREE(var->data.re);\n            var->data.re = pmT;\n        }\n    } /* Transpose? */\n\n    if (var->wrapped > 0 && var->rowIdx != 0 ) {  /* Rotate? */\n        char_T *buffer    = var->data.re;\n        int_T  done       = 0; /* done: 0 (1) rotate real (imag) part. */\n\n        do {\n            char_T *col       = buffer;\n            int_T  rowOffset  = (int_T)((nDims == 1) ? (elSize) : (elSize * nCols));\n            int_T  colOffset  = (int_T)((nDims == 1)?  (nRows*elSize) : elSize);\n            int_T  zeroIdx    = var->rowIdx;\n            int_T  j;\n\n            for (j = 0 ; j < nCols; ++j, col += colOffset) {\n                int_T   swapCount;\n                int_T   srcIdx;\n                int_T   dstIdx;\n                int_T   tmpIdx;\n                MatReal tmp;\n\n                for (tmpIdx=0, swapCount=0; swapCount < nRows; tmpIdx++) {\n                    (void)memcpy(&tmp, col + tmpIdx*rowOffset, elSize);\n\n                    dstIdx=tmpIdx; \n                    srcIdx = ((dstIdx + zeroIdx) % nRows);\n                    while (srcIdx != tmpIdx) {\n                        (void)memcpy(col + dstIdx*rowOffset,\n                                     col + srcIdx*rowOffset,\n                                     elSize);\n                        ++swapCount;\n                        dstIdx = srcIdx;\n                        srcIdx = ((dstIdx + zeroIdx) % nRows);\n                        \n                    }\n                    (void)memcpy(col + dstIdx*rowOffset, &tmp, elSize);\n                    ++swapCount;\n                }\n            }\n            done ++;\n            /* need to rotate the imaginary part */\n        } while ((done == 1) && ((buffer = var->data.im) != NULL));\n\n        var->rowIdx = 0;\n    } /* Rotate? */\n\n    /*\n     * We might have allocated more number of rows than the number of data\n     * points that have been logged, in which case set nRows to nDataPoints\n     * so that only these values get saved.\n     */\n    if (var->nDataPoints < var->data.nRows) {\n        var->data.nRows = var->nDataPoints;\n        if(var->valDims != NULL){\n            size_t elSizeValDims = sizeof(real_T);\n            int_T  k;\n            real_T *dimsData = var->valDims->dimsData + nRows;\n            /* \n               Keep nRows of values and that of valueDimensions consistent \n               for variable-size signals.\n            */\n            var->valDims->nRows = var->data.nRows;\n            /*\n               Also need to move data when shrinking the array size,\n               because valueDimensions data is stored in array format. \n               e.g. maxRows = 4; nRows = 2; nDims = 3;\n               Before fixing up the logVar, the locations of data are as below:\n               (x, y, z -- useful data / o -- junk)\n               a[0] = x    a[4] = y    a[8] = z\n               a[1] = x    a[5] = y    a[9] = z\n               a[2] = o    a[6] = o    a[10]= o\n               a[3] = o    a[7] = o    a[11]= o\n               After fixing up the logVar, we want the data to be stored as:\n               a[0] = x    a[4] = z    a[8] = o\n               a[1] = x    a[5] = z    a[9] = o\n               a[2] = y    a[6] = o    a[10]= o\n               a[3] = y    a[7] = o    a[11]= o\n            */\n            for(k = 1; k < nDims; k++){\n                (void) memmove(dimsData, \n                              var->valDims->dimsData + k*maxRows,\n                              elSizeValDims * nRows);\n                dimsData += nRows;\n            }\n        }\n    }\n    return(NULL);\n\n} /* end rt_FixupLogVar */\n\n\n/* Function: rt_LoadModifiedLogVarName =========================================\n * Abstract:\n *      The name of the logged variable is obtained from the input argument\n *      varName and the nameModifier which is obtained from the simstruct. If\n *      the nameModifier begins with an '_', then nameModifier is post-pended to\n *      varName to obtain the name of the logged variable. If the first\n *      character does not begin with an '_', then the nameModifier is\n *      pre-pended to varName.\n *\n * Examples:\n *     a)  varName = \"tout\" & nameModifier = \"_rt\"  => logVarName = \"tout_rt\"\n *     b)  varName = \"tout\" & nameModifier = \"rt_\"  => logVarName = \"rt_tout\"\n *     c)  varName = \"tout\" & nameModifier = \"none\" => logVarName = \"tout\"\n */\nstatic void rt_LoadModifiedLogVarName(const RTWLogInfo *li,         /* in  */\n                                      const char       *varName,    /* in  */\n                                      char             *logVarName) /* out */\n{\n    int_T        nameLen;\n    const char_T *nameModifier = rtliGetLogVarNameModifier(li);\n\n    if (nameModifier != NULL && strcmp(nameModifier,\"none\")==0) {\n        nameModifier = NULL;\n    }\n\n    logVarName[mxMAXNAM-1] = '\\0';\n    if (nameModifier == NULL) {\n        (void)strncpy(logVarName, varName, mxMAXNAM-1);\n    } else if (nameModifier[0] == '_') {\n        (void)strncpy(logVarName, varName, mxMAXNAM-1);\n        nameLen = (int_T)strlen(logVarName);\n        (void)strncat(logVarName, nameModifier, (size_t)mxMAXNAM-1-nameLen);\n    } else {\n        (void)strncpy(logVarName, nameModifier, mxMAXNAM-1);\n        nameLen = (int_T)strlen(logVarName);\n        (void)strncat(logVarName, varName, (size_t)mxMAXNAM-1-nameLen);\n    }\n\n} /* end rt_LoadModifiedLogVarName */\n\n\n/* Function: rt_GetActualDTypeID ===============================================\n * Abstract:\n *\tGiven a built-in data type id, return the actual data type id.\n *\tThe only time these are different is when real_T has been mapped\n *\tto a single.\n */\n#if defined(_MSC_VER)\n #pragma warning(push)\n #pragma warning(disable: 4127)\n#endif\nstatic BuiltInDTypeId rt_GetActualDTypeID(BuiltInDTypeId dTypeID)\n{\n    /*LINTED E_FALSE_LOGICAL_EXPR*/\n    if (dTypeID == SS_DOUBLE && sizeof(real_T) != 8) {     /* polyspace DEFECT:DEAD_CODE \n                                                              [Not a defect:Unset] \n                                                              \"Needed for when real_T has been \n                                                              mapped to a single\" */\n        return(SS_SINGLE);\n    } else {\n        return(dTypeID);\n    }\n\n} /* end rt_GetActualDTypeID */\n#if defined(_MSC_VER)\n #pragma warning(pop)\n#endif\n\n\n/* Function: rt_DestroyLogVar ==================================================\n * Abstract:\n *      Destroy the log var linked list.\n */\nstatic void rt_DestroyLogVar(LogVar *head)\n{\n    while(head) {\n        LogVar *var = head;\n        head = var->next;\n        FREE(var->data.re);\n        FREE(var->data.im);\n        if (var->data.dims != var->data._dims) {\n            FREE(var->data.dims);\n        }\n        /* free valDims if necessary */\n        if(var->valDims != NULL) {\n            FREE(var->valDims->dimsData);\n            FREE(var->valDims);\n        }\n        /* free coords, strides and currStrides if necessary */\n        FREE(var->coords);\n        FREE(var->strides);\n        FREE(var->currStrides);\n\n        FREE(var);\n    }\n\n} /* end rt_DestroyLogVar */\n\n\n/* Function: rt_DestroyStructLogVar ============================================\n * Abstract:\n *      Destroy the struct log var linked list.\n */\nstatic void rt_DestroyStructLogVar(StructLogVar *head)\n{\n    while(head) {\n        StructLogVar *var = head;\n\n        head = var->next;\n\n        if (var->logTime) { /* time is LogVar */\n            rt_DestroyLogVar(var->time);\n        } else {        /* time is MatrixData */\n            FREE(var->time);\n        }\n        rt_DestroyLogVar(var->signals.values);\n        FREE(var->signals.labels);\n        FREE(var->signals.plotStyles);\n        FREE(var->signals.dimensions);\n        FREE(var->signals.titles);\n        FREE(var->signals.blockNames);\n        FREE(var->signals.stateNames);\n        FREE(var->signals.crossMdlRef);\n        FREE(var->blockName);\n        FREE(var);\n    }\n\n} /* end rt_DestroyStructLogVar */\n\n\n/* Function: rt_InitSignalsStruct ==============================================\n * Abstract:\n *      Initialize the signals structure in the struct log variable.\n *\n * Returns:\n *\t== NULL  => success.\n *\t~= NULL  => failure, the return value is a pointer to the error\n *                           message, which is also set in the simstruct.\n */\nstatic const char_T *rt_InitSignalsStruct(RTWLogInfo             *li,\n                                          const real_T           startTime,\n                                          const real_T           finalTime,\n                                          const real_T           inStepSize,\n                                          const char_T           **errStatus,\n                                          StructLogVar           *var,\n                                          int_T                  maxRows,\n                                          int_T                  decimation,\n                                          real_T                 sampleTime,\n                                          const RTWLogSignalInfo *sigInfo)\n{\n    int_T                i, sigIdx;\n    SignalsStruct        *sig          = &(var->signals);\n    int_T                nSignals      = sigInfo->numSignals;\n    const int_T          *numCols      = sigInfo->numCols;\n    const int_T          *numDims      = sigInfo->numDims;\n    const int_T          *dims         = sigInfo->dims;\n    const BuiltInDTypeId *dTypes       = sigInfo->dataTypes;\n    const int_T          *cSgnls       = sigInfo->complexSignals;\n    const int_T          *fData        = sigInfo->frameData;\n    const char_T         **labels      = sigInfo->labels.cptr;\n    const int_T          *plotStyles   = sigInfo->plotStyles;\n    const char_T         *titles       = sigInfo->titles;\n    const int_T          *titleLen     = sigInfo->titleLengths;\n    const char_T         **blockNames  = sigInfo->blockNames.cptr;\n    const char_T         **stateNames  = sigInfo->stateNames.cptr;\n    const boolean_T      *crossMdlRef  = sigInfo->crossMdlRef;\n    void                 **currSigDims = sigInfo->currSigDims;\n    int_T                *currSigDimsSize = sigInfo->currSigDimsSize;\n    LogVar               *prevValues   = NULL;\n    int_T                dimsOffset    = 0;\n    boolean_T            *isVarDims    = sigInfo->isVarDims;\n    /* if any signal is variable-size, the field 'valueDimensions' is needed */\n    boolean_T            logValueDimensions = false;\n    const RTWLogDataTypeConvert *pDTConvInfo = sigInfo->dataTypeConvert;\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    sig->numActiveFields = 1;\n    sig->numSignals      = nSignals;\n\n    sig->isVarDims = isVarDims;\n    /* check whether we need valueDimensions field*/\n    for (i=0; i<nSignals; i++){\n        if(isVarDims[i]){\n            logValueDimensions = true;\n            break;\n        }\n    }\n\n    /* values */\n    dimsOffset = 0;\n    for (i = 0; i < nSignals; i++) {\n        BuiltInDTypeId dt = (dTypes) ? dTypes[i] : SS_DOUBLE;\n        int_T          cs = (cSgnls) ? cSgnls[i] : 0;\n        int_T          fd = (fData)  ? fData[i]  : 0;\n        int_T          nd = (numDims) ? numDims[i] : 1;\n\n        const RTWLogDataTypeConvert *pDTConvInfoCur =\n                       (pDTConvInfo)  ? (pDTConvInfo+i)  : 0;\n\n        LogVar *values = NULL;\n        LogValDimsStat logValDimsStat;\n\n        if(!logValueDimensions){\n            logValDimsStat = NO_LOGVALDIMS;\n        }\n        else{\n            logValDimsStat = isVarDims[i] ? LOGVALDIMS_VARDIMS :  \n                                            LOGVALDIMS_EMPTYMX;\n        }\n\n        values = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                            inStepSize, errStatus,\n                                            &VALUES_FIELD_NAME,\n                                            dt, \n                                            pDTConvInfoCur,\n                                            0, cs, fd,\n                                            numCols[i],nd,\n                                            dims + dimsOffset,\n                                            logValDimsStat,\n                                            currSigDims + dimsOffset,\n                                            currSigDimsSize + dimsOffset,\n                                            maxRows,decimation,sampleTime, 0);\n\n        if (values == NULL) goto ERROR_EXIT;\n\n        if (sig->values == NULL) {\n            sig->values = values;\n        } else {\n            if (prevValues == NULL) goto ERROR_EXIT;\n            prevValues->next = values;\n        }\n        prevValues = values;\n        dimsOffset += nd;\n    }\n\n    if(logValueDimensions){\n        ++sig->numActiveFields;\n        sig->logValueDimensions = true;\n    }\n    else{\n        sig->logValueDimensions = false;\n    }\n\n    /* Dimensions */\n    {\n        real_T         *data;\n        size_t\t       nbytes;\n        int_T          dataLen    = 0;\n        BuiltInDTypeId dTypeId    = rt_GetActualDTypeID(SS_DOUBLE);\n        size_t         dataOffset = nSignals*sizeof(MatrixData);\n        uint_T         overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n        for (i=0; i< nSignals; i++) {\n            int_T nd = (numDims) ? numDims[i] : 1;\n            dataLen += nd;\n        }\n        nbytes = dataOffset + dataLen*sizeof(real_T);\n\n        if ( (sig->dimensions = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (real_T*) (((char_T*) (sig->dimensions)) + dataOffset);\n\n        for (i = 0; i < dataLen; i++) {\n          data[i] = dims[i]; /* cannot memcpy double <- int */\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->dimensions[i]);\n            int_T nd = (numDims) ? numDims[i] : 1;\n\n            (void)memcpy(mtxData->name, &DIMENSION_FIELD_NAME, mxMAXNAM);\n\n            mtxData->nRows   = 1;\n            mtxData->nCols   = nd;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = dTypeId;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(dTypeId);\n            mtxData->elSize  = rt_GetSizeofDataType(dTypeId);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += nd;\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* labels */\n    if (labels != NULL) {\n        unsigned short   *data;\n        size_t  nbytes;\n        int_T   dataLen    = 0;\n        size_t  dataOffset = nSignals * sizeof(MatrixData);\n        uint_T  overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (labels[i] != NULL){\n                dataLen = dataLen + (int_T)strlen(labels[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->labels = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->labels)) + dataOffset);\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T labelLen = (labels[sigIdx]==NULL) ? 0 : (int_T)strlen(labels[sigIdx]);\n            for (i = 0; i < labelLen; i++) {\n                data[dataIdx++] = (uint8_T)labels[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->labels[i]);\n            int_T labelLen = (int_T)strlen(labels[i]);\n\n            (void)memcpy(mtxData->name, &LABEL_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (labelLen) ? 1 : 0;\n            mtxData->nCols   = labelLen;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += labelLen;\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* plot styles */\n    if (plotStyles != NULL) {\n        real_T         *data;\n        size_t\t       nbytes;\n        int_T          dataLen    = 0;\n        BuiltInDTypeId dTypeId    = rt_GetActualDTypeID(SS_DOUBLE);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        size_t         dataOffset = nSignals*sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T         overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n        for (i=0; i< nSignals; i++) {\n            dataLen += numCols[i];\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(real_T);\n\n        if ( (sig->plotStyles = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        /*LINTED E_BAD_PTR_CAST_ALIGN*/\n        data = (real_T*) (((char_T*) (sig->plotStyles)) + dataOffset);\n\n        for (i = 0; i < dataLen; i++) {\n            data[i] = plotStyles[i];\n        }\n\n        dimsOffset = 0;\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->plotStyles[i]);\n            \n            (void)memcpy(mtxData->name, &PLOTSTYLE_FIELD_NAME, mxMAXNAM);\n\n            mtxData->nRows   = (numCols[i]) ? 1 : 0;\n            mtxData->nCols   = numCols[i];\n\n            mtxData->nDims   = numDims[i];\n            \n            if(mtxData->nDims > 2) {\n                if ((mtxData->dims = calloc(mtxData->nDims, sizeof(int_T))) == NULL) goto ERROR_EXIT;\n            } else {\n                mtxData->dims    = mtxData->_dims;\n            }\n            \n            mtxData->dims[0] = *(dims + dimsOffset);\n            if(mtxData->nDims >= 2) {\n                int32_T j;\n                for (j=1; j<mtxData->nDims; j++) {\n                    mtxData->dims[j] = *(dims + dimsOffset + j);\n                }\n            }\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = dTypeId;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(dTypeId);\n            mtxData->elSize  = rt_GetSizeofDataType(dTypeId);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data       += numCols[i];\n            dimsOffset += numDims[i];\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* titles */\n    if (titles != NULL) {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen    = (int_T)strlen(titles);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        size_t  dataOffset = nSignals * sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T  overhang   = (uint_T)(dataOffset % sizeof(short));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->titles = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        /*LINTED E_BAD_PTR_CAST_ALIGN*/\n        data = (unsigned short*) (((char_T*) (sig->titles)) + dataOffset);\n        for (i = 0; i < dataLen; i++) {\n            data[i] = titles[i];\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->titles[i]);\n\n            (void)memcpy(mtxData->name, &TITLE_FIELD_NAME, mxMAXNAM);\n            if (titleLen) {\n                mtxData->nRows   = (titleLen[i]) ? 1 : 0;\n                mtxData->nCols   = titleLen[i];\n            } else {\n                mtxData->nRows   = (dataLen) ? 1 : 0;\n                mtxData->nCols   = dataLen;\n            }\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += ((titleLen) ? titleLen[i] : dataLen);\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* block names */\n    if (blockNames != NULL)     {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen = 0;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T  dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (blockNames[i] != NULL) {\n                dataLen = dataLen + (int_T)strlen(blockNames[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->blockNames = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->blockNames)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T nameLen = (blockNames[sigIdx]==NULL) ? 0 : \n                (int_T)strlen(blockNames[sigIdx]);\n            for (i = 0; i < nameLen; i++) {\n                data[dataIdx++] = (uint8_T)blockNames[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->blockNames[i]);\n            int_T blockNameLen = (int_T)strlen(blockNames[i]);\n\n            (void)memcpy(mtxData->name, &BLOCKNAME_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (blockNameLen) ? 1 : 0;\n            mtxData->nCols   = blockNameLen;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += blockNameLen;\n        }\n        ++sig->numActiveFields;\n        if(logValueDimensions){\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    } else {\n        if(logValueDimensions){\n            sig->fieldNames = rtLocalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtLocalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    }\n\n    /* state names */\n    if (stateNames != NULL) {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen = 0;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T  dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (stateNames[i] != NULL) {\n                dataLen = dataLen + (int_T)strlen(stateNames[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->stateNames = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->stateNames)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T nameLen = (stateNames[sigIdx]==NULL) ? 0 : \n                (int_T)strlen(stateNames[sigIdx]);\n            for (i = 0; i < nameLen; i++) {\n                data[dataIdx++] = (uint8_T)stateNames[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->stateNames[i]);\n            int_T stateNameLen = (int_T)strlen(stateNames[i]);\n\n            (void)memcpy(mtxData->name, &STATENAME_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (stateNameLen) ? 1 : 0;\n            mtxData->nCols   = stateNameLen;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += stateNameLen;\n        }\n        ++sig->numActiveFields;\n\n        if(logValueDimensions){\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    }\n\n    /* CrossMdlRef */\n    if (crossMdlRef != NULL) {\n        real_T  *data;\n        size_t nbytes;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n\n        nbytes = dataOffset + nSignals*sizeof(real_T);\n\n        if ( (sig->crossMdlRef = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (real_T*) (((char_T*) (sig->crossMdlRef)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            data[sigIdx] = crossMdlRef[sigIdx];\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->crossMdlRef[i]);\n\n            (void)memcpy(mtxData->name, &CROSS_MDL_REF_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = 1;\n            mtxData->nCols   = 1;\n            mtxData->nDims   = 1; /* => matlab scalar */\n\n            mtxData->re      = &data[i];\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_DOUBLE;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(SS_DOUBLE);\n            mtxData->elSize  = sizeof(real_T);\n            mtxData->logical = matLOGICAL_BIT;\n            mtxData->complex = 0U;\n            mtxData->frameData = 0;\n            mtxData->frameSize = 1;\n        }\n        ++sig->numActiveFields;\n    }\n    \n    return(NULL); /* NORMAL_EXIT */\n\n  ERROR_EXIT:\n\n    (void)fprintf(stderr, \"*** Error creating signals structure \"\n                  \"in the struct log variable %s\\n\", var->name);\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    rt_DestroyLogVar(sig->values);\n    FREE(sig->labels);\n    FREE(sig->plotStyles);\n    FREE(sig->dimensions);\n    FREE(sig->titles);\n    FREE(sig->blockNames);\n    FREE(sig->stateNames);\n    FREE(sig->crossMdlRef);\n    return(*errStatus);\n\n} /* end rt_InitSignalsStruct */\n\n\n/* Function: local_CreateStructLogVar ==========================================\n * Abstract:\n *      Create a logging variable in the structure format.\n *\n * Returns:\n *      ~= NULL  => success, returns the log variable created.\n *      == NULL  => failure, error message set in the simstruct.\n */\nstatic StructLogVar *local_CreateStructLogVar(\n    RTWLogInfo              *li,\n    const real_T            startTime,\n    const real_T            finalTime,\n    const real_T            inStepSize,\n    const char_T            **errStatus,\n    const char_T            *varName,\n    boolean_T               logTime,\n    int_T                   maxRows,\n    int_T                   decimation,\n    real_T                  sampleTime,\n    const RTWLogSignalInfo  *sigInfo,\n    const char_T            *blockName)\n{\n    StructLogVar *var;\n    LogInfo      *logInfo = rtliGetLogInfo(li);\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    if ( (var = calloc(1, sizeof(StructLogVar))) == NULL ) goto ERROR_EXIT;\n\n    var->numActiveFields = 2;\n\n    /* Setup the structure name using varName and nameModifier */\n    rt_LoadModifiedLogVarName(li,varName,var->name);\n\n    /* time field */\n    if (logTime) {\n        /* need to create a LogVar to log time */\n        int_T dims = 1;\n        var->time = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                               inStepSize, errStatus,\n                                               &TIME_FIELD_NAME, SS_DOUBLE, \n                                               NULL,\n                                               0, 0, 0, 1,\n                                               1, &dims, NO_LOGVALDIMS, \n                                               NULL, NULL, maxRows,\n                                               decimation, sampleTime, 0);\n        if (var->time == NULL) goto ERROR_EXIT;\n    } else {\n        /* create a dummy MatrixData to write out time as an empty matrix */\n        BuiltInDTypeId dt     = rt_GetActualDTypeID(SS_DOUBLE);\n        size_t         nbytes = sizeof(MatrixData);\n        MatrixData     *time;\n\n        if ( (var->time = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n        time = var->time;\n\n        (void)memcpy(time->name, &TIME_FIELD_NAME, mxMAXNAM);\n        time->nRows   = 0;\n        time->nCols   = 0;\n        time->nDims   = 0;\n        time->re      = NULL;\n        time->im      = NULL;\n        time->dTypeID = dt;\n        time->mxID    = rt_GetMxIdFromDTypeId(dt);\n        time->elSize  = rt_GetSizeofDataType(dt);\n        time->logical = 0U;\n        time->complex = 0U;\n    }\n    var->logTime = logTime;\n\n    /* signals field */\n    if (sigInfo) {\n        if (rt_InitSignalsStruct(li,startTime,finalTime,inStepSize,errStatus,\n                                 var,maxRows,decimation,sampleTime,sigInfo)) {\n            goto ERROR_EXIT;\n        }\n    }\n\n    /* blockName Field */\n    if (blockName != NULL) {\n        int_T  dataLen = (int_T)strlen(blockName);\n        size_t nbytes;\n        size_t dataOffset = sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (var->blockName = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        (void)memcpy(var->blockName->name, &BLOCKNAME_FIELD_NAME, mxMAXNAM);\n        var->blockName->nRows   = (dataLen) ? 1 : 0;\n        var->blockName->nCols   = dataLen;\n\n        var->blockName->nDims   = 1;\n        var->blockName->dims    = var->blockName->_dims;\n        var->blockName->dims[0] = dataLen;\n        {\n            /*LINTED E_BAD_PTR_CAST_ALIGN*/\n            unsigned short *data = (unsigned short*)(((char_T*) (var->blockName))+dataOffset);\n            int_T   i;\n\n            for (i=0; i<dataLen; i++) {\n                data[i] = (uint8_T)blockName[i];\n            }\n            var->blockName->re  = data;\n        }\n        var->blockName->im      = NULL;\n        var->blockName->dTypeID = SS_INT16;\n        var->blockName->mxID    = mxCHAR_CLASS;\n        var->blockName->elSize  = sizeof(short);\n        var->blockName->logical = 0U;\n        var->blockName->complex = 0U;\n\n        ++var->numActiveFields;\n    }\n\n    /* Add this struct log var to the linked list in log info */\n    {\n        StructLogVar *list = logInfo->structLogVarsList;\n\n        if (list != NULL) {\n            while (list->next != NULL) {\n                list = list->next;\n            }\n            list->next = var;\n        } else {\n            logInfo->structLogVarsList = var;\n        }\n    }\n\n    return(var); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Error creating log variable %s\\n\", varName);\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    rt_DestroyStructLogVar(var);\n    return(NULL);\n\n} /* end local_CreateStructLogVar */\n\n\n/* Function: rt_StartDataLoggingForOutput ======================================\n * Abstract:\n */\nstatic const char_T *rt_StartDataLoggingForOutput(RTWLogInfo   *li,\n                                                  const real_T startTime,\n                                                  const real_T finalTime,\n                                                  const real_T stepSize,\n                                                  const char_T **errStatus)\n{\n    const char_T   *varName;\n    real_T         sampleTime = stepSize;\n    int_T          maxRows    = rtliGetLogMaxRows(li);\n    int_T          decimation = rtliGetLogDecimation(li);\n    int_T          logFormat  = rtliGetLogFormat(li);\n    boolean_T      logTime    = (logFormat==2) ? 1 : 0;\n\n    LogInfo *       logInfo;\n    logInfo = rtliGetLogInfo(li);\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    /* outputs */\n    varName = rtliGetLogY(li);\n    if (varName[0] != '\\0') {\n        int_T                  i;\n        int_T                  ny;\n        int_T                  yIdx;\n        char_T                 name[mxMAXNAM];\n        const char_T           *cp        = strchr(varName,',');\n        LogSignalPtrsType      ySigPtrs   = rtliGetLogYSignalPtrs(li);\n        const RTWLogSignalInfo *yInfo     = rtliGetLogYSignalInfo(li);\n\n        /* count the number of variables (matrices or structures) to create */\n        for (ny=1; cp != NULL; ny++) {\n            cp = strchr(cp+1,',');\n        }\n        logInfo->ny = ny;\n\n        if (logFormat==0) {\n            if ( (logInfo->y = calloc(ny,sizeof(LogVar*))) == NULL ) {\n                *errStatus = rtMemAllocError;\n                goto ERROR_EXIT;\n            }\n        } else {\n            if ( (logInfo->y = calloc(ny,sizeof(StructLogVar*))) == NULL ) {\n                *errStatus = rtMemAllocError;\n                goto ERROR_EXIT;\n            }\n        }\n\n        for (i = yIdx = 0, cp = varName; i < ny; i++) {\n            int_T        len;\n            const char_T *cp1 = strchr(cp+1,',');\n\n            if (cp1 != NULL) {\n                /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n                len = (int_T)(cp1 - cp);\n                if (len >= mxMAXNAM) len = mxMAXNAM - 1;\n            } else {\n                len = mxMAXNAM - 1;\n            }\n            (void)strncpy(name, cp, len);\n            name[len] = '\\0';\n\n            if (ny > 1 && ySigPtrs[i] == NULL) {\n                goto NEXT_NAME;\n            }\n\n            if (logFormat == 0) {\n                int            numCols;\n                int            nDims;\n                const int      *dims;\n                BuiltInDTypeId dataType;\n                int            isComplex;\n\n                if (ny == 1) {\n                    int_T op;\n\n                    numCols = yInfo[0].numCols[0];\n                    for (op = 1; op < yInfo[0].numSignals; op++) {\n                        numCols += yInfo[0].numCols[op];\n                    }\n                    /*\n                     * If we have only one \"matrix\" outport,\n                     * we can still log it as a matrix\n                     */\n                    if (yInfo[0].numSignals == 1) {\n                        nDims = yInfo[0].numDims ? yInfo[0].numDims[0] : 1;\n                        dims  = yInfo[0].dims;\n                    } else {\n                        nDims = 1;\n                        dims  = &numCols;\n                    }\n\n                    dataType  = yInfo[0].dataTypes[0];\n                    isComplex = yInfo[0].complexSignals[0];\n                } else {\n                    numCols   = yInfo[yIdx].numCols[0];\n                    nDims     = yInfo[yIdx].numDims ? yInfo[yIdx].numDims[0] : 1;\n                    dims      = yInfo[yIdx].dims;\n                    dataType  = yInfo[yIdx].dataTypes[0];\n                    isComplex = yInfo[yIdx].complexSignals[0];\n                }\n\n                logInfo->y[yIdx] = rt_CreateLogVarWithConvert(\n                    li, startTime, finalTime,\n                    stepSize, errStatus,\n                    name,\n                    dataType,\n                    yInfo[yIdx].dataTypeConvert,\n                    0,isComplex,\n                    0,numCols,nDims,dims,\n                    NO_LOGVALDIMS, NULL, NULL,\n                    maxRows,decimation,\n                    sampleTime,1);\n                if (logInfo->y[yIdx] == NULL)  goto ERROR_EXIT;\n            } else {\n                logInfo->y[yIdx] = local_CreateStructLogVar(li, startTime,\n                                                            finalTime, stepSize,\n                                                            errStatus, name,\n                                                            logTime, maxRows,\n                                                            decimation, sampleTime,\n                                                            &yInfo[yIdx], NULL);\n                if (logInfo->y[yIdx] == NULL) goto ERROR_EXIT;\n            }\n            ++yIdx;\n        NEXT_NAME:\n            cp = cp1;\n            if (cp != NULL && *cp == ',') cp++;\n        }\n    }\n\n    return(NULL); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Errors occurred when starting data logging.\\n\");\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    if (logInfo) { /* polyspace DEFECT:USELESS_IF [No action planned:Unset] \n                     \"Defense coding.\" */\n        rt_DestroyLogVar(logInfo->logVarsList);\n        logInfo->logVarsList = NULL;\n        rt_DestroyStructLogVar(logInfo->structLogVarsList);\n        logInfo->structLogVarsList = NULL;\n        FREE(logInfo->y);\n        logInfo->y = NULL;\n    }\n    return(*errStatus);\n\n} /* end rt_StartDataLoggingForOutput */\n\n\n/* Function: rt_ReallocLogVar ==================================================\n * Abstract:\n *   Allocate more memory for the data buffers in the log variable.\n *   Exit if unable to allocate more memory.\n */\nstatic void rt_ReallocLogVar(LogVar *var, boolean_T isVarDims)\n{\n    void *tmp;\n    int_T nCols = var->data.nCols;\n    int_T nRows;\n    size_t elSize = var->data.elSize;\n\n    if (isVarDims)\n    {\n        nRows = var->data.nRows + DEFAULT_BUFFER_SIZE;\n    }\n    else\n    {\n        nRows = var->data.nRows == 0 ? 1 : 2*var->data.nRows;\n    }\n    \n    tmp = realloc(var->data.re, nRows*nCols*elSize);\n    if (tmp == NULL) {\n        (void)fprintf(stderr,\n                      \"*** Memory allocation error.\\n\");\n        (void)fprintf(stderr, \"\"\n                      \"    varName          = %s%s\\n\"\n                      \"    nRows            = %d\\n\"\n                      \"    nCols            = %d\\n\"\n                      \"    elementSize      = %lu\\n\"\n                      \"    Current Size     = %.16g\\n\"\n                      \"    Failed resize    = %.16g\\n\\n\",\n                      var->data.name,\n                      var->data.complex ? \" (real part)\" : \"\",\n                      var->data.nRows,\n                      var->data.nCols,\n                      (unsigned long)  var->data.elSize,\n                      (double)nRows*nCols*elSize,\n                      (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n        exit(1);\n    }\n    var->data.re = tmp;\n\n    if (var->data.complex) {\n        tmp = realloc(var->data.im, nRows*nCols*elSize);\n        if (tmp == NULL) {\n            (void)fprintf(stderr,\n                          \"*** Memory allocation error.\\n\");\n            (void)fprintf(stderr, \"\"\n                          \"    varName          = %s (complex part)\\n\"\n                          \"    nRows            = %d\\n\"\n                          \"    nCols            = %d\\n\"\n                          \"    elementSize      = %lu\\n\"\n                          \"    Current Size     = %.16g\\n\"\n                          \"    Failed resize    = %.16g\\n\\n\",\n                          var->data.name,\n                          var->data.nRows,\n                          var->data.nCols,\n                          (unsigned long)  var->data.elSize,\n                          (double)nRows*nCols*elSize,\n                          (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n            exit(1);\n        }\n        var->data.im = tmp;\n    }\n    var->data.nRows = nRows;\n\n    /* Also reallocate memory for \"valueDimensions\" \n       when logging the variable-size signal\n    */\n    if(isVarDims){\n        int_T k;\n        \n        nCols = var->valDims->nCols;\n        nRows = var->valDims->nRows + DEFAULT_BUFFER_SIZE;\n        elSize = sizeof(real_T);\n        tmp = realloc(var->valDims->dimsData, nRows*nCols*elSize);\n        if (tmp == NULL) {\n            (void)fprintf(stderr,\n                          \"*** Memory allocation error.\\n\");\n            (void)fprintf(stderr, \"\"\n                          \"    varName          = %s\\n\"\n                          \"    nRows            = %d\\n\"\n                          \"    nCols            = %d\\n\"\n                          \"    elementSize      = %lu\\n\"\n                          \"    Current Size     = %.16g\\n\"\n                          \"    Failed resize    = %.16g\\n\\n\",\n                          var->valDims->name,\n                          var->valDims->nRows,\n                          var->valDims->nCols,\n                          (unsigned long)  elSize,\n                          (double)nRows*nCols*elSize,\n                          (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n            exit(1);\n        }\n\n        /*\n         * valueDimensions data is stored in array format and must be\n         * adjusted after reallocation (see also rt_FixupLogVar())\n         *\n         * Example: maxRows = 4; nRows = 4; nDims = 3;\n         * Before realloc of the logVar, the locations of data are as below:\n         * (x, y, z -- useful data / o -- junk, don't care)\n         * a[0] = x    a[4] = y    a[8] = z\n         * a[1] = x    a[5] = y    a[9] = z\n         * a[2] = x    a[6] = y    a[10]= z\n         * a[3] = x    a[7] = y    a[11]= z\n         *\n         * After realloc of the logVar (suppose 2 extra rows are added),\n         * the locations of data are as below:\n         * a[0] = x    a[6] = y    a[12]= o\n         * a[1] = x    a[7] = y    a[13]= o\n         * a[2] = x    a[8] = z    a[14]= o\n         * a[3] = x    a[9] = z    a[15]= o\n         * a[4] = y    a[10]= z    a[16]= o\n         * a[5] = y    a[11]= z    a[17]= o\n         *\n         * The data must be adjusted as below:\n         * a[0] = x    a[6] = y    a[12]= z\n         * a[1] = x    a[7] = y    a[13]= z\n         * a[2] = x    a[8] = y    a[14]= z\n         * a[3] = x    a[9] = y    a[15]= z\n         * a[4] = o    a[10]= o    a[16]= o\n         * a[5] = o    a[11]= o    a[17]= o\n         */\n        for(k = var->data.nDims-1; k > 0; k--){\n            (void) memcpy((real_T*)tmp + k*nRows, \n                          (real_T*)tmp + k*var->valDims->nRows,\n                          elSize * var->valDims->nRows);\n        }\n\n        var->valDims->dimsData = tmp;\n        var->valDims->nRows = nRows;\n    }\n\n} /* end rt_ReallocLogVar */\n\nconst char_T *rt_UpdateLogVarWithDiscontiguousData(LogVar                 *var,\n                                             int8_T**               data,\n                                             const int_T            *segmentLengths,\n                                             int_T                  nSegments,\n                                             RTWPreprocessingFcnPtr *preprocessingPtrs);\n                                             \n/* Function: rt_UpdateLogVarWithDiscontinuousData ==============================\n * Abstract:\n *      Log one row of the LogVar with data that is not contiguous.\n */\nconst char_T *rt_UpdateLogVarWithDiscontiguousData(LogVar                 *var,\n                                             int8_T**               data,\n                                             const int_T            *segmentLengths,\n                                             int_T                  nSegments,\n                                             RTWPreprocessingFcnPtr *preprocessingPtrs)\n{\n    size_t elSize = 0;\n    size_t offset = 0;\n    int    segIdx = 0;\n\n    if (++var->numHits % var->decimation) return(NULL);\n    var->numHits = 0;\n\n    /*\n     * Reallocate or wrap the LogVar\n     */\n    if (var->rowIdx == var->data.nRows) {\n        if (var->okayToRealloc == 1) {\n            rt_ReallocLogVar(var, false);\n        } else {\n            /* Circular buffer */\n            var->rowIdx = 0;\n            ++(var->wrapped); /* increment the wrap around counter */\n        }\n    }\n\n    /* This function is only used to log states, there's no var-dims issue. */\n    elSize = var->data.elSize;\n    offset = (size_t)(elSize * var->rowIdx * var->data.nCols);\n\n    if (var->data.complex) {\n        char_T *dstRe = (char_T*)(var->data.re) + offset;\n        char_T *dstIm = (char_T*)(var->data.im) + offset;\n\n        for (segIdx = 0; segIdx < nSegments; segIdx++) {\n            int_T         nEl  = segmentLengths[segIdx];\n            char_T *src        = (char_T *)data[segIdx];\n            int_T         el;\n\n            /* preprocess data in-place before logging */\n            RTWPreprocessingFcnPtr preprocessingPtr = preprocessingPtrs[segIdx];\n            if (preprocessingPtr != NULL) {\n                src = malloc(elSize * nEl * 2);\n                preprocessingPtr(src, (void *)data[segIdx]);\n            }\n\n            if (src == NULL) {\n                const char_T *errorMessage = \"Could not allocate memory for logging.\";\n                fprintf(stderr,\"%s.\\n\", errorMessage);\n                return(errorMessage);\n            }\n            else {\n                for (el = 0; el < nEl; el++) {\n                    (void)memcpy(dstRe, src, elSize);\n                    dstRe += elSize;   src += elSize;\n                    (void)memcpy(dstIm, src, elSize);\n                    dstIm += elSize;   src += elSize;\n                }\n            }\n\n            /* free temporarily declared data */\n            if (preprocessingPtr != NULL) {\n                free( src );\n            }\n        }\n    } else {\n        char_T *dst = (char_T*)(var->data.re) + offset;\n\n        for (segIdx = 0; segIdx < nSegments; segIdx++) {\n            size_t      segSize = elSize*segmentLengths[segIdx];\n            char_T *src         = (void *) data[segIdx];\n\n            /* preprocess data in-place before logging */\n            RTWPreprocessingFcnPtr preprocessingPtr = preprocessingPtrs[segIdx];\n            if (preprocessingPtr != NULL) {\n                src = malloc(segSize);\n                preprocessingPtr(src, data[segIdx]);\n            }\n            if (src == NULL) {\n                const char_T *errorMessage = \"Could not allocate memory for logging.\";\n                fprintf(stderr,\"%s.\\n\", errorMessage);\n                return(errorMessage);            }\n            else {\n                (void)memcpy(dst, src, segSize);\n                dst += segSize;\n            }\n\n            /* free temporarily declared data */\n            if (preprocessingPtr != NULL) {\n                free( src );\n            }\n        }\n    }\n\n    ++var->rowIdx;\n    return(NULL);\n\n} /* end rt_UpdateLogVarWithDiscontinuousData */\n\n\n/*==================*\n * Visible routines *\n *==================*/\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_CreateLogVarWithConvert ========================================\n * Abstract:\n *\tCreate a logging variable.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nLogVar *rt_CreateLogVarWithConvert(\n    RTWLogInfo        *li,\n    const real_T      startTime,\n    const real_T      finalTime,\n    const real_T      inStepSize,\n    const char_T      **errStatus,\n    const char_T      *varName,\n    BuiltInDTypeId    inpDataTypeID,\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo,\n    int_T             logical,\n    int_T             complex,\n    int_T             frameData,\n    int_T             nCols,\n    int_T             nDims,\n    const int_T       *dims,\n    LogValDimsStat    logValDimsStat,\n    void              **currSigDims,\n    int_T             *currSigDimsSize,\n    int_T             maxRows,\n    int_T             decimation,\n    real_T            sampleTime,\n    int_T             appendToLogVarsList)\n{\n    int_T          usingDefaultBufSize = 0;\n#ifdef NO_LOGGING_REALLOC\n    int_T          okayToRealloc       = 0;\n#else\n    int_T          okayToRealloc       = 1;\n#endif\n    LogVar         *var                = NULL;\n    /*inpDataTypeID is the rt_LoggedOutputDataTypeId*/\n    BuiltInDTypeId dTypeID             = (BuiltInDTypeId)inpDataTypeID; \n    size_t         elementSize         = rt_GetSizeofDataType(dTypeID);\n    int_T          frameSize;\n    int_T          nRows;\n    int_T          nColumns;\n\n    /*===================================================================*\n     * Determine the frame size if the data is frame based               *\n     *===================================================================*/\n    frameSize = frameData ? dims[0] : 1;\n\n    /*===================================================================*\n     * Calculate maximum number of rows needed in the buffer             *\n     *===================================================================*/\n\n    if (finalTime > startTime && finalTime != rtInf) {\n        real_T nPoints;            /* Tfinal is finite  ===>  nRows can be  */\n        real_T stepSize;           /* computed since the StepSize is fixed  */\n\n        if (sampleTime == -2.0) {  /* The signal being logged is constant,  *\n                                    * Hence, only one data point is logged. */\n            stepSize = finalTime;\n        } else if (sampleTime == -1.0 || sampleTime == 0.0) {\n                                /* Signal being logged is either inside a    *\n                                 * triggered sub-system or it is continuous. */\n            stepSize = inStepSize;\n        } else {                /* Discrete signal */\n            stepSize = sampleTime;\n        }\n\n        if (stepSize == 0.0) {\n            /* small initial value, so as to exercise the realloc code */\n            nRows = maxRows+1;\n            okayToRealloc = 1;\n        } else {\n            nPoints = 1.0 + floor((finalTime-startTime)/stepSize);\n\n            /*\n             * Add one more data point if needed.\n             */\n            if ( stepSize*(nPoints-1.0) < (finalTime-startTime) ) {\n                nPoints += 1.0;\n            }\n\n            /*\n             * Actual number of points to log = nPoints * size of\n             * each frame if data is frame-based\n             */\n            nPoints = frameData ? (nPoints * frameSize) : nPoints;\n\n            nPoints /= decimation;\n            if (nPoints != floor(nPoints)) {\n                nPoints += 1.0;\n            }\n            nRows = (nPoints <= INT_MAX) ? ((int_T) nPoints) : INT_MAX;\n        }\n        /*\n         * If maxRows is specified, and if this number is less\n         * than the number we computed (nRows) then use maxRows.\n         */\n        if ((maxRows > 0) && (maxRows < nRows)) {\n            nRows = maxRows;\n            okayToRealloc = 0;\n        }\n    } else if (finalTime == startTime) {\n        /*\n         * Number of rows to log is equal to 1 if not frame-based and\n         * equal to frame size if frame-based\n         */\n        nRows = frameData ? frameSize : 1;\n\n        /*\n         * If maxRows is specified, and if this number is less\n         * than the number we computed (nRows) then use maxRows.\n         */\n        if ((maxRows > 0) && (maxRows < nRows)) {\n            nRows = maxRows;\n            okayToRealloc = 0;\n        }\n    } else if (maxRows > 0) {     /* maxRows is specified => nRows=maxRows  */\n        nRows = maxRows;\n        okayToRealloc = 0;\n    } else {\n\n        if (inStepSize == 0) {\n            /* small initial value, so as to exercise the realloc code */\n            nRows = maxRows+1;\n            okayToRealloc = 1;\n        } else {                    /* Use a default value for nRows          */\n            usingDefaultBufSize = 1;\n            nRows = DEFAULT_BUFFER_SIZE;\n            okayToRealloc = 0;  /* No realloc with infinite stop time */\n            (void)fprintf(stdout, \"*** Using a default buffer of size %d for \"\n                          \"logging variable %s\\n\", nRows, varName);\n        }\n    }\n\n    /*\n     * Figure out the number of columns that the log variable should have.\n     * If the data is not frame based, then number of columns should equal\n     * nCols that is provided as input to the function. If the data is\n     * frame-based, then the number of columns should be equal to the\n     * number of channels = nCols/frameSize = dims[1];\n     */\n    nColumns = frameData ? dims[1] : nCols;\n\n    /*\n     * Error out if the size of the circular buffer is absurdly large, this\n     * error message is more informative than the one we get when we try to\n     * malloc this many number of bytes in one fell swoop.\n     */\n    {\n        double tmpDbl = ((double)elementSize)*((double)nRows)*\n                                              ((double)nColumns);\n\n        if (tmpDbl >= UINT_MAX) {\n            (void)fprintf(stderr,\n                          \"\\n*** Memory required to log variable '%s' is too\"\n                          \"\\n    big. Use the 'Limit rows to last:' and (or)\"\n                          \"\\n    'Decimation:' options to reduce the required\"\n                          \"\\n    memory size.\\n\", varName);\n            (void)fprintf(stderr, \"*** Details:\\n\"\n                          \"       varName         = %s\\n\"\n                          \"       nRows           = %d\\n\"\n                          \"       nCols           = %d\\n\"\n                          \"       elementSize     = %lu\\n\"\n                          \"       Bytes Required  = %.16g\\n\\n\",\n                          varName, nRows, nColumns, (unsigned long)\n                          elementSize, tmpDbl);\n            goto ERROR_EXIT;\n        }\n    }\n\n    /* Allocate memory for the log variable */\n    if ( (var = calloc(1, sizeof(LogVar))) == NULL ) {\n        (void)fprintf(stderr, \"*** Error allocating memory for logging %s\\n\",\n                      varName);\n        goto ERROR_EXIT;\n    }\n\n    /* Allocate memory for the circular buffer (real part) */\n    if ( (var->data.re = malloc(nRows*nColumns*elementSize)) == NULL ) {\n        (void)fprintf(stderr,\n                      \"*** Error allocating memory for the circular buffer\\n\");\n        (void)fprintf(stderr, \"*** Details:\\n\"\n                      \"       varName         = %s\\n\"\n                      \"       nRows           = %d\\n\"\n                      \"       nCols           = %d\\n\"\n                      \"       elementSize     = %lu\\n\"\n                      \"       Bytes Requested = %.16g\\n\\n\",\n                      varName, nRows, nColumns, (unsigned long) elementSize,\n                      ((double)elementSize)*((double)nRows)*((double)nColumns));\n        goto ERROR_EXIT;\n    }\n\n    /* Allocate memory for the circular buffer for the imaginary part */\n    if (complex) {\n        if ( (var->data.im = malloc(nRows*nColumns*elementSize)) == NULL ) {\n            (void)fprintf(stderr,\n                          \"*** Error allocating memory for the circular buffer \"\n                          \"for logging the imaginary part of %s\\n\", varName);\n            (void)fprintf(stderr, \"*** Details:\\n\"\n                          \"       varName         = %s\\n\"\n                          \"       nRows           = %d\\n\"\n                          \"       nCols           = %d\\n\"\n                          \"       elementSize     = %lu\\n\"\n                          \"       Bytes Requested = %.16g\\n\\n\",\n                          varName, nRows, nColumns, (unsigned long) elementSize,\n                          ((double)elementSize)*((double)nRows)*\n                                                 ((double)nColumns));\n            goto ERROR_EXIT;\n        }\n    }\n    /*\n     * Initialize the fields in LogVar structure.\n     */\n    if (appendToLogVarsList) {\n        rt_LoadModifiedLogVarName(li,varName,var->data.name);\n    } else {\n        var->data.name[mxMAXNAM-1] = '\\0';\n        (void)strncpy(var->data.name,varName,mxMAXNAM-1);\n    }\n    var->data.nCols           = nColumns;\n    var->data.nRows           = nRows;\n\n    var->data.nDims           = frameData ? 1 : nDims;\n    if (var->data.nDims > 2) {\n        var->data.dims = (int_T*)malloc(sizeof(int_T)*var->data.nDims);\n    } else {\n        var->data.dims = var->data._dims;\n    }\n    if (frameData) {\n        var->data.dims[0] = nColumns;\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        (void)memcpy(var->data.dims, dims, (size_t)(nDims*sizeof(int_T)));\n    }\n\n    var->data.dTypeID         = dTypeID;\n    var->data.elSize          = elementSize;\n\n    var->data.dataTypeConvertInfo = rt_GetDataTypeConvertInfo(\n        pDataTypeConvertInfo, dTypeID);\n\n    var->data.mxID            = rt_GetMxIdFromDTypeId(dTypeID);\n    /* over-ride logical bit if data type is boolean */\n    logical = dTypeID == SS_BOOLEAN ? 1 : 0;\n    var->data.logical         = (logical)   ? matLOGICAL_BIT : 0x0;\n    var->data.complex         = (complex)   ? matCOMPLEX_BIT : 0x0;\n    var->data.frameData       = frameData;\n    var->data.frameSize       = (frameData) ? frameSize : 1;\n\n    /* fill up valDims field */\n    if(logValDimsStat == NO_LOGVALDIMS){\n        /* All signals are fixed-size, no need to log valueDimensions field */\n        var->valDims     = NULL;\n        /* Set these pointers to NULLs in this case */\n        var->coords      = NULL;\n        var->strides     = NULL;\n        var->currStrides = NULL;\n    }\n    else{\n        if ( (var->valDims = calloc(1, sizeof(ValDimsData))) == NULL ) {\n            goto ERROR_EXIT;\n        }\n\n        (void)memcpy(var->valDims->name, &VALUEDIMENSIONS_FIELD_NAME, mxMAXNAM);\n\n        if (logValDimsStat == LOGVALDIMS_EMPTYMX) {\n            /* At least one signal is variable-size, \n               but the current signal is fixed-size. \n               Therefore, create a dummy MatrixData to write out valueDimensions \n               as an empty matrix. \n            */\n            var->valDims->nRows = 0;\n            var->valDims->nCols = 0;\n            var->valDims->currSigDims = NULL;\n            var->valDims->currSigDimsSize = NULL;\n            var->valDims->dimsData = NULL;\n            /* Set these pointers to NULLs in this case */\n            var->coords      = NULL;\n            var->strides     = NULL;\n            var->currStrides = NULL;\n        } else { /* The current signal is a variable-size signal. */\n            /* The \"valueDimensions\" must be double, so re-assign element size */\n            elementSize = sizeof(real_T);\n\n            /* When signals are frame-based, 'valueDimensions' has 1 column */\n            if(frameData){\n                /* When signal is frame-based, the first dimension is always fixed, \n                   so we only need to record the second dimension.\n                   e.g. Two frame-based signals [10x4] and [10x3], \n                   'valueDimensions' and 'currSigDims'\n                   only record 4 or 3.\n                */\n                nColumns = 1;\n                var->valDims->currSigDims = (void**) (currSigDims + 1);\n                var->valDims->currSigDimsSize = (int_T*) (currSigDimsSize + 1);\n            } else { /* non-frame based */\n                nColumns = nDims;\n                var->valDims->currSigDims = (void**) currSigDims;\n                var->valDims->currSigDimsSize = (int_T*) currSigDimsSize;\n            }\n            \n            /* Allocate memory for the circular buffer */\n            if ( (var->valDims->dimsData = malloc(nRows*nColumns*elementSize)) == NULL ) {\n                (void)fprintf(stderr,\n                              \"*** Error allocating memory for the circular buffer\\n\");\n                (void)fprintf(stderr, \"*** Details:\\n\"\n                              \"       varName         = %s\\n\"\n                              \"       nRows           = %d\\n\"\n                              \"       nCols           = %d\\n\"\n                              \"       elementSize     = %lu\\n\"\n                              \"       Bytes Requested = %.16g\\n\\n\",\n                              var->valDims->name, nRows, nColumns, (unsigned long) elementSize,\n                              ((double)elementSize)*((double)nRows)*((double)nColumns));\n                goto ERROR_EXIT;\n            }\n            var->valDims->nRows = nRows;\n            var->valDims->nCols = nColumns;\n\n            /* Allocate memory for these dynamic arrays */\n            {\n                size_t nbytes = var->data.nDims*sizeof(int_T);\n                if( ((var->coords = calloc(nbytes, 1)) == NULL)\n                    ||((var->strides = calloc(nbytes, 1)) == NULL)\n                    ||((var->currStrides = calloc(nbytes, 1)) == NULL) )\n                    goto ERROR_EXIT;\n            }\n        }\n    }\n\n    var->rowIdx               = 0;\n    var->wrapped              = 0;\n    var->nDataPoints          = 0;\n    var->usingDefaultBufSize  = usingDefaultBufSize;\n    var->okayToRealloc        = okayToRealloc;\n    var->decimation           = decimation;\n    var->numHits              = -1;  /* so first point gets logged */\n\n    /* Add this log var to list in log info, if necessary */\n    if (appendToLogVarsList) {\n        LogInfo *logInfo = (LogInfo*) rtliGetLogInfo(li);\n        LogVar  *varList = logInfo->logVarsList;\n\n        if (varList != NULL) {\n            while (varList->next != NULL) {\n                varList = varList->next;\n            }\n            varList->next = var;\n        } else {\n            logInfo->logVarsList = var;\n        }\n    }\n\n    return(var); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    \n    *errStatus = rtMemAllocError;\n    rt_DestroyLogVar(var);\n    return(NULL);\n\n} /* end rt_CreateLogVarWithConvert */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_CreateLogVar ===================================================\n * Abstract:\n *\tCreate a logging variable.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nLogVar *rt_CreateLogVar(RTWLogInfo        *li,\n                               const real_T      startTime,\n                               const real_T      finalTime,\n                               const real_T      inStepSize,\n                               const char_T      **errStatus,\n                               const char_T      *varName,\n                               BuiltInDTypeId    inpDataTypeID,\n                               int_T             logical,\n                               int_T             complex,\n                               int_T             frameData,\n                               int_T             nCols,\n                               int_T             nDims,\n                               const int_T       *dims,\n                               LogValDimsStat    logValDimsStat,\n                               void              **currSigDims,\n                               int_T             *currSigDimsSize,\n                               int_T             maxRows,\n                               int_T             decimation,\n                               real_T            sampleTime,\n                               int_T             appendToLogVarsList)\n{\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo = NULL;\n\n    return rt_CreateLogVarWithConvert(li,\n                                      startTime,\n                                      finalTime,\n                                      inStepSize,\n                                      errStatus,\n                                      varName,\n                                      inpDataTypeID,\n                                      pDataTypeConvertInfo,\n                                      logical,\n                                      complex,\n                                      frameData,\n                                      nCols,\n                                      nDims,\n                                      dims,\n                                      logValDimsStat,\n                                      currSigDims,\n                                      currSigDimsSize,\n                                      maxRows,\n                                      decimation,\n                                      sampleTime,\n                                      appendToLogVarsList);\n\n} /* end rt_CreateLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_CreateStructLogVar =============================================\n * Abstract:\n *\tCreate a logging variable in the structure format.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nStructLogVar *rt_CreateStructLogVar(RTWLogInfo              *li,\n                                           const real_T            startTime,\n                                           const real_T            finalTime,\n                                           const real_T            inStepSize,\n                                           const char_T            **errStatus,\n                                           const char_T            *varName,\n                                           boolean_T               logTime,\n                                           int_T                   maxRows,\n                                           int_T                   decimation,\n                                           real_T                  sampleTime,\n                                           const RTWLogSignalInfo  *sigInfo,\n                                           const char_T            *blockName)\n{\n\n    return( local_CreateStructLogVar(li,\n                                     startTime,\n                                     finalTime,\n                                     inStepSize,\n                                     errStatus,\n                                     varName,\n                                     logTime,\n                                     maxRows,\n                                     decimation,\n                                     sampleTime,\n                                     sigInfo,\n                                     blockName));\n\n} /* end rt_CreateStructLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_StartDataLoggingWithStartTime ==================================\n * Abstract:\n *      Initialize data logging info based upon the following settings cached\n *      in the RTWLogging data structure of the SimStruct.\n *\n * Return value is:\n *\t== NULL  => success\n *\t!= NULL  => failure (the return value is a pointer that points to the\n *                           error message, which is also set in the simstruct)\n */\nconst char_T *rt_StartDataLoggingWithStartTime(RTWLogInfo   *li,\n                                                      const real_T startTime,\n                                                      const real_T finalTime,\n                                                      const real_T stepSize,\n                                                      const char_T **errStatus)\n{\n    const char_T   *varName;\n    LogInfo        *logInfo;\n    real_T         sampleTime = stepSize;\n    int_T          maxRows    = rtliGetLogMaxRows(li);\n    int_T          decimation = rtliGetLogDecimation(li);\n    int_T          logFormat  = rtliGetLogFormat(li);\n    boolean_T      logTime    = (logFormat==2) ? 1 : 0;\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    if ((logInfo=calloc(1,sizeof(LogInfo))) == NULL) {\n        *errStatus = rtMemAllocError;\n        goto ERROR_EXIT;\n    }\n    rtliSetLogInfo(li, (void*)logInfo);\n\n    /* time */\n    varName = rtliGetLogT(li);\n    if (varName[0] != '\\0') {\n        int_T dims = 1;\n        logInfo->t = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                stepSize, errStatus,\n                                                varName,SS_DOUBLE,\n                                                NULL,\n                                                0,0,0,1,1,\n                                                &dims, NO_LOGVALDIMS, NULL, NULL,\n                                                maxRows,decimation,\n                                                sampleTime,1);\n        if (logInfo->t == NULL) goto ERROR_EXIT;\n    }\n\n    /* states */\n    if ( rtliGetLogX(li)[0] != '\\0' ||  rtliGetLogXFinal(li)[0] != '\\0' ) {\n        const RTWLogSignalInfo  *xInfo = rtliGetLogXSignalInfo(li);\n\n        if (logFormat == 0) {                                /* Matrix Format */\n            int            numCols;\n            int            nDims;\n            const int      *dims;\n            BuiltInDTypeId dataType;\n            int            isComplex;\n            int_T          sIdx;\n\n            const RTWLogDataTypeConvert *pDTConvInfo;\n\n            numCols = xInfo[0].numCols ? xInfo[0].numCols[0] : 0;\n            for (sIdx = 1; sIdx < xInfo[0].numSignals; sIdx++) {\n                numCols += xInfo[0].numCols[sIdx];\n            }\n            /* If we have only one \"matrix\" state, we can log as a matrix */\n            if (xInfo[0].numSignals == 1) {\n                nDims     = xInfo[0].numDims ? xInfo[0].numDims[0] : 1;\n                dims      = xInfo[0].dims;\n            } else {\n                nDims     = 1;\n                dims      = &numCols;\n            }\n            dataType  = xInfo[0].dataTypes ? xInfo[0].dataTypes[0] : 0;\n            isComplex = xInfo[0].complexSignals ? xInfo[0].complexSignals[0] : 0;\n\n            pDTConvInfo = xInfo[0].dataTypeConvert;\n\n            if (rtliGetLogX(li)[0] != '\\0') {\n                logInfo->x = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                        stepSize, errStatus,\n                                                        rtliGetLogX(li),dataType,\n                                                        pDTConvInfo,\n                                                        0,\n                                                        isComplex,0,numCols,nDims,dims,\n                                                        NO_LOGVALDIMS, NULL, NULL,\n                                                        maxRows,decimation,sampleTime,1);\n                if (logInfo->x == NULL)  goto ERROR_EXIT;\n            }\n            if (rtliGetLogXFinal(li)[0] != '\\0') {\n                logInfo->xFinal = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                             stepSize, errStatus,\n                                                             rtliGetLogXFinal(li),dataType,\n                                                             pDTConvInfo,\n                                                             0,isComplex,0,numCols,nDims,\n                                                             dims, NO_LOGVALDIMS, NULL, \n                                                             NULL, 1,decimation,\n                                                             sampleTime,1);\n                if (logInfo->xFinal == NULL)  goto ERROR_EXIT;\n            }\n        } else {                                          /* Structure Format */\n            if (rtliGetLogX(li)[0] != '\\0') {\n                logInfo->x = local_CreateStructLogVar(li, startTime, finalTime,\n                                                      stepSize, errStatus,\n                                                      rtliGetLogX(li), logTime,\n                                                      maxRows, decimation,\n                                                      sampleTime, xInfo, NULL);\n                if (logInfo->x == NULL) goto ERROR_EXIT;\n            }\n            if (rtliGetLogXFinal(li)[0] != '\\0') {\n                logInfo->xFinal = local_CreateStructLogVar(li, startTime, finalTime,\n                                                           stepSize, errStatus,\n                                                           rtliGetLogXFinal(li),\n                                                           logTime,1,decimation,\n                                                           sampleTime,xInfo,NULL);\n                if (logInfo->xFinal == NULL) goto ERROR_EXIT;\n            }\n        }\n    }\n\n    /* outputs */\n    *errStatus = rt_StartDataLoggingForOutput(li,startTime,finalTime,\n                                              stepSize,errStatus);\n    if (*errStatus != NULL)  goto ERROR_EXIT;\n\n    return(NULL); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Errors occurred when starting data logging.\\n\");\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    if (logInfo) {\n        rt_DestroyLogVar(logInfo->logVarsList);\n        logInfo->logVarsList = NULL;\n        rt_DestroyStructLogVar(logInfo->structLogVarsList);\n        logInfo->structLogVarsList = NULL;\n        FREE(logInfo);\n        rtliSetLogInfo(li,NULL);\n    }\n    return(*errStatus);\n\n} /* end rt_StartDataLoggingWithStartTime */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StartDataLogging ===============================================\n * Abstract:\n */\nconst char_T *rt_StartDataLogging(RTWLogInfo   *li,\n                                         const real_T finalTime,\n                                         const real_T stepSize,\n                                         const char_T **errStatus)\n{\n    return rt_StartDataLoggingWithStartTime(li,\n                                            0.0,\n                                            finalTime,\n                                            stepSize,\n                                            errStatus);\n}\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_UpdateLogVar ===================================================\n * Abstract:\n *\tCalled to log data for a log variable.\n */\nvoid rt_UpdateLogVar(LogVar *var, const void *data, boolean_T isVarDims)\n{\n    size_t        elSize    = var->data.elSize;\n    const  char_T *cData    = data;\n    const  int_T  frameData = var->data.frameData;\n    const  int_T  frameSize = frameData ? (var->data.frameSize) : 1;\n    const  int_T  logWidth  = var->data.nCols;\n    BuiltInDTypeId dTypeID  = var->data.dTypeID;\n\n    size_t offset        = 0;\n    char_T *currRealRow  = NULL;\n    char_T *currImagRow  = NULL;\n    int_T  pointSize     = (int_T)((var->data.complex) ? rt_GetSizeofComplexType(dTypeID) : elSize);\n\n    int    i, j, k;\n\n    /* The following variables will be used for \n       logging variable-size signals */\n    const  int_T  nDims = var->data.nDims;\n    const  int_T  *dims = var->data.dims;\n    const  void   * const *currDimsPtr = NULL;\n    const  int_T  *currDimsSizePtr = NULL;\n\n    /* The following variables will be used for \n       logging \"valueDimensions\" field */\n    size_t offset_valDims   = 0;\n    char_T *currValDimsRow  = NULL;\n    size_t elSize_valDims   = sizeof(real_T);\n    real_T currentSigDims   = 0;\n    int_T  nRows_valDims    = 0;\n    int_T  logWidth_valDims = 0;\n\n    for (i = 0; i < frameSize; i++) {\n        if (++var->numHits % var->decimation) continue;\n        var->numHits = 0;\n\n        if (var->rowIdx == var->data.nRows) {\n            if (var->okayToRealloc == 1) {\n                rt_ReallocLogVar(var, isVarDims);\n            } else {\n                /* Circular buffer */\n                var->rowIdx = 0;\n                ++(var->wrapped); /* increment the wrap around counter */\n            }\n        }\n\n        if(isVarDims){\n            currDimsPtr = (const void * const *) var->valDims->currSigDims;\n            currDimsSizePtr = (const int_T*) var->valDims->currSigDimsSize;\n            logWidth_valDims = frameData ? 1 : var->valDims->nCols;\n            nRows_valDims = var->valDims->nRows;\n\n            var->strides[0] = 1;\n            var->currStrides[0] = 1;\n\n            for (k = 1; k < nDims; k++){\n                int32_T currDimsVal=0;\n                switch (currDimsSizePtr[k-1]) {\n                  case 1:\n                    currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                  case 2:\n                    currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                  case 4:\n                    currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                }\n                var->strides[k] = var->strides[k-1] * dims[k-1];\n                var->currStrides[k] = var->currStrides[k-1] * currDimsVal;\n            }\n        }\n\n        offset       = (size_t)(elSize * var->rowIdx * logWidth);\n        currRealRow  = ((char_T*) (var->data.re)) + offset;\n        currImagRow  = (var->data.complex) ?\n                       ((char_T*) (var->data.im)) + offset :  NULL;\n\n        /* update logging data */\n        for (j = 0; j < logWidth; j++) {\n\n            boolean_T inRange = true;\n            int idx = j;\n\n            /* Check whether the currently logged value is in range or not.\n               For fixed-size signal logging, always inRange = true; idx = j;\n               For variable-size signal logging, use strides, coordinates\n               and current strides to decide whether the currently logged\n               data is in range or not and its location in the logging \n               matrix.\n             */\n            if(isVarDims){\n                int rem = j;\n                idx = 0;\n                for(k = nDims-1; k>=0; k--){\n                    int32_T currDimsVal=0;\n                    switch (currDimsSizePtr[k]) {\n                      case 1:\n                        currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+k));\n                        break;\n                      case 2:\n                        currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+k));\n                        break;\n                      case 4:\n                        currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+k));\n                        break;\n                    }\n                    var->coords[k] = rem / var->strides[k];\n                    if( var->coords[k] >= currDimsVal ){\n                        inRange = false;\n                        break;\n                    }\n                    rem = rem - var->coords[k] * var->strides[k];\n                }\n                if(inRange){\n                    idx = var->coords[0];\n                    for (k = 1; k < nDims; k++){\n                        idx += var->coords[k] * var->currStrides[k];\n                    }\n                }\n            }\n            \n            if (!var->data.dataTypeConvertInfo.conversionNeeded) {\n                /* NO  conversion needed\n                 */ \n                if (inRange) {\n                    /* If in range, fill in data */\n                    const char *cDataPoint = cData + (i+frameSize*idx) * pointSize;\n\n                    (void) memcpy(currRealRow, cDataPoint, elSize);\n                    currRealRow += elSize;\n                    if (var->data.complex) {\n                        (void) memcpy(currImagRow, cDataPoint + pointSize/2, elSize);\n                        currImagRow += elSize;\n                    }\n                } else {\n                    /* If out of range, fill in NaN or 0:\n                       1) For bool, int32, uint32, int16, uint16, etc,\n                          memset to zeros;\n                       2) For fixed-point data type, NaN conversion is not\n                          allowed, memset to zeros.\n                    */\n                    if (dTypeID == SS_DOUBLE) {\n                       ((real_T*)(currRealRow))[0] = rtNaN;\n                    } else if (dTypeID == SS_SINGLE){\n                        ((real32_T*)(currRealRow))[0] = rtNaNF;\n                    } else {\n                        (void) memset(currRealRow, 0, elSize);\n                    }\n                    \n                    currRealRow += elSize;\n                    if (var->data.complex) {\n                        /* For imaginary part, fill in 0 */\n                        (void) memset(currImagRow, 0, elSize);\n                        currImagRow += elSize;\n                    }\n                }\n            }\n            else\n            {\n                /* YES conversion needed\n                 */ \n                DTypeId dataTypeIdOriginal = \n                    var->data.dataTypeConvertInfo.dataTypeIdOriginal;\n                int_T DpSize = (int_T)((var->data.complex) ? \n                                       rt_GetSizeofComplexType(dataTypeIdOriginal) : \n                                       rt_GetSizeofDataType(dataTypeIdOriginal));\n\n                DTypeId dataTypeIdLoggingTo = \n                    var->data.dataTypeConvertInfo.dataTypeIdLoggingTo;\n\n                int bitsPerChunk = var->data.dataTypeConvertInfo.bitsPerChunk;\n                int numOfChunk =  var->data.dataTypeConvertInfo.numOfChunk;\n                unsigned int isSigned = var->data.dataTypeConvertInfo.isSigned;\n\n                double fracSlope = var->data.dataTypeConvertInfo.fracSlope;\n                int    fixedExp  = var->data.dataTypeConvertInfo.fixedExp;\n                double bias      = var->data.dataTypeConvertInfo.bias;\n\n                double curRealValue = -0.12345678987654;\n                double curImagValue = -0.12345678987654;\n\n                int_T adjIndexIfComplex = (var->data.complex) ? 2 : 1;\n\n                if(inRange){\n                    if(numOfChunk > 1)\n                    {\n                        /* For multiword */\n                        const char *pInData = (const char *)(cData);\n                        int dtSize = bitsPerChunk*numOfChunk/8;\n                        pInData += ((i+frameSize*idx) * adjIndexIfComplex) * dtSize;\n                        \n                        curRealValue = rt_GetDblValueFromOverSizedData(pInData, bitsPerChunk, numOfChunk, \n                                                                       isSigned, fracSlope, fixedExp, bias);\n                        if (var->data.complex) {\n                            curImagValue = rt_GetDblValueFromOverSizedData((pInData+dtSize), bitsPerChunk, numOfChunk, \n                                                                           isSigned, fracSlope, fixedExp, bias);\n                        }\n                    }\n                    else\n                    {\n                        /* if in range, fill in data that is converted first */\n                        switch ( dataTypeIdOriginal )\n                        {\n                          case SS_DOUBLE:\n                            {\n                                const real_T *pInData = (const real_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const real_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_SINGLE:\n                            {\n                                const real32_T *pInData = (const real32_T *)(cData + (i+frameSize*idx)* DpSize);\n\n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const real32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT8:\n                            {\n                                const int8_T *pInData = (const int8_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int8_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT8:\n                            {\n                                const uint8_T *pInData = (const uint8_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint8_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT16:\n                            {\n                                const int16_T *pInData = (const int16_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int16_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT16:\n                            {\n                                const uint16_T *pInData = (const uint16_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint16_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT32:\n                            {\n                                const int32_T *pInData = (const int32_T *)(cData + (i+frameSize*idx)* DpSize);\n\n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT32:\n                            {\n                                const uint32_T *pInData = (const uint32_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_BOOLEAN:\n                            {\n                                const boolean_T *pInData = ((const boolean_T *)(cData));\n                                \n                                pInData += (i+frameSize*idx) * adjIndexIfComplex;\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          default: \n                            {\n                                /* For biglong */\n                                const char *pInData = (const char *)(cData);\n                                int dtSize = bitsPerChunk*numOfChunk/8;\n                                pInData += ((i+frameSize*idx) * adjIndexIfComplex) * dtSize;\n                                \n                                curRealValue = rt_GetDblValueFromOverSizedData(pInData, bitsPerChunk, numOfChunk, \n                                                                               isSigned, fracSlope, fixedExp, bias);\n                                if (var->data.complex) {\n                                    curImagValue = rt_GetDblValueFromOverSizedData((pInData+dtSize), bitsPerChunk, numOfChunk, \n                                                                                   isSigned, fracSlope, fixedExp, bias);\n                                }\n                            }\n                            break;\n                        } /* -- end of switch -- */\n                    }\n                } else {\n                    /* if out of range, just fill NaN or 0 */\n                    if(dTypeID == SS_DOUBLE || dTypeID == SS_SINGLE){\n                        /* vijay 4/11/2013: DO NOT CALL ldexp() with NaN below as it causes \n                         * lcc-win64 to generate inf instead of NaN as output. \n                         * Just use rtNaN directly */\n                        curRealValue = rtNaN;\n                    }\n                    else{\n                        curRealValue = ldexp( 0, fixedExp ) + bias;\n                    }\n                    if (var->data.complex) {\n                        /* fill 0 in imaginary part*/\n                        curImagValue = ldexp( 0, fixedExp ) + bias;\n                    }\n                }\n\n                switch ( dataTypeIdLoggingTo )\n                {\n                  case SS_DOUBLE:\n                    {\n                        *((real_T *)currRealRow) = (real_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((real_T *)currImagRow) = (real_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_SINGLE:\n                    {\n                        *((real32_T *)currRealRow) = (real32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((real32_T *)currImagRow) = (real32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT8:\n                    {\n                        *((int8_T *)currRealRow) = (int8_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int8_T *)currImagRow) = (int8_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT8:\n                    {\n                        *((uint8_T *)currRealRow) = (uint8_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint8_T *)currImagRow) = (uint8_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT16:\n                    {\n                        *((int16_T *)currRealRow) = (int16_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int16_T *)currImagRow) = (int16_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT16:\n                    {\n                        *((uint16_T *)currRealRow) = (uint16_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint16_T *)currImagRow) = (uint16_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT32:\n                    {\n                        *((int32_T *)currRealRow) = (int32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int32_T *)currImagRow) = (int32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT32:\n                    {\n                        *((uint32_T *)currRealRow) = (uint32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint32_T *)currImagRow) = (uint32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_BOOLEAN:\n                    {\n                        *((boolean_T *)currRealRow) = (boolean_T)(curRealValue != 0.0);\n\n                        if (var->data.complex) {\n\n                            *((boolean_T *)currImagRow) = (boolean_T)(curImagValue != 0.0);\n                        }\n                    }\n                    break;\n                } /* -- end of switch -- */\n\n                currRealRow += elSize;\n                if (var->data.complex) {\n                    currImagRow += elSize;\n                }\n            }\n        }\n\n        if(isVarDims){ /* update \"valueDimensions\" field */\n            for(j = 0; j < logWidth_valDims; j ++){\n                int32_T currDimsVal=0;\n                switch (currDimsSizePtr[j]) {\n                  case 1:\n                    currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+j));\n                    break;\n                  case 2:\n                    currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+j));\n                    break;\n                  case 4:\n                    currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+j));\n                    break;\n                }\n                offset_valDims  = (size_t)(elSize_valDims *( var->rowIdx + nRows_valDims * j));\n                currValDimsRow  = ((char_T*) (var->valDims->dimsData)) + offset_valDims;\n\n                /* convert int_T to real_T */\n                currentSigDims = (real_T) currDimsVal;\n                (void) memcpy(currValDimsRow, &currentSigDims, elSize_valDims);\n                currValDimsRow += elSize_valDims;\n            }\n        }\n        \n        ++var->rowIdx;\n    }\n\n    return;\n\n} /* end rt_UpdateLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n \n \n/* Function: rt_UpdateStructLogVar =============================================\n * Abstract:\n *      Called to log data for a structure log variable.\n */\nvoid rt_UpdateStructLogVar(StructLogVar *var, const real_T *t, const void *data)\n{\n    LogVar       *values = var->signals.values;\n    const char_T *signal = data;\n    boolean_T *isVarDims = var->signals.isVarDims;\n    int i = 0;\n\n    /* time */\n    if (var->logTime) {\n        rt_UpdateLogVar(var->time, t, false);\n    }\n\n    /* signals */\n    while (values) {\n        size_t elSz = values->data.elSize;\n\n        rt_UpdateLogVar(values, signal, isVarDims[i]);\n\n        if (values->data.complex) elSz *= 2;\n        signal += elSz * values->data.nCols;\n\n        values = values->next;\n        i++;\n    }\n\n} /* end rt_UpdateStructLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * g1614989:Refactoring this function to accept number of elements\n *          instead of accepting signalInfo and index.\n */\nvoid* rt_getTempMemory(LogVar* var, int_T numEls);\n\nvoid* rt_getTempMemory(LogVar* var, int_T numEls)\n{\n    size_t elSize  = var->data.elSize;\n    size_t cmplxMult = var->data.complex ? 2 : 1;\n    /*\n     * g1689750: With multiword support for mat file logging in row major array layout, we need to allocate more space to\n     * store the data when the transpose operation is being performed. The additional space is required to store multiple\n     * chunks that each multi word contains.\n     */\n    size_t numOfChunks = var->data.dataTypeConvertInfo.conversionNeeded ? var->data.dataTypeConvertInfo.numOfChunk : 1;\n    void* tempMemory = malloc(elSize * numEls * cmplxMult * numOfChunks);\n    return tempMemory;\n}\n\n/*\n* g1614989:This function processes the signal data if a function pointer is available and then logs the data.\n*          If a function pointer is not present, signal data is logged without any processing.\n*          The idx parameter specifies which information from the SignalInfo to be used for processing and logging.\n*          When idx is -1, the provided signal info is to be used for processing and logging the data.\n*/\nvoid rt_preProcessAndLogDataWithIndex(const RTWLogSignalInfo *signalInfo, int_T idx, LogVar* val, const void * data, boolean_T isVarDims);\n\nvoid rt_preProcessAndLogDataWithIndex(const RTWLogSignalInfo *signalInfo, int_T idx, LogVar* val, const void * data, boolean_T isVarDims)\n{\n    RTWPreprocessingFcnPtr preprocessingPtr = NULL;\n    int_T numEls = -1;\n    if (idx == -1) {\n        preprocessingPtr = *(signalInfo->preprocessingPtrs);\n        numEls = *(signalInfo->numCols);\n    }\n    else {\n        preprocessingPtr = signalInfo->preprocessingPtrs[idx];\n        numEls = signalInfo->numCols[idx];\n    }\n\n    if (preprocessingPtr != NULL) {\n        void* curData = rt_getTempMemory(val, numEls);\n        preprocessingPtr(curData, data);\n        rt_UpdateLogVar(val, curData, isVarDims);\n        free(curData);\n    }\n    else {\n        rt_UpdateLogVar(val, data, isVarDims);\n    }\n}\n\n/*\n* g1614989:This function is called when each signal has a specific RTWLogSignalInfo structure defined.\n*/\n\nvoid rt_preProcessAndLogData(RTWLogSignalInfo signalInfo, LogVar* val, const void * data, boolean_T isVarDims);\n\nvoid rt_preProcessAndLogData(RTWLogSignalInfo signalInfo, LogVar* val, const void * data, boolean_T isVarDims)\n{\n    rt_preProcessAndLogDataWithIndex(&signalInfo, -1, val, data, isVarDims);\n}\n \n/* Function: rt_UpdateTXYLogVars ===============================================\n * Abstract:\n *\tUpdate the xFinal,T,X,Y variables that are being logged.\n */\nconst char_T *rt_UpdateTXYLogVars(RTWLogInfo *li, time_T *tPtr)\n{\n    return rt_UpdateTXXFYLogVars(li, tPtr, true);\n}\n \n/* Function: rt_UpdateTXXFYLogVars =============================================\n * Abstract:\n *\tUpdate xFinal and/or the T,X,Y variables that are being logged\n */\nconst char_T *rt_UpdateTXXFYLogVars(RTWLogInfo *li, time_T *tPtr, boolean_T updateTXY)\n{\n    LogInfo *logInfo     = rtliGetLogInfo(li);\n    int_T   matrixFormat = (rtliGetLogFormat(li) == 0);\n    const RTWLogSignalInfo* yInfo = rtliGetLogYSignalInfo(li);\n    const RTWLogSignalInfo* xInfo = rtliGetLogXSignalInfo(li);\n\n    /* time */\n    if (logInfo->t != NULL && updateTXY) {\n        rt_UpdateLogVar(logInfo->t, tPtr, false);\n    }\n\n    if (matrixFormat) {                                      /* MATRIX_FORMAT */\n        /* states */\n        if (logInfo->x != NULL || logInfo->xFinal != NULL) {\n            int8_T**               segAddr     = _rtliGetLogXSignalPtrs(li);\n            const int_T            *segLengths = xInfo->numCols;\n            int_T                  nSegments   = xInfo->numSignals;\n            RTWPreprocessingFcnPtr* preprocessingPtrs = xInfo->preprocessingPtrs;\n\n            if (logInfo->x != NULL && updateTXY) {\n                const char_T *errorMessage = rt_UpdateLogVarWithDiscontiguousData(logInfo->x, segAddr,\n                                                                                  segLengths, nSegments, \n                                                                                  preprocessingPtrs);\n                if (errorMessage != NULL) return(errorMessage);\n            }\n            if (logInfo->xFinal != NULL) {\n                const char_T *errorMessage = rt_UpdateLogVarWithDiscontiguousData(logInfo->xFinal, segAddr,\n                                                                                  segLengths, nSegments, \n                                                                                  preprocessingPtrs);\n                if (errorMessage != NULL) return(errorMessage);\n            }\n        }\n        /* outputs */\n        if (logInfo->y != NULL && updateTXY) {\n            LogVar **var = (LogVar**) (logInfo->y);\n            int_T  ny    = logInfo->ny;\n            int_T  i;\n            int    yIdx;\n            LogSignalPtrsType data = rtliGetLogYSignalPtrs(li);\n\n            for (i = 0, yIdx = 0; i < ny; i++) {\n                if (data[i] != NULL) {\n                    /* \n                       When outputs are logged in Matrix format, \n                       no variable-size signal logging is allowed.\n                    */\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *          Function pointer is now identified by using \n                     *          Y Signal Info instead of iterating over pre-processing \n                     *          function pointers.\n                    */ \n                    rt_preProcessAndLogData(yInfo[yIdx], var[yIdx], data[i], false);\n                    yIdx++;\n                }\n            }\n        }\n    } else {                                              /* STRUCTURE_FORMAT */\n        /* states */\n        if (logInfo->x != NULL && updateTXY) {\n            int_T             i;\n            StructLogVar      *var = logInfo->x;\n            LogVar            *val = var->signals.values;\n            int_T             nsig = var->signals.numSignals;\n            LogSignalPtrsType data = rtliGetLogXSignalPtrs(li);\n\n            /* time */\n            if (var->logTime) {\n                rt_UpdateLogVar(var->time, tPtr, false);\n            }\n\n            /* signals */\n            for (i = 0; i < nsig; i++) {\n                /* g1614989:Code refactoring and fix for logging issue.\n                 *         Function pointer is now identified by using \n                 *         X Signal Info instead of iterating over pre-processing \n                 *         function pointers.\n                 */\n                rt_preProcessAndLogDataWithIndex(xInfo, i, val, data[i], false);\n                val = val->next;\n            }\n        }\n\n        /* outputs */\n        if (logInfo->y != NULL && updateTXY) {\n            int_T             ny      = logInfo->ny;\n            LogSignalPtrsType data    = rtliGetLogYSignalPtrs(li);\n            StructLogVar      **var   = (StructLogVar**) (logInfo->y);\n\n            if (ny == 1) {\n                int_T  i;\n                int_T  dataIdx;\n                LogVar *val = var[0]->signals.values;\n                int_T  nsig = var[0]->signals.numSignals;\n                boolean_T   *isVarDims = var[0]->signals.isVarDims;\n\n                /* time */\n                if (var[0]->logTime) {\n                    rt_UpdateLogVar(var[0]->time, tPtr, false);\n                }\n\n                /* signals */\n                for (i = 0, dataIdx = 0; i < nsig; i++) {                    \n                    while (data[dataIdx] == NULL) {\n                        ++dataIdx;\n                    }\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *         Function pointer is now identified by using \n                     *         Y Signal Info instead of iterating over pre-processing \n                     *         function pointers.\n                     */\n                    rt_preProcessAndLogDataWithIndex(yInfo, i, val, data[dataIdx], isVarDims[i]);\n                    dataIdx++;\n                    val = val->next;\n                }\n            } else {\n                int_T  i;\n                int_T  dataIdx;\n\n                for (i = 0, dataIdx = 0; i < ny && var[i] != NULL; i++) {\n                    LogVar *val = var[i]->signals.values;\n                    boolean_T   *isVarDims = var[i]->signals.isVarDims;\n\n                    /* time */\n                    if (var[i]->logTime) {\n                        rt_UpdateLogVar(var[i]->time, tPtr, false);\n                    }\n\n                    /* signals */\n                    while (data[dataIdx] == NULL) {\n                        ++dataIdx;\n                    }\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *         Function pointer is now identified by using \n                     *         Y Signal Info instead of iterating over pre-processing \n                     *         function pointers.\n                     */\n                    rt_preProcessAndLogData(yInfo[i], val, data[dataIdx], isVarDims[0]);\n                    dataIdx++;\n                    val = val->next;\n                }\n            }\n        }\n        /* final state */\n        if (logInfo->xFinal != NULL) {\n            StructLogVar *xf  = logInfo->xFinal;\n            LogVar       *val = xf->signals.values;\n            int_T        nsig = xf->signals.numSignals;\n            int_T        i;\n\n            /* time */\n            if (xf->logTime) {\n                rt_UpdateLogVar(xf->time, tPtr, false);\n            }\n\n            /* signals */\n            for (i = 0; i < nsig; i++) {\n                LogSignalPtrsType data = rtliGetLogXSignalPtrs(li);\n                /* g1614989:Code refactoring and fix for logging issue.\n                 *         Function pointer is now identified by using \n                 *         X Signal Info instead of iterating over pre-processing \n                 *         function pointers.\n                 */\n                rt_preProcessAndLogDataWithIndex(xInfo, i, val, data[i], false);\n                val = val->next;\n            }\n        }\n    }\n    return(NULL);\n} /* end rt_UpdateTXXFYLogVars */\n\n\n#ifdef __cplusplus\n}\n#endif\n          \n\n          \n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StopDataLoggingImpl =======================================\n * Abstract:\n *\tWrite logged data to model.mat and free memory.\n */\nvoid rt_StopDataLoggingImpl(const char_T *file, RTWLogInfo *li, boolean_T isRaccel)\n{\n    FILE          *fptr;\n    LogInfo       *logInfo     = (LogInfo*) rtliGetLogInfo(li);\n    LogVar        *var         = logInfo->logVarsList;\n    StructLogVar  *svar        = logInfo->structLogVarsList;\n    /* At this time, verbose is only needed if running rapid accelerator\n     * simulations. */\n    int           verbose      = isRaccel ? 0: 1;\n\n    boolean_T     emptyFile    = 1; /* assume */\n    boolean_T     errFlag      = 0;\n    const char_T  *msg;\n\n    /*******************************\n     * Create MAT file with header *\n     *******************************/\n    if ((fptr=fopen(file,\"w+b\")) == NULL) {\n        (void)fprintf(stderr,\"*** Error opening %s\",file);\n        goto EXIT_POINT;\n    }\n    if (rt_WriteMat5FileHeader(fptr)) {\n        (void)fprintf(stderr,\"*** Error writing to %s\",file);\n        goto EXIT_POINT;\n    }\n\n    /**************************************************\n     * First log all the variables in the LogVar list *\n     **************************************************/\n    while (var != NULL) {\n        if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n            (void)fprintf(stderr,\"*** Error writing %s due to: %s\\n\",file,msg);\n            errFlag = 1;\n            break;\n        }\n        if (var->nDataPoints > 0 || isRaccel) {\n            MatItem item;\n\n            item.type   = matMATRIX;\n            item.nbytes = 0; /* not yet known */\n            item.data   = &(var->data);\n            if (rt_WriteItemToMatFile(fptr, &item, MATRIX_ITEM)) {\n                (void)fprintf(stderr,\"*** Error writing log variable %s to \"\n                              \"file %s\",var->data.name, file);\n                errFlag = 1;\n                break;\n            }\n            emptyFile = 0;\n        }\n        var = var->next;\n    }\n    /* free up some memory by destroying the log var list here */\n    rt_DestroyLogVar(logInfo->logVarsList);\n    logInfo->logVarsList = NULL;\n\n    /*******************************************************\n     * Next log all the variables in the StructLogVar list *\n     *******************************************************/\n    while (svar != NULL) {\n        MatItem item;\n\n        if (svar->logTime) {\n            var = svar->time;\n            if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n                (void)fprintf(stderr, \"*** Error writing %s due to: %s\\n\",\n                              file, msg);\n                errFlag = 1;\n                break;\n            }\n        }\n\n        var = svar->signals.values;\n        while (var) {\n            if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n                (void)fprintf(stderr, \"*** Error writing %s due to: %s\\n\",\n                              file, msg);\n                errFlag = 1;\n                break;\n            }\n            var = var->next;\n        }\n\n        item.type   = matMATRIX;\n        item.nbytes = 0; /* not yet known */\n        item.data   = svar;\n\n        if (rt_WriteItemToMatFile(fptr, &item, STRUCT_LOG_VAR_ITEM)) {\n            (void)fprintf(stderr,\"*** Error writing structure log variable \"\n                          \"%s to file %s\",svar->name, file);\n            errFlag = 1;\n            break;\n        }\n        emptyFile = 0;\n\n        svar = svar->next;\n    }\n\n    /******************\n     * Close the file *\n     ******************/\n    (void)fclose(fptr);\n    if (emptyFile || errFlag) {\n        (void)remove(file);\n    } else {\n        if( verbose ) {\n            (void)printf(\"** created %s **\\n\\n\", file);\n        }\n    }\n\n EXIT_POINT:\n\n    /****************\n     * free logInfo *\n     ****************/\n    rt_DestroyLogVar(logInfo->logVarsList);\n    logInfo->logVarsList = NULL;\n    rt_DestroyStructLogVar(logInfo->structLogVarsList);\n    logInfo->structLogVarsList = NULL;\n    FREE(logInfo->y);\n    logInfo->y = NULL;\n    FREE(logInfo);\n    rtliSetLogInfo(li,NULL);\n\n} /* end rt_StopDataLoggingImpl */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StopDataLogging ================================================\n * Abstract:\n *\tWrite logged data to model.mat and free memory.\n */\nvoid rt_StopDataLogging(const char_T *file, RTWLogInfo *li)\n{\n    rt_StopDataLoggingImpl(file,li,false);\n\n} /* end rt_StopDataLogging */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#else /*!defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)*/\n\n#define rt_StartDataLogging(li, finalTime, stepSize, errStatus) NULL /* do nothing */\n#define rt_UpdateTXYLogVars(li, tPtr) NULL /* do nothing */\n#define rt_StopDataLogging(file, li) { (void(file)); } /* use file quiet unused macro warning */ /* do nothing */\n\n#endif /*!defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)*/\n\n\n\n/* [eof] rt_logging.c */\n\n/* LocalWords:  Tfinal MAXNAM nonfinite DType PWS RSim Fixup logvar DDEFAULT th\n * LocalWords:  curr Realloc realloc inp biglong vijay ldexp TXY eof XFinal th\n * LocalWords:  TXXFY NULL typedefs ret polyspace NUL\n */\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};